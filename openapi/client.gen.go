// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package openapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AgeRatingDeclarationsUpdateInstance request with any body
	AgeRatingDeclarationsUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AgeRatingDeclarationsUpdateInstance(ctx context.Context, id string, body AgeRatingDeclarationsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppCategoriesGetCollection request
	AppCategoriesGetCollection(ctx context.Context, params *AppCategoriesGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppCategoriesGetInstance request
	AppCategoriesGetInstance(ctx context.Context, id string, params *AppCategoriesGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppCategoriesParentGetToOneRelated request
	AppCategoriesParentGetToOneRelated(ctx context.Context, id string, params *AppCategoriesParentGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppCategoriesSubcategoriesGetToManyRelated request
	AppCategoriesSubcategoriesGetToManyRelated(ctx context.Context, id string, params *AppCategoriesSubcategoriesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppEncryptionDeclarationsGetCollection request
	AppEncryptionDeclarationsGetCollection(ctx context.Context, params *AppEncryptionDeclarationsGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppEncryptionDeclarationsGetInstance request
	AppEncryptionDeclarationsGetInstance(ctx context.Context, id string, params *AppEncryptionDeclarationsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppEncryptionDeclarationsAppGetToOneRelated request
	AppEncryptionDeclarationsAppGetToOneRelated(ctx context.Context, id string, params *AppEncryptionDeclarationsAppGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppEncryptionDeclarationsBuildsCreateToManyRelationship request with any body
	AppEncryptionDeclarationsBuildsCreateToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AppEncryptionDeclarationsBuildsCreateToManyRelationship(ctx context.Context, id string, body AppEncryptionDeclarationsBuildsCreateToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppInfoLocalizationsCreateInstance request with any body
	AppInfoLocalizationsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AppInfoLocalizationsCreateInstance(ctx context.Context, body AppInfoLocalizationsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppInfoLocalizationsDeleteInstance request
	AppInfoLocalizationsDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppInfoLocalizationsGetInstance request
	AppInfoLocalizationsGetInstance(ctx context.Context, id string, params *AppInfoLocalizationsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppInfoLocalizationsUpdateInstance request with any body
	AppInfoLocalizationsUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AppInfoLocalizationsUpdateInstance(ctx context.Context, id string, body AppInfoLocalizationsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppInfosGetInstance request
	AppInfosGetInstance(ctx context.Context, id string, params *AppInfosGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppInfosUpdateInstance request with any body
	AppInfosUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AppInfosUpdateInstance(ctx context.Context, id string, body AppInfosUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppInfosAgeRatingDeclarationGetToOneRelated request
	AppInfosAgeRatingDeclarationGetToOneRelated(ctx context.Context, id string, params *AppInfosAgeRatingDeclarationGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppInfosAppInfoLocalizationsGetToManyRelated request
	AppInfosAppInfoLocalizationsGetToManyRelated(ctx context.Context, id string, params *AppInfosAppInfoLocalizationsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppInfosPrimaryCategoryGetToOneRelated request
	AppInfosPrimaryCategoryGetToOneRelated(ctx context.Context, id string, params *AppInfosPrimaryCategoryGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppInfosPrimarySubcategoryOneGetToOneRelated request
	AppInfosPrimarySubcategoryOneGetToOneRelated(ctx context.Context, id string, params *AppInfosPrimarySubcategoryOneGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppInfosPrimarySubcategoryTwoGetToOneRelated request
	AppInfosPrimarySubcategoryTwoGetToOneRelated(ctx context.Context, id string, params *AppInfosPrimarySubcategoryTwoGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppInfosSecondaryCategoryGetToOneRelated request
	AppInfosSecondaryCategoryGetToOneRelated(ctx context.Context, id string, params *AppInfosSecondaryCategoryGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppInfosSecondarySubcategoryOneGetToOneRelated request
	AppInfosSecondarySubcategoryOneGetToOneRelated(ctx context.Context, id string, params *AppInfosSecondarySubcategoryOneGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppInfosSecondarySubcategoryTwoGetToOneRelated request
	AppInfosSecondarySubcategoryTwoGetToOneRelated(ctx context.Context, id string, params *AppInfosSecondarySubcategoryTwoGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppPreOrdersCreateInstance request with any body
	AppPreOrdersCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AppPreOrdersCreateInstance(ctx context.Context, body AppPreOrdersCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppPreOrdersDeleteInstance request
	AppPreOrdersDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppPreOrdersGetInstance request
	AppPreOrdersGetInstance(ctx context.Context, id string, params *AppPreOrdersGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppPreOrdersUpdateInstance request with any body
	AppPreOrdersUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AppPreOrdersUpdateInstance(ctx context.Context, id string, body AppPreOrdersUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppPreviewSetsCreateInstance request with any body
	AppPreviewSetsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AppPreviewSetsCreateInstance(ctx context.Context, body AppPreviewSetsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppPreviewSetsDeleteInstance request
	AppPreviewSetsDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppPreviewSetsGetInstance request
	AppPreviewSetsGetInstance(ctx context.Context, id string, params *AppPreviewSetsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppPreviewSetsAppPreviewsGetToManyRelated request
	AppPreviewSetsAppPreviewsGetToManyRelated(ctx context.Context, id string, params *AppPreviewSetsAppPreviewsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppPreviewSetsAppPreviewsGetToManyRelationship request
	AppPreviewSetsAppPreviewsGetToManyRelationship(ctx context.Context, id string, params *AppPreviewSetsAppPreviewsGetToManyRelationshipParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppPreviewSetsAppPreviewsReplaceToManyRelationship request with any body
	AppPreviewSetsAppPreviewsReplaceToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AppPreviewSetsAppPreviewsReplaceToManyRelationship(ctx context.Context, id string, body AppPreviewSetsAppPreviewsReplaceToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppPreviewsCreateInstance request with any body
	AppPreviewsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AppPreviewsCreateInstance(ctx context.Context, body AppPreviewsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppPreviewsDeleteInstance request
	AppPreviewsDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppPreviewsGetInstance request
	AppPreviewsGetInstance(ctx context.Context, id string, params *AppPreviewsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppPreviewsUpdateInstance request with any body
	AppPreviewsUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AppPreviewsUpdateInstance(ctx context.Context, id string, body AppPreviewsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppPricePointsGetCollection request
	AppPricePointsGetCollection(ctx context.Context, params *AppPricePointsGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppPricePointsGetInstance request
	AppPricePointsGetInstance(ctx context.Context, id string, params *AppPricePointsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppPricePointsTerritoryGetToOneRelated request
	AppPricePointsTerritoryGetToOneRelated(ctx context.Context, id string, params *AppPricePointsTerritoryGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppPriceTiersGetCollection request
	AppPriceTiersGetCollection(ctx context.Context, params *AppPriceTiersGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppPriceTiersGetInstance request
	AppPriceTiersGetInstance(ctx context.Context, id string, params *AppPriceTiersGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppPriceTiersPricePointsGetToManyRelated request
	AppPriceTiersPricePointsGetToManyRelated(ctx context.Context, id string, params *AppPriceTiersPricePointsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppPricesGetInstance request
	AppPricesGetInstance(ctx context.Context, id string, params *AppPricesGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppScreenshotSetsCreateInstance request with any body
	AppScreenshotSetsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AppScreenshotSetsCreateInstance(ctx context.Context, body AppScreenshotSetsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppScreenshotSetsDeleteInstance request
	AppScreenshotSetsDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppScreenshotSetsGetInstance request
	AppScreenshotSetsGetInstance(ctx context.Context, id string, params *AppScreenshotSetsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppScreenshotSetsAppScreenshotsGetToManyRelated request
	AppScreenshotSetsAppScreenshotsGetToManyRelated(ctx context.Context, id string, params *AppScreenshotSetsAppScreenshotsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppScreenshotSetsAppScreenshotsGetToManyRelationship request
	AppScreenshotSetsAppScreenshotsGetToManyRelationship(ctx context.Context, id string, params *AppScreenshotSetsAppScreenshotsGetToManyRelationshipParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppScreenshotSetsAppScreenshotsReplaceToManyRelationship request with any body
	AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AppScreenshotSetsAppScreenshotsReplaceToManyRelationship(ctx context.Context, id string, body AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppScreenshotsCreateInstance request with any body
	AppScreenshotsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AppScreenshotsCreateInstance(ctx context.Context, body AppScreenshotsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppScreenshotsDeleteInstance request
	AppScreenshotsDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppScreenshotsGetInstance request
	AppScreenshotsGetInstance(ctx context.Context, id string, params *AppScreenshotsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppScreenshotsUpdateInstance request with any body
	AppScreenshotsUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AppScreenshotsUpdateInstance(ctx context.Context, id string, body AppScreenshotsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppStoreReviewAttachmentsCreateInstance request with any body
	AppStoreReviewAttachmentsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AppStoreReviewAttachmentsCreateInstance(ctx context.Context, body AppStoreReviewAttachmentsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppStoreReviewAttachmentsDeleteInstance request
	AppStoreReviewAttachmentsDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppStoreReviewAttachmentsGetInstance request
	AppStoreReviewAttachmentsGetInstance(ctx context.Context, id string, params *AppStoreReviewAttachmentsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppStoreReviewAttachmentsUpdateInstance request with any body
	AppStoreReviewAttachmentsUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AppStoreReviewAttachmentsUpdateInstance(ctx context.Context, id string, body AppStoreReviewAttachmentsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppStoreReviewDetailsCreateInstance request with any body
	AppStoreReviewDetailsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AppStoreReviewDetailsCreateInstance(ctx context.Context, body AppStoreReviewDetailsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppStoreReviewDetailsGetInstance request
	AppStoreReviewDetailsGetInstance(ctx context.Context, id string, params *AppStoreReviewDetailsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppStoreReviewDetailsUpdateInstance request with any body
	AppStoreReviewDetailsUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AppStoreReviewDetailsUpdateInstance(ctx context.Context, id string, body AppStoreReviewDetailsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelated request
	AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelated(ctx context.Context, id string, params *AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppStoreVersionLocalizationsCreateInstance request with any body
	AppStoreVersionLocalizationsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AppStoreVersionLocalizationsCreateInstance(ctx context.Context, body AppStoreVersionLocalizationsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppStoreVersionLocalizationsDeleteInstance request
	AppStoreVersionLocalizationsDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppStoreVersionLocalizationsGetInstance request
	AppStoreVersionLocalizationsGetInstance(ctx context.Context, id string, params *AppStoreVersionLocalizationsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppStoreVersionLocalizationsUpdateInstance request with any body
	AppStoreVersionLocalizationsUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AppStoreVersionLocalizationsUpdateInstance(ctx context.Context, id string, body AppStoreVersionLocalizationsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelated request
	AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelated(ctx context.Context, id string, params *AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelated request
	AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelated(ctx context.Context, id string, params *AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppStoreVersionPhasedReleasesCreateInstance request with any body
	AppStoreVersionPhasedReleasesCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AppStoreVersionPhasedReleasesCreateInstance(ctx context.Context, body AppStoreVersionPhasedReleasesCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppStoreVersionPhasedReleasesDeleteInstance request
	AppStoreVersionPhasedReleasesDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppStoreVersionPhasedReleasesUpdateInstance request with any body
	AppStoreVersionPhasedReleasesUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AppStoreVersionPhasedReleasesUpdateInstance(ctx context.Context, id string, body AppStoreVersionPhasedReleasesUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppStoreVersionReleaseRequestsCreateInstance request with any body
	AppStoreVersionReleaseRequestsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AppStoreVersionReleaseRequestsCreateInstance(ctx context.Context, body AppStoreVersionReleaseRequestsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppStoreVersionSubmissionsCreateInstance request with any body
	AppStoreVersionSubmissionsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AppStoreVersionSubmissionsCreateInstance(ctx context.Context, body AppStoreVersionSubmissionsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppStoreVersionSubmissionsDeleteInstance request
	AppStoreVersionSubmissionsDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppStoreVersionsCreateInstance request with any body
	AppStoreVersionsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AppStoreVersionsCreateInstance(ctx context.Context, body AppStoreVersionsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppStoreVersionsDeleteInstance request
	AppStoreVersionsDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppStoreVersionsGetInstance request
	AppStoreVersionsGetInstance(ctx context.Context, id string, params *AppStoreVersionsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppStoreVersionsUpdateInstance request with any body
	AppStoreVersionsUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AppStoreVersionsUpdateInstance(ctx context.Context, id string, body AppStoreVersionsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppStoreVersionsAgeRatingDeclarationGetToOneRelated request
	AppStoreVersionsAgeRatingDeclarationGetToOneRelated(ctx context.Context, id string, params *AppStoreVersionsAgeRatingDeclarationGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppStoreVersionsAppStoreReviewDetailGetToOneRelated request
	AppStoreVersionsAppStoreReviewDetailGetToOneRelated(ctx context.Context, id string, params *AppStoreVersionsAppStoreReviewDetailGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelated request
	AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelated(ctx context.Context, id string, params *AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated request
	AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated(ctx context.Context, id string, params *AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppStoreVersionsAppStoreVersionSubmissionGetToOneRelated request
	AppStoreVersionsAppStoreVersionSubmissionGetToOneRelated(ctx context.Context, id string, params *AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppStoreVersionsBuildGetToOneRelated request
	AppStoreVersionsBuildGetToOneRelated(ctx context.Context, id string, params *AppStoreVersionsBuildGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppStoreVersionsIdfaDeclarationGetToOneRelated request
	AppStoreVersionsIdfaDeclarationGetToOneRelated(ctx context.Context, id string, params *AppStoreVersionsIdfaDeclarationGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppStoreVersionsBuildGetToOneRelationship request
	AppStoreVersionsBuildGetToOneRelationship(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppStoreVersionsBuildUpdateToOneRelationship request with any body
	AppStoreVersionsBuildUpdateToOneRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AppStoreVersionsBuildUpdateToOneRelationship(ctx context.Context, id string, body AppStoreVersionsBuildUpdateToOneRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppStoreVersionsRoutingAppCoverageGetToOneRelated request
	AppStoreVersionsRoutingAppCoverageGetToOneRelated(ctx context.Context, id string, params *AppStoreVersionsRoutingAppCoverageGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppsGetCollection request
	AppsGetCollection(ctx context.Context, params *AppsGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppsGetInstance request
	AppsGetInstance(ctx context.Context, id string, params *AppsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppsUpdateInstance request with any body
	AppsUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AppsUpdateInstance(ctx context.Context, id string, body AppsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppsAppInfosGetToManyRelated request
	AppsAppInfosGetToManyRelated(ctx context.Context, id string, params *AppsAppInfosGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppsAppStoreVersionsGetToManyRelated request
	AppsAppStoreVersionsGetToManyRelated(ctx context.Context, id string, params *AppsAppStoreVersionsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppsAvailableTerritoriesGetToManyRelated request
	AppsAvailableTerritoriesGetToManyRelated(ctx context.Context, id string, params *AppsAvailableTerritoriesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppsBetaAppLocalizationsGetToManyRelated request
	AppsBetaAppLocalizationsGetToManyRelated(ctx context.Context, id string, params *AppsBetaAppLocalizationsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppsBetaAppReviewDetailGetToOneRelated request
	AppsBetaAppReviewDetailGetToOneRelated(ctx context.Context, id string, params *AppsBetaAppReviewDetailGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppsBetaGroupsGetToManyRelated request
	AppsBetaGroupsGetToManyRelated(ctx context.Context, id string, params *AppsBetaGroupsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppsBetaLicenseAgreementGetToOneRelated request
	AppsBetaLicenseAgreementGetToOneRelated(ctx context.Context, id string, params *AppsBetaLicenseAgreementGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppsBuildsGetToManyRelated request
	AppsBuildsGetToManyRelated(ctx context.Context, id string, params *AppsBuildsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppsCiProductGetToOneRelated request
	AppsCiProductGetToOneRelated(ctx context.Context, id string, params *AppsCiProductGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppsEndUserLicenseAgreementGetToOneRelated request
	AppsEndUserLicenseAgreementGetToOneRelated(ctx context.Context, id string, params *AppsEndUserLicenseAgreementGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppsGameCenterEnabledVersionsGetToManyRelated request
	AppsGameCenterEnabledVersionsGetToManyRelated(ctx context.Context, id string, params *AppsGameCenterEnabledVersionsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppsInAppPurchasesGetToManyRelated request
	AppsInAppPurchasesGetToManyRelated(ctx context.Context, id string, params *AppsInAppPurchasesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppsPerfPowerMetricsGetToManyRelated request
	AppsPerfPowerMetricsGetToManyRelated(ctx context.Context, id string, params *AppsPerfPowerMetricsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppsPreOrderGetToOneRelated request
	AppsPreOrderGetToOneRelated(ctx context.Context, id string, params *AppsPreOrderGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppsPreReleaseVersionsGetToManyRelated request
	AppsPreReleaseVersionsGetToManyRelated(ctx context.Context, id string, params *AppsPreReleaseVersionsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppsPricesGetToManyRelated request
	AppsPricesGetToManyRelated(ctx context.Context, id string, params *AppsPricesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppsBetaTestersDeleteToManyRelationship request with any body
	AppsBetaTestersDeleteToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AppsBetaTestersDeleteToManyRelationship(ctx context.Context, id string, body AppsBetaTestersDeleteToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaAppLocalizationsGetCollection request
	BetaAppLocalizationsGetCollection(ctx context.Context, params *BetaAppLocalizationsGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaAppLocalizationsCreateInstance request with any body
	BetaAppLocalizationsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BetaAppLocalizationsCreateInstance(ctx context.Context, body BetaAppLocalizationsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaAppLocalizationsDeleteInstance request
	BetaAppLocalizationsDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaAppLocalizationsGetInstance request
	BetaAppLocalizationsGetInstance(ctx context.Context, id string, params *BetaAppLocalizationsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaAppLocalizationsUpdateInstance request with any body
	BetaAppLocalizationsUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BetaAppLocalizationsUpdateInstance(ctx context.Context, id string, body BetaAppLocalizationsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaAppLocalizationsAppGetToOneRelated request
	BetaAppLocalizationsAppGetToOneRelated(ctx context.Context, id string, params *BetaAppLocalizationsAppGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaAppReviewDetailsGetCollection request
	BetaAppReviewDetailsGetCollection(ctx context.Context, params *BetaAppReviewDetailsGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaAppReviewDetailsGetInstance request
	BetaAppReviewDetailsGetInstance(ctx context.Context, id string, params *BetaAppReviewDetailsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaAppReviewDetailsUpdateInstance request with any body
	BetaAppReviewDetailsUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BetaAppReviewDetailsUpdateInstance(ctx context.Context, id string, body BetaAppReviewDetailsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaAppReviewDetailsAppGetToOneRelated request
	BetaAppReviewDetailsAppGetToOneRelated(ctx context.Context, id string, params *BetaAppReviewDetailsAppGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaAppReviewSubmissionsGetCollection request
	BetaAppReviewSubmissionsGetCollection(ctx context.Context, params *BetaAppReviewSubmissionsGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaAppReviewSubmissionsCreateInstance request with any body
	BetaAppReviewSubmissionsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BetaAppReviewSubmissionsCreateInstance(ctx context.Context, body BetaAppReviewSubmissionsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaAppReviewSubmissionsGetInstance request
	BetaAppReviewSubmissionsGetInstance(ctx context.Context, id string, params *BetaAppReviewSubmissionsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaAppReviewSubmissionsBuildGetToOneRelated request
	BetaAppReviewSubmissionsBuildGetToOneRelated(ctx context.Context, id string, params *BetaAppReviewSubmissionsBuildGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaBuildLocalizationsGetCollection request
	BetaBuildLocalizationsGetCollection(ctx context.Context, params *BetaBuildLocalizationsGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaBuildLocalizationsCreateInstance request with any body
	BetaBuildLocalizationsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BetaBuildLocalizationsCreateInstance(ctx context.Context, body BetaBuildLocalizationsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaBuildLocalizationsDeleteInstance request
	BetaBuildLocalizationsDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaBuildLocalizationsGetInstance request
	BetaBuildLocalizationsGetInstance(ctx context.Context, id string, params *BetaBuildLocalizationsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaBuildLocalizationsUpdateInstance request with any body
	BetaBuildLocalizationsUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BetaBuildLocalizationsUpdateInstance(ctx context.Context, id string, body BetaBuildLocalizationsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaBuildLocalizationsBuildGetToOneRelated request
	BetaBuildLocalizationsBuildGetToOneRelated(ctx context.Context, id string, params *BetaBuildLocalizationsBuildGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaGroupsGetCollection request
	BetaGroupsGetCollection(ctx context.Context, params *BetaGroupsGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaGroupsCreateInstance request with any body
	BetaGroupsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BetaGroupsCreateInstance(ctx context.Context, body BetaGroupsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaGroupsDeleteInstance request
	BetaGroupsDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaGroupsGetInstance request
	BetaGroupsGetInstance(ctx context.Context, id string, params *BetaGroupsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaGroupsUpdateInstance request with any body
	BetaGroupsUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BetaGroupsUpdateInstance(ctx context.Context, id string, body BetaGroupsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaGroupsAppGetToOneRelated request
	BetaGroupsAppGetToOneRelated(ctx context.Context, id string, params *BetaGroupsAppGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaGroupsBetaTestersGetToManyRelated request
	BetaGroupsBetaTestersGetToManyRelated(ctx context.Context, id string, params *BetaGroupsBetaTestersGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaGroupsBuildsGetToManyRelated request
	BetaGroupsBuildsGetToManyRelated(ctx context.Context, id string, params *BetaGroupsBuildsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaGroupsBetaTestersDeleteToManyRelationship request with any body
	BetaGroupsBetaTestersDeleteToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BetaGroupsBetaTestersDeleteToManyRelationship(ctx context.Context, id string, body BetaGroupsBetaTestersDeleteToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaGroupsBetaTestersGetToManyRelationship request
	BetaGroupsBetaTestersGetToManyRelationship(ctx context.Context, id string, params *BetaGroupsBetaTestersGetToManyRelationshipParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaGroupsBetaTestersCreateToManyRelationship request with any body
	BetaGroupsBetaTestersCreateToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BetaGroupsBetaTestersCreateToManyRelationship(ctx context.Context, id string, body BetaGroupsBetaTestersCreateToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaGroupsBuildsDeleteToManyRelationship request with any body
	BetaGroupsBuildsDeleteToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BetaGroupsBuildsDeleteToManyRelationship(ctx context.Context, id string, body BetaGroupsBuildsDeleteToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaGroupsBuildsGetToManyRelationship request
	BetaGroupsBuildsGetToManyRelationship(ctx context.Context, id string, params *BetaGroupsBuildsGetToManyRelationshipParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaGroupsBuildsCreateToManyRelationship request with any body
	BetaGroupsBuildsCreateToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BetaGroupsBuildsCreateToManyRelationship(ctx context.Context, id string, body BetaGroupsBuildsCreateToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaLicenseAgreementsGetCollection request
	BetaLicenseAgreementsGetCollection(ctx context.Context, params *BetaLicenseAgreementsGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaLicenseAgreementsGetInstance request
	BetaLicenseAgreementsGetInstance(ctx context.Context, id string, params *BetaLicenseAgreementsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaLicenseAgreementsUpdateInstance request with any body
	BetaLicenseAgreementsUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BetaLicenseAgreementsUpdateInstance(ctx context.Context, id string, body BetaLicenseAgreementsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaLicenseAgreementsAppGetToOneRelated request
	BetaLicenseAgreementsAppGetToOneRelated(ctx context.Context, id string, params *BetaLicenseAgreementsAppGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaTesterInvitationsCreateInstance request with any body
	BetaTesterInvitationsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BetaTesterInvitationsCreateInstance(ctx context.Context, body BetaTesterInvitationsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaTestersGetCollection request
	BetaTestersGetCollection(ctx context.Context, params *BetaTestersGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaTestersCreateInstance request with any body
	BetaTestersCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BetaTestersCreateInstance(ctx context.Context, body BetaTestersCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaTestersDeleteInstance request
	BetaTestersDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaTestersGetInstance request
	BetaTestersGetInstance(ctx context.Context, id string, params *BetaTestersGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaTestersAppsGetToManyRelated request
	BetaTestersAppsGetToManyRelated(ctx context.Context, id string, params *BetaTestersAppsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaTestersBetaGroupsGetToManyRelated request
	BetaTestersBetaGroupsGetToManyRelated(ctx context.Context, id string, params *BetaTestersBetaGroupsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaTestersBuildsGetToManyRelated request
	BetaTestersBuildsGetToManyRelated(ctx context.Context, id string, params *BetaTestersBuildsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaTestersAppsDeleteToManyRelationship request with any body
	BetaTestersAppsDeleteToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BetaTestersAppsDeleteToManyRelationship(ctx context.Context, id string, body BetaTestersAppsDeleteToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaTestersAppsGetToManyRelationship request
	BetaTestersAppsGetToManyRelationship(ctx context.Context, id string, params *BetaTestersAppsGetToManyRelationshipParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaTestersBetaGroupsDeleteToManyRelationship request with any body
	BetaTestersBetaGroupsDeleteToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BetaTestersBetaGroupsDeleteToManyRelationship(ctx context.Context, id string, body BetaTestersBetaGroupsDeleteToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaTestersBetaGroupsGetToManyRelationship request
	BetaTestersBetaGroupsGetToManyRelationship(ctx context.Context, id string, params *BetaTestersBetaGroupsGetToManyRelationshipParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaTestersBetaGroupsCreateToManyRelationship request with any body
	BetaTestersBetaGroupsCreateToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BetaTestersBetaGroupsCreateToManyRelationship(ctx context.Context, id string, body BetaTestersBetaGroupsCreateToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaTestersBuildsDeleteToManyRelationship request with any body
	BetaTestersBuildsDeleteToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BetaTestersBuildsDeleteToManyRelationship(ctx context.Context, id string, body BetaTestersBuildsDeleteToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaTestersBuildsGetToManyRelationship request
	BetaTestersBuildsGetToManyRelationship(ctx context.Context, id string, params *BetaTestersBuildsGetToManyRelationshipParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BetaTestersBuildsCreateToManyRelationship request with any body
	BetaTestersBuildsCreateToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BetaTestersBuildsCreateToManyRelationship(ctx context.Context, id string, body BetaTestersBuildsCreateToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BuildBetaDetailsGetCollection request
	BuildBetaDetailsGetCollection(ctx context.Context, params *BuildBetaDetailsGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BuildBetaDetailsGetInstance request
	BuildBetaDetailsGetInstance(ctx context.Context, id string, params *BuildBetaDetailsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BuildBetaDetailsUpdateInstance request with any body
	BuildBetaDetailsUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BuildBetaDetailsUpdateInstance(ctx context.Context, id string, body BuildBetaDetailsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BuildBetaDetailsBuildGetToOneRelated request
	BuildBetaDetailsBuildGetToOneRelated(ctx context.Context, id string, params *BuildBetaDetailsBuildGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BuildBetaNotificationsCreateInstance request with any body
	BuildBetaNotificationsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BuildBetaNotificationsCreateInstance(ctx context.Context, body BuildBetaNotificationsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BuildsGetCollection request
	BuildsGetCollection(ctx context.Context, params *BuildsGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BuildsGetInstance request
	BuildsGetInstance(ctx context.Context, id string, params *BuildsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BuildsUpdateInstance request with any body
	BuildsUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BuildsUpdateInstance(ctx context.Context, id string, body BuildsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BuildsAppGetToOneRelated request
	BuildsAppGetToOneRelated(ctx context.Context, id string, params *BuildsAppGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BuildsAppEncryptionDeclarationGetToOneRelated request
	BuildsAppEncryptionDeclarationGetToOneRelated(ctx context.Context, id string, params *BuildsAppEncryptionDeclarationGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BuildsAppStoreVersionGetToOneRelated request
	BuildsAppStoreVersionGetToOneRelated(ctx context.Context, id string, params *BuildsAppStoreVersionGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BuildsBetaAppReviewSubmissionGetToOneRelated request
	BuildsBetaAppReviewSubmissionGetToOneRelated(ctx context.Context, id string, params *BuildsBetaAppReviewSubmissionGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BuildsBetaBuildLocalizationsGetToManyRelated request
	BuildsBetaBuildLocalizationsGetToManyRelated(ctx context.Context, id string, params *BuildsBetaBuildLocalizationsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BuildsBuildBetaDetailGetToOneRelated request
	BuildsBuildBetaDetailGetToOneRelated(ctx context.Context, id string, params *BuildsBuildBetaDetailGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BuildsDiagnosticSignaturesGetToManyRelated request
	BuildsDiagnosticSignaturesGetToManyRelated(ctx context.Context, id string, params *BuildsDiagnosticSignaturesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BuildsIconsGetToManyRelated request
	BuildsIconsGetToManyRelated(ctx context.Context, id string, params *BuildsIconsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BuildsIndividualTestersGetToManyRelated request
	BuildsIndividualTestersGetToManyRelated(ctx context.Context, id string, params *BuildsIndividualTestersGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BuildsPerfPowerMetricsGetToManyRelated request
	BuildsPerfPowerMetricsGetToManyRelated(ctx context.Context, id string, params *BuildsPerfPowerMetricsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BuildsPreReleaseVersionGetToOneRelated request
	BuildsPreReleaseVersionGetToOneRelated(ctx context.Context, id string, params *BuildsPreReleaseVersionGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BuildsAppEncryptionDeclarationGetToOneRelationship request
	BuildsAppEncryptionDeclarationGetToOneRelationship(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BuildsAppEncryptionDeclarationUpdateToOneRelationship request with any body
	BuildsAppEncryptionDeclarationUpdateToOneRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BuildsAppEncryptionDeclarationUpdateToOneRelationship(ctx context.Context, id string, body BuildsAppEncryptionDeclarationUpdateToOneRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BuildsBetaGroupsDeleteToManyRelationship request with any body
	BuildsBetaGroupsDeleteToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BuildsBetaGroupsDeleteToManyRelationship(ctx context.Context, id string, body BuildsBetaGroupsDeleteToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BuildsBetaGroupsCreateToManyRelationship request with any body
	BuildsBetaGroupsCreateToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BuildsBetaGroupsCreateToManyRelationship(ctx context.Context, id string, body BuildsBetaGroupsCreateToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BuildsIndividualTestersDeleteToManyRelationship request with any body
	BuildsIndividualTestersDeleteToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BuildsIndividualTestersDeleteToManyRelationship(ctx context.Context, id string, body BuildsIndividualTestersDeleteToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BuildsIndividualTestersGetToManyRelationship request
	BuildsIndividualTestersGetToManyRelationship(ctx context.Context, id string, params *BuildsIndividualTestersGetToManyRelationshipParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BuildsIndividualTestersCreateToManyRelationship request with any body
	BuildsIndividualTestersCreateToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BuildsIndividualTestersCreateToManyRelationship(ctx context.Context, id string, body BuildsIndividualTestersCreateToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundleIdCapabilitiesCreateInstance request with any body
	BundleIdCapabilitiesCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BundleIdCapabilitiesCreateInstance(ctx context.Context, body BundleIdCapabilitiesCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundleIdCapabilitiesDeleteInstance request
	BundleIdCapabilitiesDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundleIdCapabilitiesUpdateInstance request with any body
	BundleIdCapabilitiesUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BundleIdCapabilitiesUpdateInstance(ctx context.Context, id string, body BundleIdCapabilitiesUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundleIdsGetCollection request
	BundleIdsGetCollection(ctx context.Context, params *BundleIdsGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundleIdsCreateInstance request with any body
	BundleIdsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BundleIdsCreateInstance(ctx context.Context, body BundleIdsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundleIdsDeleteInstance request
	BundleIdsDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundleIdsGetInstance request
	BundleIdsGetInstance(ctx context.Context, id string, params *BundleIdsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundleIdsUpdateInstance request with any body
	BundleIdsUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BundleIdsUpdateInstance(ctx context.Context, id string, body BundleIdsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundleIdsAppGetToOneRelated request
	BundleIdsAppGetToOneRelated(ctx context.Context, id string, params *BundleIdsAppGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundleIdsBundleIdCapabilitiesGetToManyRelated request
	BundleIdsBundleIdCapabilitiesGetToManyRelated(ctx context.Context, id string, params *BundleIdsBundleIdCapabilitiesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundleIdsProfilesGetToManyRelated request
	BundleIdsProfilesGetToManyRelated(ctx context.Context, id string, params *BundleIdsProfilesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CertificatesGetCollection request
	CertificatesGetCollection(ctx context.Context, params *CertificatesGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CertificatesCreateInstance request with any body
	CertificatesCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CertificatesCreateInstance(ctx context.Context, body CertificatesCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CertificatesDeleteInstance request
	CertificatesDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CertificatesGetInstance request
	CertificatesGetInstance(ctx context.Context, id string, params *CertificatesGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CiArtifactsGetInstance request
	CiArtifactsGetInstance(ctx context.Context, id string, params *CiArtifactsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CiBuildActionsGetInstance request
	CiBuildActionsGetInstance(ctx context.Context, id string, params *CiBuildActionsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CiBuildActionsArtifactsGetToManyRelated request
	CiBuildActionsArtifactsGetToManyRelated(ctx context.Context, id string, params *CiBuildActionsArtifactsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CiBuildActionsBuildRunGetToOneRelated request
	CiBuildActionsBuildRunGetToOneRelated(ctx context.Context, id string, params *CiBuildActionsBuildRunGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CiBuildActionsIssuesGetToManyRelated request
	CiBuildActionsIssuesGetToManyRelated(ctx context.Context, id string, params *CiBuildActionsIssuesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CiBuildActionsTestResultsGetToManyRelated request
	CiBuildActionsTestResultsGetToManyRelated(ctx context.Context, id string, params *CiBuildActionsTestResultsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CiBuildRunsCreateInstance request with any body
	CiBuildRunsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CiBuildRunsCreateInstance(ctx context.Context, body CiBuildRunsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CiBuildRunsGetInstance request
	CiBuildRunsGetInstance(ctx context.Context, id string, params *CiBuildRunsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CiBuildRunsActionsGetToManyRelated request
	CiBuildRunsActionsGetToManyRelated(ctx context.Context, id string, params *CiBuildRunsActionsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CiBuildRunsBuildsGetToManyRelated request
	CiBuildRunsBuildsGetToManyRelated(ctx context.Context, id string, params *CiBuildRunsBuildsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CiIssuesGetInstance request
	CiIssuesGetInstance(ctx context.Context, id string, params *CiIssuesGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CiMacOsVersionsGetCollection request
	CiMacOsVersionsGetCollection(ctx context.Context, params *CiMacOsVersionsGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CiMacOsVersionsGetInstance request
	CiMacOsVersionsGetInstance(ctx context.Context, id string, params *CiMacOsVersionsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CiMacOsVersionsXcodeVersionsGetToManyRelated request
	CiMacOsVersionsXcodeVersionsGetToManyRelated(ctx context.Context, id string, params *CiMacOsVersionsXcodeVersionsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CiProductsGetCollection request
	CiProductsGetCollection(ctx context.Context, params *CiProductsGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CiProductsDeleteInstance request
	CiProductsDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CiProductsGetInstance request
	CiProductsGetInstance(ctx context.Context, id string, params *CiProductsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CiProductsAdditionalRepositoriesGetToManyRelated request
	CiProductsAdditionalRepositoriesGetToManyRelated(ctx context.Context, id string, params *CiProductsAdditionalRepositoriesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CiProductsAppGetToOneRelated request
	CiProductsAppGetToOneRelated(ctx context.Context, id string, params *CiProductsAppGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CiProductsBuildRunsGetToManyRelated request
	CiProductsBuildRunsGetToManyRelated(ctx context.Context, id string, params *CiProductsBuildRunsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CiProductsPrimaryRepositoriesGetToManyRelated request
	CiProductsPrimaryRepositoriesGetToManyRelated(ctx context.Context, id string, params *CiProductsPrimaryRepositoriesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CiProductsWorkflowsGetToManyRelated request
	CiProductsWorkflowsGetToManyRelated(ctx context.Context, id string, params *CiProductsWorkflowsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CiTestResultsGetInstance request
	CiTestResultsGetInstance(ctx context.Context, id string, params *CiTestResultsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CiWorkflowsCreateInstance request with any body
	CiWorkflowsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CiWorkflowsCreateInstance(ctx context.Context, body CiWorkflowsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CiWorkflowsDeleteInstance request
	CiWorkflowsDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CiWorkflowsGetInstance request
	CiWorkflowsGetInstance(ctx context.Context, id string, params *CiWorkflowsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CiWorkflowsUpdateInstance request with any body
	CiWorkflowsUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CiWorkflowsUpdateInstance(ctx context.Context, id string, body CiWorkflowsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CiWorkflowsBuildRunsGetToManyRelated request
	CiWorkflowsBuildRunsGetToManyRelated(ctx context.Context, id string, params *CiWorkflowsBuildRunsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CiWorkflowsRepositoryGetToOneRelated request
	CiWorkflowsRepositoryGetToOneRelated(ctx context.Context, id string, params *CiWorkflowsRepositoryGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CiXcodeVersionsGetCollection request
	CiXcodeVersionsGetCollection(ctx context.Context, params *CiXcodeVersionsGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CiXcodeVersionsGetInstance request
	CiXcodeVersionsGetInstance(ctx context.Context, id string, params *CiXcodeVersionsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CiXcodeVersionsMacOsVersionsGetToManyRelated request
	CiXcodeVersionsMacOsVersionsGetToManyRelated(ctx context.Context, id string, params *CiXcodeVersionsMacOsVersionsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevicesGetCollection request
	DevicesGetCollection(ctx context.Context, params *DevicesGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevicesCreateInstance request with any body
	DevicesCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DevicesCreateInstance(ctx context.Context, body DevicesCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevicesGetInstance request
	DevicesGetInstance(ctx context.Context, id string, params *DevicesGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DevicesUpdateInstance request with any body
	DevicesUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DevicesUpdateInstance(ctx context.Context, id string, body DevicesUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DiagnosticSignaturesLogsGetToManyRelated request
	DiagnosticSignaturesLogsGetToManyRelated(ctx context.Context, id string, params *DiagnosticSignaturesLogsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EndUserLicenseAgreementsCreateInstance request with any body
	EndUserLicenseAgreementsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EndUserLicenseAgreementsCreateInstance(ctx context.Context, body EndUserLicenseAgreementsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EndUserLicenseAgreementsDeleteInstance request
	EndUserLicenseAgreementsDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EndUserLicenseAgreementsGetInstance request
	EndUserLicenseAgreementsGetInstance(ctx context.Context, id string, params *EndUserLicenseAgreementsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EndUserLicenseAgreementsUpdateInstance request with any body
	EndUserLicenseAgreementsUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EndUserLicenseAgreementsUpdateInstance(ctx context.Context, id string, body EndUserLicenseAgreementsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EndUserLicenseAgreementsTerritoriesGetToManyRelated request
	EndUserLicenseAgreementsTerritoriesGetToManyRelated(ctx context.Context, id string, params *EndUserLicenseAgreementsTerritoriesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FinanceReportsGetCollection request
	FinanceReportsGetCollection(ctx context.Context, params *FinanceReportsGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GameCenterEnabledVersionsCompatibleVersionsGetToManyRelated request
	GameCenterEnabledVersionsCompatibleVersionsGetToManyRelated(ctx context.Context, id string, params *GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationship request with any body
	GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationship(ctx context.Context, id string, body GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationship request
	GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationship(ctx context.Context, id string, params *GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationship request with any body
	GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationship(ctx context.Context, id string, body GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationship request with any body
	GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationship(ctx context.Context, id string, body GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IdfaDeclarationsCreateInstance request with any body
	IdfaDeclarationsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IdfaDeclarationsCreateInstance(ctx context.Context, body IdfaDeclarationsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IdfaDeclarationsDeleteInstance request
	IdfaDeclarationsDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IdfaDeclarationsUpdateInstance request with any body
	IdfaDeclarationsUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IdfaDeclarationsUpdateInstance(ctx context.Context, id string, body IdfaDeclarationsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InAppPurchasesGetInstance request
	InAppPurchasesGetInstance(ctx context.Context, id string, params *InAppPurchasesGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PreReleaseVersionsGetCollection request
	PreReleaseVersionsGetCollection(ctx context.Context, params *PreReleaseVersionsGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PreReleaseVersionsGetInstance request
	PreReleaseVersionsGetInstance(ctx context.Context, id string, params *PreReleaseVersionsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PreReleaseVersionsAppGetToOneRelated request
	PreReleaseVersionsAppGetToOneRelated(ctx context.Context, id string, params *PreReleaseVersionsAppGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PreReleaseVersionsBuildsGetToManyRelated request
	PreReleaseVersionsBuildsGetToManyRelated(ctx context.Context, id string, params *PreReleaseVersionsBuildsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProfilesGetCollection request
	ProfilesGetCollection(ctx context.Context, params *ProfilesGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProfilesCreateInstance request with any body
	ProfilesCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProfilesCreateInstance(ctx context.Context, body ProfilesCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProfilesDeleteInstance request
	ProfilesDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProfilesGetInstance request
	ProfilesGetInstance(ctx context.Context, id string, params *ProfilesGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProfilesBundleIdGetToOneRelated request
	ProfilesBundleIdGetToOneRelated(ctx context.Context, id string, params *ProfilesBundleIdGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProfilesCertificatesGetToManyRelated request
	ProfilesCertificatesGetToManyRelated(ctx context.Context, id string, params *ProfilesCertificatesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProfilesDevicesGetToManyRelated request
	ProfilesDevicesGetToManyRelated(ctx context.Context, id string, params *ProfilesDevicesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RoutingAppCoveragesCreateInstance request with any body
	RoutingAppCoveragesCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RoutingAppCoveragesCreateInstance(ctx context.Context, body RoutingAppCoveragesCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RoutingAppCoveragesDeleteInstance request
	RoutingAppCoveragesDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RoutingAppCoveragesGetInstance request
	RoutingAppCoveragesGetInstance(ctx context.Context, id string, params *RoutingAppCoveragesGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RoutingAppCoveragesUpdateInstance request with any body
	RoutingAppCoveragesUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RoutingAppCoveragesUpdateInstance(ctx context.Context, id string, body RoutingAppCoveragesUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SalesReportsGetCollection request
	SalesReportsGetCollection(ctx context.Context, params *SalesReportsGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScmGitReferencesGetInstance request
	ScmGitReferencesGetInstance(ctx context.Context, id string, params *ScmGitReferencesGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScmProvidersGetCollection request
	ScmProvidersGetCollection(ctx context.Context, params *ScmProvidersGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScmProvidersGetInstance request
	ScmProvidersGetInstance(ctx context.Context, id string, params *ScmProvidersGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScmProvidersRepositoriesGetToManyRelated request
	ScmProvidersRepositoriesGetToManyRelated(ctx context.Context, id string, params *ScmProvidersRepositoriesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScmPullRequestsGetInstance request
	ScmPullRequestsGetInstance(ctx context.Context, id string, params *ScmPullRequestsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScmRepositoriesGetCollection request
	ScmRepositoriesGetCollection(ctx context.Context, params *ScmRepositoriesGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScmRepositoriesGetInstance request
	ScmRepositoriesGetInstance(ctx context.Context, id string, params *ScmRepositoriesGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScmRepositoriesGitReferencesGetToManyRelated request
	ScmRepositoriesGitReferencesGetToManyRelated(ctx context.Context, id string, params *ScmRepositoriesGitReferencesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScmRepositoriesPullRequestsGetToManyRelated request
	ScmRepositoriesPullRequestsGetToManyRelated(ctx context.Context, id string, params *ScmRepositoriesPullRequestsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TerritoriesGetCollection request
	TerritoriesGetCollection(ctx context.Context, params *TerritoriesGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserInvitationsGetCollection request
	UserInvitationsGetCollection(ctx context.Context, params *UserInvitationsGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserInvitationsCreateInstance request with any body
	UserInvitationsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserInvitationsCreateInstance(ctx context.Context, body UserInvitationsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserInvitationsDeleteInstance request
	UserInvitationsDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserInvitationsGetInstance request
	UserInvitationsGetInstance(ctx context.Context, id string, params *UserInvitationsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserInvitationsVisibleAppsGetToManyRelated request
	UserInvitationsVisibleAppsGetToManyRelated(ctx context.Context, id string, params *UserInvitationsVisibleAppsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersGetCollection request
	UsersGetCollection(ctx context.Context, params *UsersGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersDeleteInstance request
	UsersDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersGetInstance request
	UsersGetInstance(ctx context.Context, id string, params *UsersGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersUpdateInstance request with any body
	UsersUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersUpdateInstance(ctx context.Context, id string, body UsersUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersVisibleAppsDeleteToManyRelationship request with any body
	UsersVisibleAppsDeleteToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersVisibleAppsDeleteToManyRelationship(ctx context.Context, id string, body UsersVisibleAppsDeleteToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersVisibleAppsGetToManyRelationship request
	UsersVisibleAppsGetToManyRelationship(ctx context.Context, id string, params *UsersVisibleAppsGetToManyRelationshipParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersVisibleAppsReplaceToManyRelationship request with any body
	UsersVisibleAppsReplaceToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersVisibleAppsReplaceToManyRelationship(ctx context.Context, id string, body UsersVisibleAppsReplaceToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersVisibleAppsCreateToManyRelationship request with any body
	UsersVisibleAppsCreateToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersVisibleAppsCreateToManyRelationship(ctx context.Context, id string, body UsersVisibleAppsCreateToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersVisibleAppsGetToManyRelated request
	UsersVisibleAppsGetToManyRelated(ctx context.Context, id string, params *UsersVisibleAppsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AgeRatingDeclarationsUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAgeRatingDeclarationsUpdateInstanceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgeRatingDeclarationsUpdateInstance(ctx context.Context, id string, body AgeRatingDeclarationsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAgeRatingDeclarationsUpdateInstanceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppCategoriesGetCollection(ctx context.Context, params *AppCategoriesGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppCategoriesGetCollectionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppCategoriesGetInstance(ctx context.Context, id string, params *AppCategoriesGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppCategoriesGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppCategoriesParentGetToOneRelated(ctx context.Context, id string, params *AppCategoriesParentGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppCategoriesParentGetToOneRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppCategoriesSubcategoriesGetToManyRelated(ctx context.Context, id string, params *AppCategoriesSubcategoriesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppCategoriesSubcategoriesGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppEncryptionDeclarationsGetCollection(ctx context.Context, params *AppEncryptionDeclarationsGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppEncryptionDeclarationsGetCollectionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppEncryptionDeclarationsGetInstance(ctx context.Context, id string, params *AppEncryptionDeclarationsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppEncryptionDeclarationsGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppEncryptionDeclarationsAppGetToOneRelated(ctx context.Context, id string, params *AppEncryptionDeclarationsAppGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppEncryptionDeclarationsAppGetToOneRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppEncryptionDeclarationsBuildsCreateToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppEncryptionDeclarationsBuildsCreateToManyRelationshipRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppEncryptionDeclarationsBuildsCreateToManyRelationship(ctx context.Context, id string, body AppEncryptionDeclarationsBuildsCreateToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppEncryptionDeclarationsBuildsCreateToManyRelationshipRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppInfoLocalizationsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppInfoLocalizationsCreateInstanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppInfoLocalizationsCreateInstance(ctx context.Context, body AppInfoLocalizationsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppInfoLocalizationsCreateInstanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppInfoLocalizationsDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppInfoLocalizationsDeleteInstanceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppInfoLocalizationsGetInstance(ctx context.Context, id string, params *AppInfoLocalizationsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppInfoLocalizationsGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppInfoLocalizationsUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppInfoLocalizationsUpdateInstanceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppInfoLocalizationsUpdateInstance(ctx context.Context, id string, body AppInfoLocalizationsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppInfoLocalizationsUpdateInstanceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppInfosGetInstance(ctx context.Context, id string, params *AppInfosGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppInfosGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppInfosUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppInfosUpdateInstanceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppInfosUpdateInstance(ctx context.Context, id string, body AppInfosUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppInfosUpdateInstanceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppInfosAgeRatingDeclarationGetToOneRelated(ctx context.Context, id string, params *AppInfosAgeRatingDeclarationGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppInfosAgeRatingDeclarationGetToOneRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppInfosAppInfoLocalizationsGetToManyRelated(ctx context.Context, id string, params *AppInfosAppInfoLocalizationsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppInfosAppInfoLocalizationsGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppInfosPrimaryCategoryGetToOneRelated(ctx context.Context, id string, params *AppInfosPrimaryCategoryGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppInfosPrimaryCategoryGetToOneRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppInfosPrimarySubcategoryOneGetToOneRelated(ctx context.Context, id string, params *AppInfosPrimarySubcategoryOneGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppInfosPrimarySubcategoryOneGetToOneRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppInfosPrimarySubcategoryTwoGetToOneRelated(ctx context.Context, id string, params *AppInfosPrimarySubcategoryTwoGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppInfosPrimarySubcategoryTwoGetToOneRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppInfosSecondaryCategoryGetToOneRelated(ctx context.Context, id string, params *AppInfosSecondaryCategoryGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppInfosSecondaryCategoryGetToOneRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppInfosSecondarySubcategoryOneGetToOneRelated(ctx context.Context, id string, params *AppInfosSecondarySubcategoryOneGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppInfosSecondarySubcategoryOneGetToOneRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppInfosSecondarySubcategoryTwoGetToOneRelated(ctx context.Context, id string, params *AppInfosSecondarySubcategoryTwoGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppInfosSecondarySubcategoryTwoGetToOneRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppPreOrdersCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppPreOrdersCreateInstanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppPreOrdersCreateInstance(ctx context.Context, body AppPreOrdersCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppPreOrdersCreateInstanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppPreOrdersDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppPreOrdersDeleteInstanceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppPreOrdersGetInstance(ctx context.Context, id string, params *AppPreOrdersGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppPreOrdersGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppPreOrdersUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppPreOrdersUpdateInstanceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppPreOrdersUpdateInstance(ctx context.Context, id string, body AppPreOrdersUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppPreOrdersUpdateInstanceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppPreviewSetsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppPreviewSetsCreateInstanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppPreviewSetsCreateInstance(ctx context.Context, body AppPreviewSetsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppPreviewSetsCreateInstanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppPreviewSetsDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppPreviewSetsDeleteInstanceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppPreviewSetsGetInstance(ctx context.Context, id string, params *AppPreviewSetsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppPreviewSetsGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppPreviewSetsAppPreviewsGetToManyRelated(ctx context.Context, id string, params *AppPreviewSetsAppPreviewsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppPreviewSetsAppPreviewsGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppPreviewSetsAppPreviewsGetToManyRelationship(ctx context.Context, id string, params *AppPreviewSetsAppPreviewsGetToManyRelationshipParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppPreviewSetsAppPreviewsGetToManyRelationshipRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppPreviewSetsAppPreviewsReplaceToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppPreviewSetsAppPreviewsReplaceToManyRelationshipRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppPreviewSetsAppPreviewsReplaceToManyRelationship(ctx context.Context, id string, body AppPreviewSetsAppPreviewsReplaceToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppPreviewSetsAppPreviewsReplaceToManyRelationshipRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppPreviewsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppPreviewsCreateInstanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppPreviewsCreateInstance(ctx context.Context, body AppPreviewsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppPreviewsCreateInstanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppPreviewsDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppPreviewsDeleteInstanceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppPreviewsGetInstance(ctx context.Context, id string, params *AppPreviewsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppPreviewsGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppPreviewsUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppPreviewsUpdateInstanceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppPreviewsUpdateInstance(ctx context.Context, id string, body AppPreviewsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppPreviewsUpdateInstanceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppPricePointsGetCollection(ctx context.Context, params *AppPricePointsGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppPricePointsGetCollectionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppPricePointsGetInstance(ctx context.Context, id string, params *AppPricePointsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppPricePointsGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppPricePointsTerritoryGetToOneRelated(ctx context.Context, id string, params *AppPricePointsTerritoryGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppPricePointsTerritoryGetToOneRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppPriceTiersGetCollection(ctx context.Context, params *AppPriceTiersGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppPriceTiersGetCollectionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppPriceTiersGetInstance(ctx context.Context, id string, params *AppPriceTiersGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppPriceTiersGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppPriceTiersPricePointsGetToManyRelated(ctx context.Context, id string, params *AppPriceTiersPricePointsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppPriceTiersPricePointsGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppPricesGetInstance(ctx context.Context, id string, params *AppPricesGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppPricesGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppScreenshotSetsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppScreenshotSetsCreateInstanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppScreenshotSetsCreateInstance(ctx context.Context, body AppScreenshotSetsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppScreenshotSetsCreateInstanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppScreenshotSetsDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppScreenshotSetsDeleteInstanceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppScreenshotSetsGetInstance(ctx context.Context, id string, params *AppScreenshotSetsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppScreenshotSetsGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppScreenshotSetsAppScreenshotsGetToManyRelated(ctx context.Context, id string, params *AppScreenshotSetsAppScreenshotsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppScreenshotSetsAppScreenshotsGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppScreenshotSetsAppScreenshotsGetToManyRelationship(ctx context.Context, id string, params *AppScreenshotSetsAppScreenshotsGetToManyRelationshipParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppScreenshotSetsAppScreenshotsGetToManyRelationshipRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppScreenshotSetsAppScreenshotsReplaceToManyRelationshipRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppScreenshotSetsAppScreenshotsReplaceToManyRelationship(ctx context.Context, id string, body AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppScreenshotSetsAppScreenshotsReplaceToManyRelationshipRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppScreenshotsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppScreenshotsCreateInstanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppScreenshotsCreateInstance(ctx context.Context, body AppScreenshotsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppScreenshotsCreateInstanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppScreenshotsDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppScreenshotsDeleteInstanceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppScreenshotsGetInstance(ctx context.Context, id string, params *AppScreenshotsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppScreenshotsGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppScreenshotsUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppScreenshotsUpdateInstanceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppScreenshotsUpdateInstance(ctx context.Context, id string, body AppScreenshotsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppScreenshotsUpdateInstanceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreReviewAttachmentsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreReviewAttachmentsCreateInstanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreReviewAttachmentsCreateInstance(ctx context.Context, body AppStoreReviewAttachmentsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreReviewAttachmentsCreateInstanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreReviewAttachmentsDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreReviewAttachmentsDeleteInstanceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreReviewAttachmentsGetInstance(ctx context.Context, id string, params *AppStoreReviewAttachmentsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreReviewAttachmentsGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreReviewAttachmentsUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreReviewAttachmentsUpdateInstanceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreReviewAttachmentsUpdateInstance(ctx context.Context, id string, body AppStoreReviewAttachmentsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreReviewAttachmentsUpdateInstanceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreReviewDetailsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreReviewDetailsCreateInstanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreReviewDetailsCreateInstance(ctx context.Context, body AppStoreReviewDetailsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreReviewDetailsCreateInstanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreReviewDetailsGetInstance(ctx context.Context, id string, params *AppStoreReviewDetailsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreReviewDetailsGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreReviewDetailsUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreReviewDetailsUpdateInstanceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreReviewDetailsUpdateInstance(ctx context.Context, id string, body AppStoreReviewDetailsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreReviewDetailsUpdateInstanceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelated(ctx context.Context, id string, params *AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreVersionLocalizationsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreVersionLocalizationsCreateInstanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreVersionLocalizationsCreateInstance(ctx context.Context, body AppStoreVersionLocalizationsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreVersionLocalizationsCreateInstanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreVersionLocalizationsDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreVersionLocalizationsDeleteInstanceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreVersionLocalizationsGetInstance(ctx context.Context, id string, params *AppStoreVersionLocalizationsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreVersionLocalizationsGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreVersionLocalizationsUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreVersionLocalizationsUpdateInstanceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreVersionLocalizationsUpdateInstance(ctx context.Context, id string, body AppStoreVersionLocalizationsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreVersionLocalizationsUpdateInstanceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelated(ctx context.Context, id string, params *AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelated(ctx context.Context, id string, params *AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreVersionPhasedReleasesCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreVersionPhasedReleasesCreateInstanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreVersionPhasedReleasesCreateInstance(ctx context.Context, body AppStoreVersionPhasedReleasesCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreVersionPhasedReleasesCreateInstanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreVersionPhasedReleasesDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreVersionPhasedReleasesDeleteInstanceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreVersionPhasedReleasesUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreVersionPhasedReleasesUpdateInstanceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreVersionPhasedReleasesUpdateInstance(ctx context.Context, id string, body AppStoreVersionPhasedReleasesUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreVersionPhasedReleasesUpdateInstanceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreVersionReleaseRequestsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreVersionReleaseRequestsCreateInstanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreVersionReleaseRequestsCreateInstance(ctx context.Context, body AppStoreVersionReleaseRequestsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreVersionReleaseRequestsCreateInstanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreVersionSubmissionsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreVersionSubmissionsCreateInstanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreVersionSubmissionsCreateInstance(ctx context.Context, body AppStoreVersionSubmissionsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreVersionSubmissionsCreateInstanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreVersionSubmissionsDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreVersionSubmissionsDeleteInstanceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreVersionsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreVersionsCreateInstanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreVersionsCreateInstance(ctx context.Context, body AppStoreVersionsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreVersionsCreateInstanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreVersionsDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreVersionsDeleteInstanceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreVersionsGetInstance(ctx context.Context, id string, params *AppStoreVersionsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreVersionsGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreVersionsUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreVersionsUpdateInstanceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreVersionsUpdateInstance(ctx context.Context, id string, body AppStoreVersionsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreVersionsUpdateInstanceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreVersionsAgeRatingDeclarationGetToOneRelated(ctx context.Context, id string, params *AppStoreVersionsAgeRatingDeclarationGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreVersionsAgeRatingDeclarationGetToOneRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreVersionsAppStoreReviewDetailGetToOneRelated(ctx context.Context, id string, params *AppStoreVersionsAppStoreReviewDetailGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreVersionsAppStoreReviewDetailGetToOneRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelated(ctx context.Context, id string, params *AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated(ctx context.Context, id string, params *AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreVersionsAppStoreVersionSubmissionGetToOneRelated(ctx context.Context, id string, params *AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreVersionsBuildGetToOneRelated(ctx context.Context, id string, params *AppStoreVersionsBuildGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreVersionsBuildGetToOneRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreVersionsIdfaDeclarationGetToOneRelated(ctx context.Context, id string, params *AppStoreVersionsIdfaDeclarationGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreVersionsIdfaDeclarationGetToOneRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreVersionsBuildGetToOneRelationship(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreVersionsBuildGetToOneRelationshipRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreVersionsBuildUpdateToOneRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreVersionsBuildUpdateToOneRelationshipRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreVersionsBuildUpdateToOneRelationship(ctx context.Context, id string, body AppStoreVersionsBuildUpdateToOneRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreVersionsBuildUpdateToOneRelationshipRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStoreVersionsRoutingAppCoverageGetToOneRelated(ctx context.Context, id string, params *AppStoreVersionsRoutingAppCoverageGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStoreVersionsRoutingAppCoverageGetToOneRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsGetCollection(ctx context.Context, params *AppsGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsGetCollectionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsGetInstance(ctx context.Context, id string, params *AppsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsUpdateInstanceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsUpdateInstance(ctx context.Context, id string, body AppsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsUpdateInstanceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsAppInfosGetToManyRelated(ctx context.Context, id string, params *AppsAppInfosGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsAppInfosGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsAppStoreVersionsGetToManyRelated(ctx context.Context, id string, params *AppsAppStoreVersionsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsAppStoreVersionsGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsAvailableTerritoriesGetToManyRelated(ctx context.Context, id string, params *AppsAvailableTerritoriesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsAvailableTerritoriesGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsBetaAppLocalizationsGetToManyRelated(ctx context.Context, id string, params *AppsBetaAppLocalizationsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsBetaAppLocalizationsGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsBetaAppReviewDetailGetToOneRelated(ctx context.Context, id string, params *AppsBetaAppReviewDetailGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsBetaAppReviewDetailGetToOneRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsBetaGroupsGetToManyRelated(ctx context.Context, id string, params *AppsBetaGroupsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsBetaGroupsGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsBetaLicenseAgreementGetToOneRelated(ctx context.Context, id string, params *AppsBetaLicenseAgreementGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsBetaLicenseAgreementGetToOneRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsBuildsGetToManyRelated(ctx context.Context, id string, params *AppsBuildsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsBuildsGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsCiProductGetToOneRelated(ctx context.Context, id string, params *AppsCiProductGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsCiProductGetToOneRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsEndUserLicenseAgreementGetToOneRelated(ctx context.Context, id string, params *AppsEndUserLicenseAgreementGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsEndUserLicenseAgreementGetToOneRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsGameCenterEnabledVersionsGetToManyRelated(ctx context.Context, id string, params *AppsGameCenterEnabledVersionsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsGameCenterEnabledVersionsGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsInAppPurchasesGetToManyRelated(ctx context.Context, id string, params *AppsInAppPurchasesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsInAppPurchasesGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsPerfPowerMetricsGetToManyRelated(ctx context.Context, id string, params *AppsPerfPowerMetricsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsPerfPowerMetricsGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsPreOrderGetToOneRelated(ctx context.Context, id string, params *AppsPreOrderGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsPreOrderGetToOneRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsPreReleaseVersionsGetToManyRelated(ctx context.Context, id string, params *AppsPreReleaseVersionsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsPreReleaseVersionsGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsPricesGetToManyRelated(ctx context.Context, id string, params *AppsPricesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsPricesGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsBetaTestersDeleteToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsBetaTestersDeleteToManyRelationshipRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsBetaTestersDeleteToManyRelationship(ctx context.Context, id string, body AppsBetaTestersDeleteToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsBetaTestersDeleteToManyRelationshipRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaAppLocalizationsGetCollection(ctx context.Context, params *BetaAppLocalizationsGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaAppLocalizationsGetCollectionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaAppLocalizationsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaAppLocalizationsCreateInstanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaAppLocalizationsCreateInstance(ctx context.Context, body BetaAppLocalizationsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaAppLocalizationsCreateInstanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaAppLocalizationsDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaAppLocalizationsDeleteInstanceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaAppLocalizationsGetInstance(ctx context.Context, id string, params *BetaAppLocalizationsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaAppLocalizationsGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaAppLocalizationsUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaAppLocalizationsUpdateInstanceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaAppLocalizationsUpdateInstance(ctx context.Context, id string, body BetaAppLocalizationsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaAppLocalizationsUpdateInstanceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaAppLocalizationsAppGetToOneRelated(ctx context.Context, id string, params *BetaAppLocalizationsAppGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaAppLocalizationsAppGetToOneRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaAppReviewDetailsGetCollection(ctx context.Context, params *BetaAppReviewDetailsGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaAppReviewDetailsGetCollectionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaAppReviewDetailsGetInstance(ctx context.Context, id string, params *BetaAppReviewDetailsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaAppReviewDetailsGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaAppReviewDetailsUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaAppReviewDetailsUpdateInstanceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaAppReviewDetailsUpdateInstance(ctx context.Context, id string, body BetaAppReviewDetailsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaAppReviewDetailsUpdateInstanceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaAppReviewDetailsAppGetToOneRelated(ctx context.Context, id string, params *BetaAppReviewDetailsAppGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaAppReviewDetailsAppGetToOneRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaAppReviewSubmissionsGetCollection(ctx context.Context, params *BetaAppReviewSubmissionsGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaAppReviewSubmissionsGetCollectionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaAppReviewSubmissionsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaAppReviewSubmissionsCreateInstanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaAppReviewSubmissionsCreateInstance(ctx context.Context, body BetaAppReviewSubmissionsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaAppReviewSubmissionsCreateInstanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaAppReviewSubmissionsGetInstance(ctx context.Context, id string, params *BetaAppReviewSubmissionsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaAppReviewSubmissionsGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaAppReviewSubmissionsBuildGetToOneRelated(ctx context.Context, id string, params *BetaAppReviewSubmissionsBuildGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaAppReviewSubmissionsBuildGetToOneRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaBuildLocalizationsGetCollection(ctx context.Context, params *BetaBuildLocalizationsGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaBuildLocalizationsGetCollectionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaBuildLocalizationsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaBuildLocalizationsCreateInstanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaBuildLocalizationsCreateInstance(ctx context.Context, body BetaBuildLocalizationsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaBuildLocalizationsCreateInstanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaBuildLocalizationsDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaBuildLocalizationsDeleteInstanceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaBuildLocalizationsGetInstance(ctx context.Context, id string, params *BetaBuildLocalizationsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaBuildLocalizationsGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaBuildLocalizationsUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaBuildLocalizationsUpdateInstanceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaBuildLocalizationsUpdateInstance(ctx context.Context, id string, body BetaBuildLocalizationsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaBuildLocalizationsUpdateInstanceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaBuildLocalizationsBuildGetToOneRelated(ctx context.Context, id string, params *BetaBuildLocalizationsBuildGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaBuildLocalizationsBuildGetToOneRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaGroupsGetCollection(ctx context.Context, params *BetaGroupsGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaGroupsGetCollectionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaGroupsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaGroupsCreateInstanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaGroupsCreateInstance(ctx context.Context, body BetaGroupsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaGroupsCreateInstanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaGroupsDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaGroupsDeleteInstanceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaGroupsGetInstance(ctx context.Context, id string, params *BetaGroupsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaGroupsGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaGroupsUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaGroupsUpdateInstanceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaGroupsUpdateInstance(ctx context.Context, id string, body BetaGroupsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaGroupsUpdateInstanceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaGroupsAppGetToOneRelated(ctx context.Context, id string, params *BetaGroupsAppGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaGroupsAppGetToOneRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaGroupsBetaTestersGetToManyRelated(ctx context.Context, id string, params *BetaGroupsBetaTestersGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaGroupsBetaTestersGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaGroupsBuildsGetToManyRelated(ctx context.Context, id string, params *BetaGroupsBuildsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaGroupsBuildsGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaGroupsBetaTestersDeleteToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaGroupsBetaTestersDeleteToManyRelationshipRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaGroupsBetaTestersDeleteToManyRelationship(ctx context.Context, id string, body BetaGroupsBetaTestersDeleteToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaGroupsBetaTestersDeleteToManyRelationshipRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaGroupsBetaTestersGetToManyRelationship(ctx context.Context, id string, params *BetaGroupsBetaTestersGetToManyRelationshipParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaGroupsBetaTestersGetToManyRelationshipRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaGroupsBetaTestersCreateToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaGroupsBetaTestersCreateToManyRelationshipRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaGroupsBetaTestersCreateToManyRelationship(ctx context.Context, id string, body BetaGroupsBetaTestersCreateToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaGroupsBetaTestersCreateToManyRelationshipRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaGroupsBuildsDeleteToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaGroupsBuildsDeleteToManyRelationshipRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaGroupsBuildsDeleteToManyRelationship(ctx context.Context, id string, body BetaGroupsBuildsDeleteToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaGroupsBuildsDeleteToManyRelationshipRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaGroupsBuildsGetToManyRelationship(ctx context.Context, id string, params *BetaGroupsBuildsGetToManyRelationshipParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaGroupsBuildsGetToManyRelationshipRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaGroupsBuildsCreateToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaGroupsBuildsCreateToManyRelationshipRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaGroupsBuildsCreateToManyRelationship(ctx context.Context, id string, body BetaGroupsBuildsCreateToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaGroupsBuildsCreateToManyRelationshipRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaLicenseAgreementsGetCollection(ctx context.Context, params *BetaLicenseAgreementsGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaLicenseAgreementsGetCollectionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaLicenseAgreementsGetInstance(ctx context.Context, id string, params *BetaLicenseAgreementsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaLicenseAgreementsGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaLicenseAgreementsUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaLicenseAgreementsUpdateInstanceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaLicenseAgreementsUpdateInstance(ctx context.Context, id string, body BetaLicenseAgreementsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaLicenseAgreementsUpdateInstanceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaLicenseAgreementsAppGetToOneRelated(ctx context.Context, id string, params *BetaLicenseAgreementsAppGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaLicenseAgreementsAppGetToOneRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaTesterInvitationsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaTesterInvitationsCreateInstanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaTesterInvitationsCreateInstance(ctx context.Context, body BetaTesterInvitationsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaTesterInvitationsCreateInstanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaTestersGetCollection(ctx context.Context, params *BetaTestersGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaTestersGetCollectionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaTestersCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaTestersCreateInstanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaTestersCreateInstance(ctx context.Context, body BetaTestersCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaTestersCreateInstanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaTestersDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaTestersDeleteInstanceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaTestersGetInstance(ctx context.Context, id string, params *BetaTestersGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaTestersGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaTestersAppsGetToManyRelated(ctx context.Context, id string, params *BetaTestersAppsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaTestersAppsGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaTestersBetaGroupsGetToManyRelated(ctx context.Context, id string, params *BetaTestersBetaGroupsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaTestersBetaGroupsGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaTestersBuildsGetToManyRelated(ctx context.Context, id string, params *BetaTestersBuildsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaTestersBuildsGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaTestersAppsDeleteToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaTestersAppsDeleteToManyRelationshipRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaTestersAppsDeleteToManyRelationship(ctx context.Context, id string, body BetaTestersAppsDeleteToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaTestersAppsDeleteToManyRelationshipRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaTestersAppsGetToManyRelationship(ctx context.Context, id string, params *BetaTestersAppsGetToManyRelationshipParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaTestersAppsGetToManyRelationshipRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaTestersBetaGroupsDeleteToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaTestersBetaGroupsDeleteToManyRelationshipRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaTestersBetaGroupsDeleteToManyRelationship(ctx context.Context, id string, body BetaTestersBetaGroupsDeleteToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaTestersBetaGroupsDeleteToManyRelationshipRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaTestersBetaGroupsGetToManyRelationship(ctx context.Context, id string, params *BetaTestersBetaGroupsGetToManyRelationshipParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaTestersBetaGroupsGetToManyRelationshipRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaTestersBetaGroupsCreateToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaTestersBetaGroupsCreateToManyRelationshipRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaTestersBetaGroupsCreateToManyRelationship(ctx context.Context, id string, body BetaTestersBetaGroupsCreateToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaTestersBetaGroupsCreateToManyRelationshipRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaTestersBuildsDeleteToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaTestersBuildsDeleteToManyRelationshipRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaTestersBuildsDeleteToManyRelationship(ctx context.Context, id string, body BetaTestersBuildsDeleteToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaTestersBuildsDeleteToManyRelationshipRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaTestersBuildsGetToManyRelationship(ctx context.Context, id string, params *BetaTestersBuildsGetToManyRelationshipParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaTestersBuildsGetToManyRelationshipRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaTestersBuildsCreateToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaTestersBuildsCreateToManyRelationshipRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BetaTestersBuildsCreateToManyRelationship(ctx context.Context, id string, body BetaTestersBuildsCreateToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBetaTestersBuildsCreateToManyRelationshipRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BuildBetaDetailsGetCollection(ctx context.Context, params *BuildBetaDetailsGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBuildBetaDetailsGetCollectionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BuildBetaDetailsGetInstance(ctx context.Context, id string, params *BuildBetaDetailsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBuildBetaDetailsGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BuildBetaDetailsUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBuildBetaDetailsUpdateInstanceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BuildBetaDetailsUpdateInstance(ctx context.Context, id string, body BuildBetaDetailsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBuildBetaDetailsUpdateInstanceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BuildBetaDetailsBuildGetToOneRelated(ctx context.Context, id string, params *BuildBetaDetailsBuildGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBuildBetaDetailsBuildGetToOneRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BuildBetaNotificationsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBuildBetaNotificationsCreateInstanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BuildBetaNotificationsCreateInstance(ctx context.Context, body BuildBetaNotificationsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBuildBetaNotificationsCreateInstanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BuildsGetCollection(ctx context.Context, params *BuildsGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBuildsGetCollectionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BuildsGetInstance(ctx context.Context, id string, params *BuildsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBuildsGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BuildsUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBuildsUpdateInstanceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BuildsUpdateInstance(ctx context.Context, id string, body BuildsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBuildsUpdateInstanceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BuildsAppGetToOneRelated(ctx context.Context, id string, params *BuildsAppGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBuildsAppGetToOneRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BuildsAppEncryptionDeclarationGetToOneRelated(ctx context.Context, id string, params *BuildsAppEncryptionDeclarationGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBuildsAppEncryptionDeclarationGetToOneRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BuildsAppStoreVersionGetToOneRelated(ctx context.Context, id string, params *BuildsAppStoreVersionGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBuildsAppStoreVersionGetToOneRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BuildsBetaAppReviewSubmissionGetToOneRelated(ctx context.Context, id string, params *BuildsBetaAppReviewSubmissionGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBuildsBetaAppReviewSubmissionGetToOneRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BuildsBetaBuildLocalizationsGetToManyRelated(ctx context.Context, id string, params *BuildsBetaBuildLocalizationsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBuildsBetaBuildLocalizationsGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BuildsBuildBetaDetailGetToOneRelated(ctx context.Context, id string, params *BuildsBuildBetaDetailGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBuildsBuildBetaDetailGetToOneRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BuildsDiagnosticSignaturesGetToManyRelated(ctx context.Context, id string, params *BuildsDiagnosticSignaturesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBuildsDiagnosticSignaturesGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BuildsIconsGetToManyRelated(ctx context.Context, id string, params *BuildsIconsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBuildsIconsGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BuildsIndividualTestersGetToManyRelated(ctx context.Context, id string, params *BuildsIndividualTestersGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBuildsIndividualTestersGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BuildsPerfPowerMetricsGetToManyRelated(ctx context.Context, id string, params *BuildsPerfPowerMetricsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBuildsPerfPowerMetricsGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BuildsPreReleaseVersionGetToOneRelated(ctx context.Context, id string, params *BuildsPreReleaseVersionGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBuildsPreReleaseVersionGetToOneRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BuildsAppEncryptionDeclarationGetToOneRelationship(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBuildsAppEncryptionDeclarationGetToOneRelationshipRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BuildsAppEncryptionDeclarationUpdateToOneRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBuildsAppEncryptionDeclarationUpdateToOneRelationshipRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BuildsAppEncryptionDeclarationUpdateToOneRelationship(ctx context.Context, id string, body BuildsAppEncryptionDeclarationUpdateToOneRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBuildsAppEncryptionDeclarationUpdateToOneRelationshipRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BuildsBetaGroupsDeleteToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBuildsBetaGroupsDeleteToManyRelationshipRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BuildsBetaGroupsDeleteToManyRelationship(ctx context.Context, id string, body BuildsBetaGroupsDeleteToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBuildsBetaGroupsDeleteToManyRelationshipRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BuildsBetaGroupsCreateToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBuildsBetaGroupsCreateToManyRelationshipRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BuildsBetaGroupsCreateToManyRelationship(ctx context.Context, id string, body BuildsBetaGroupsCreateToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBuildsBetaGroupsCreateToManyRelationshipRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BuildsIndividualTestersDeleteToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBuildsIndividualTestersDeleteToManyRelationshipRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BuildsIndividualTestersDeleteToManyRelationship(ctx context.Context, id string, body BuildsIndividualTestersDeleteToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBuildsIndividualTestersDeleteToManyRelationshipRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BuildsIndividualTestersGetToManyRelationship(ctx context.Context, id string, params *BuildsIndividualTestersGetToManyRelationshipParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBuildsIndividualTestersGetToManyRelationshipRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BuildsIndividualTestersCreateToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBuildsIndividualTestersCreateToManyRelationshipRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BuildsIndividualTestersCreateToManyRelationship(ctx context.Context, id string, body BuildsIndividualTestersCreateToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBuildsIndividualTestersCreateToManyRelationshipRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleIdCapabilitiesCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleIdCapabilitiesCreateInstanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleIdCapabilitiesCreateInstance(ctx context.Context, body BundleIdCapabilitiesCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleIdCapabilitiesCreateInstanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleIdCapabilitiesDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleIdCapabilitiesDeleteInstanceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleIdCapabilitiesUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleIdCapabilitiesUpdateInstanceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleIdCapabilitiesUpdateInstance(ctx context.Context, id string, body BundleIdCapabilitiesUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleIdCapabilitiesUpdateInstanceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleIdsGetCollection(ctx context.Context, params *BundleIdsGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleIdsGetCollectionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleIdsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleIdsCreateInstanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleIdsCreateInstance(ctx context.Context, body BundleIdsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleIdsCreateInstanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleIdsDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleIdsDeleteInstanceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleIdsGetInstance(ctx context.Context, id string, params *BundleIdsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleIdsGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleIdsUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleIdsUpdateInstanceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleIdsUpdateInstance(ctx context.Context, id string, body BundleIdsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleIdsUpdateInstanceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleIdsAppGetToOneRelated(ctx context.Context, id string, params *BundleIdsAppGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleIdsAppGetToOneRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleIdsBundleIdCapabilitiesGetToManyRelated(ctx context.Context, id string, params *BundleIdsBundleIdCapabilitiesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleIdsBundleIdCapabilitiesGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundleIdsProfilesGetToManyRelated(ctx context.Context, id string, params *BundleIdsProfilesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundleIdsProfilesGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CertificatesGetCollection(ctx context.Context, params *CertificatesGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCertificatesGetCollectionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CertificatesCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCertificatesCreateInstanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CertificatesCreateInstance(ctx context.Context, body CertificatesCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCertificatesCreateInstanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CertificatesDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCertificatesDeleteInstanceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CertificatesGetInstance(ctx context.Context, id string, params *CertificatesGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCertificatesGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CiArtifactsGetInstance(ctx context.Context, id string, params *CiArtifactsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCiArtifactsGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CiBuildActionsGetInstance(ctx context.Context, id string, params *CiBuildActionsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCiBuildActionsGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CiBuildActionsArtifactsGetToManyRelated(ctx context.Context, id string, params *CiBuildActionsArtifactsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCiBuildActionsArtifactsGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CiBuildActionsBuildRunGetToOneRelated(ctx context.Context, id string, params *CiBuildActionsBuildRunGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCiBuildActionsBuildRunGetToOneRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CiBuildActionsIssuesGetToManyRelated(ctx context.Context, id string, params *CiBuildActionsIssuesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCiBuildActionsIssuesGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CiBuildActionsTestResultsGetToManyRelated(ctx context.Context, id string, params *CiBuildActionsTestResultsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCiBuildActionsTestResultsGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CiBuildRunsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCiBuildRunsCreateInstanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CiBuildRunsCreateInstance(ctx context.Context, body CiBuildRunsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCiBuildRunsCreateInstanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CiBuildRunsGetInstance(ctx context.Context, id string, params *CiBuildRunsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCiBuildRunsGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CiBuildRunsActionsGetToManyRelated(ctx context.Context, id string, params *CiBuildRunsActionsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCiBuildRunsActionsGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CiBuildRunsBuildsGetToManyRelated(ctx context.Context, id string, params *CiBuildRunsBuildsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCiBuildRunsBuildsGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CiIssuesGetInstance(ctx context.Context, id string, params *CiIssuesGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCiIssuesGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CiMacOsVersionsGetCollection(ctx context.Context, params *CiMacOsVersionsGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCiMacOsVersionsGetCollectionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CiMacOsVersionsGetInstance(ctx context.Context, id string, params *CiMacOsVersionsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCiMacOsVersionsGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CiMacOsVersionsXcodeVersionsGetToManyRelated(ctx context.Context, id string, params *CiMacOsVersionsXcodeVersionsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCiMacOsVersionsXcodeVersionsGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CiProductsGetCollection(ctx context.Context, params *CiProductsGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCiProductsGetCollectionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CiProductsDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCiProductsDeleteInstanceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CiProductsGetInstance(ctx context.Context, id string, params *CiProductsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCiProductsGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CiProductsAdditionalRepositoriesGetToManyRelated(ctx context.Context, id string, params *CiProductsAdditionalRepositoriesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCiProductsAdditionalRepositoriesGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CiProductsAppGetToOneRelated(ctx context.Context, id string, params *CiProductsAppGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCiProductsAppGetToOneRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CiProductsBuildRunsGetToManyRelated(ctx context.Context, id string, params *CiProductsBuildRunsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCiProductsBuildRunsGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CiProductsPrimaryRepositoriesGetToManyRelated(ctx context.Context, id string, params *CiProductsPrimaryRepositoriesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCiProductsPrimaryRepositoriesGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CiProductsWorkflowsGetToManyRelated(ctx context.Context, id string, params *CiProductsWorkflowsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCiProductsWorkflowsGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CiTestResultsGetInstance(ctx context.Context, id string, params *CiTestResultsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCiTestResultsGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CiWorkflowsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCiWorkflowsCreateInstanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CiWorkflowsCreateInstance(ctx context.Context, body CiWorkflowsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCiWorkflowsCreateInstanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CiWorkflowsDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCiWorkflowsDeleteInstanceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CiWorkflowsGetInstance(ctx context.Context, id string, params *CiWorkflowsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCiWorkflowsGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CiWorkflowsUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCiWorkflowsUpdateInstanceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CiWorkflowsUpdateInstance(ctx context.Context, id string, body CiWorkflowsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCiWorkflowsUpdateInstanceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CiWorkflowsBuildRunsGetToManyRelated(ctx context.Context, id string, params *CiWorkflowsBuildRunsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCiWorkflowsBuildRunsGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CiWorkflowsRepositoryGetToOneRelated(ctx context.Context, id string, params *CiWorkflowsRepositoryGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCiWorkflowsRepositoryGetToOneRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CiXcodeVersionsGetCollection(ctx context.Context, params *CiXcodeVersionsGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCiXcodeVersionsGetCollectionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CiXcodeVersionsGetInstance(ctx context.Context, id string, params *CiXcodeVersionsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCiXcodeVersionsGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CiXcodeVersionsMacOsVersionsGetToManyRelated(ctx context.Context, id string, params *CiXcodeVersionsMacOsVersionsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCiXcodeVersionsMacOsVersionsGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevicesGetCollection(ctx context.Context, params *DevicesGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevicesGetCollectionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevicesCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevicesCreateInstanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevicesCreateInstance(ctx context.Context, body DevicesCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevicesCreateInstanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevicesGetInstance(ctx context.Context, id string, params *DevicesGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevicesGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevicesUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevicesUpdateInstanceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DevicesUpdateInstance(ctx context.Context, id string, body DevicesUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDevicesUpdateInstanceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DiagnosticSignaturesLogsGetToManyRelated(ctx context.Context, id string, params *DiagnosticSignaturesLogsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDiagnosticSignaturesLogsGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndUserLicenseAgreementsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndUserLicenseAgreementsCreateInstanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndUserLicenseAgreementsCreateInstance(ctx context.Context, body EndUserLicenseAgreementsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndUserLicenseAgreementsCreateInstanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndUserLicenseAgreementsDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndUserLicenseAgreementsDeleteInstanceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndUserLicenseAgreementsGetInstance(ctx context.Context, id string, params *EndUserLicenseAgreementsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndUserLicenseAgreementsGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndUserLicenseAgreementsUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndUserLicenseAgreementsUpdateInstanceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndUserLicenseAgreementsUpdateInstance(ctx context.Context, id string, body EndUserLicenseAgreementsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndUserLicenseAgreementsUpdateInstanceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndUserLicenseAgreementsTerritoriesGetToManyRelated(ctx context.Context, id string, params *EndUserLicenseAgreementsTerritoriesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndUserLicenseAgreementsTerritoriesGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FinanceReportsGetCollection(ctx context.Context, params *FinanceReportsGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFinanceReportsGetCollectionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GameCenterEnabledVersionsCompatibleVersionsGetToManyRelated(ctx context.Context, id string, params *GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationship(ctx context.Context, id string, body GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationship(ctx context.Context, id string, params *GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationship(ctx context.Context, id string, body GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationship(ctx context.Context, id string, body GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IdfaDeclarationsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIdfaDeclarationsCreateInstanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IdfaDeclarationsCreateInstance(ctx context.Context, body IdfaDeclarationsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIdfaDeclarationsCreateInstanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IdfaDeclarationsDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIdfaDeclarationsDeleteInstanceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IdfaDeclarationsUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIdfaDeclarationsUpdateInstanceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IdfaDeclarationsUpdateInstance(ctx context.Context, id string, body IdfaDeclarationsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIdfaDeclarationsUpdateInstanceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InAppPurchasesGetInstance(ctx context.Context, id string, params *InAppPurchasesGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInAppPurchasesGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PreReleaseVersionsGetCollection(ctx context.Context, params *PreReleaseVersionsGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPreReleaseVersionsGetCollectionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PreReleaseVersionsGetInstance(ctx context.Context, id string, params *PreReleaseVersionsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPreReleaseVersionsGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PreReleaseVersionsAppGetToOneRelated(ctx context.Context, id string, params *PreReleaseVersionsAppGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPreReleaseVersionsAppGetToOneRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PreReleaseVersionsBuildsGetToManyRelated(ctx context.Context, id string, params *PreReleaseVersionsBuildsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPreReleaseVersionsBuildsGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProfilesGetCollection(ctx context.Context, params *ProfilesGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProfilesGetCollectionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProfilesCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProfilesCreateInstanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProfilesCreateInstance(ctx context.Context, body ProfilesCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProfilesCreateInstanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProfilesDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProfilesDeleteInstanceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProfilesGetInstance(ctx context.Context, id string, params *ProfilesGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProfilesGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProfilesBundleIdGetToOneRelated(ctx context.Context, id string, params *ProfilesBundleIdGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProfilesBundleIdGetToOneRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProfilesCertificatesGetToManyRelated(ctx context.Context, id string, params *ProfilesCertificatesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProfilesCertificatesGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProfilesDevicesGetToManyRelated(ctx context.Context, id string, params *ProfilesDevicesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProfilesDevicesGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RoutingAppCoveragesCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRoutingAppCoveragesCreateInstanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RoutingAppCoveragesCreateInstance(ctx context.Context, body RoutingAppCoveragesCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRoutingAppCoveragesCreateInstanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RoutingAppCoveragesDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRoutingAppCoveragesDeleteInstanceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RoutingAppCoveragesGetInstance(ctx context.Context, id string, params *RoutingAppCoveragesGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRoutingAppCoveragesGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RoutingAppCoveragesUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRoutingAppCoveragesUpdateInstanceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RoutingAppCoveragesUpdateInstance(ctx context.Context, id string, body RoutingAppCoveragesUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRoutingAppCoveragesUpdateInstanceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SalesReportsGetCollection(ctx context.Context, params *SalesReportsGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSalesReportsGetCollectionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScmGitReferencesGetInstance(ctx context.Context, id string, params *ScmGitReferencesGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScmGitReferencesGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScmProvidersGetCollection(ctx context.Context, params *ScmProvidersGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScmProvidersGetCollectionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScmProvidersGetInstance(ctx context.Context, id string, params *ScmProvidersGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScmProvidersGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScmProvidersRepositoriesGetToManyRelated(ctx context.Context, id string, params *ScmProvidersRepositoriesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScmProvidersRepositoriesGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScmPullRequestsGetInstance(ctx context.Context, id string, params *ScmPullRequestsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScmPullRequestsGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScmRepositoriesGetCollection(ctx context.Context, params *ScmRepositoriesGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScmRepositoriesGetCollectionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScmRepositoriesGetInstance(ctx context.Context, id string, params *ScmRepositoriesGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScmRepositoriesGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScmRepositoriesGitReferencesGetToManyRelated(ctx context.Context, id string, params *ScmRepositoriesGitReferencesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScmRepositoriesGitReferencesGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScmRepositoriesPullRequestsGetToManyRelated(ctx context.Context, id string, params *ScmRepositoriesPullRequestsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScmRepositoriesPullRequestsGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TerritoriesGetCollection(ctx context.Context, params *TerritoriesGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTerritoriesGetCollectionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserInvitationsGetCollection(ctx context.Context, params *UserInvitationsGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserInvitationsGetCollectionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserInvitationsCreateInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserInvitationsCreateInstanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserInvitationsCreateInstance(ctx context.Context, body UserInvitationsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserInvitationsCreateInstanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserInvitationsDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserInvitationsDeleteInstanceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserInvitationsGetInstance(ctx context.Context, id string, params *UserInvitationsGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserInvitationsGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserInvitationsVisibleAppsGetToManyRelated(ctx context.Context, id string, params *UserInvitationsVisibleAppsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserInvitationsVisibleAppsGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersGetCollection(ctx context.Context, params *UsersGetCollectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersGetCollectionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersDeleteInstance(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersDeleteInstanceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersGetInstance(ctx context.Context, id string, params *UsersGetInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersGetInstanceRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUpdateInstanceWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUpdateInstanceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUpdateInstance(ctx context.Context, id string, body UsersUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUpdateInstanceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersVisibleAppsDeleteToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersVisibleAppsDeleteToManyRelationshipRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersVisibleAppsDeleteToManyRelationship(ctx context.Context, id string, body UsersVisibleAppsDeleteToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersVisibleAppsDeleteToManyRelationshipRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersVisibleAppsGetToManyRelationship(ctx context.Context, id string, params *UsersVisibleAppsGetToManyRelationshipParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersVisibleAppsGetToManyRelationshipRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersVisibleAppsReplaceToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersVisibleAppsReplaceToManyRelationshipRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersVisibleAppsReplaceToManyRelationship(ctx context.Context, id string, body UsersVisibleAppsReplaceToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersVisibleAppsReplaceToManyRelationshipRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersVisibleAppsCreateToManyRelationshipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersVisibleAppsCreateToManyRelationshipRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersVisibleAppsCreateToManyRelationship(ctx context.Context, id string, body UsersVisibleAppsCreateToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersVisibleAppsCreateToManyRelationshipRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersVisibleAppsGetToManyRelated(ctx context.Context, id string, params *UsersVisibleAppsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersVisibleAppsGetToManyRelatedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAgeRatingDeclarationsUpdateInstanceRequest calls the generic AgeRatingDeclarationsUpdateInstance builder with application/json body
func NewAgeRatingDeclarationsUpdateInstanceRequest(server string, id string, body AgeRatingDeclarationsUpdateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAgeRatingDeclarationsUpdateInstanceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAgeRatingDeclarationsUpdateInstanceRequestWithBody generates requests for AgeRatingDeclarationsUpdateInstance with any type of body
func NewAgeRatingDeclarationsUpdateInstanceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ageRatingDeclarations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAppCategoriesGetCollectionRequest generates requests for AppCategoriesGetCollection
func NewAppCategoriesGetCollectionRequest(server string, params *AppCategoriesGetCollectionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appCategories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FilterPlatforms != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[platforms]", runtime.ParamLocationQuery, *params.FilterPlatforms); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExistsParent != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "exists[parent]", runtime.ParamLocationQuery, *params.ExistsParent); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAppCategories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appCategories]", runtime.ParamLocationQuery, *params.FieldsAppCategories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitSubcategories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[subcategories]", runtime.ParamLocationQuery, *params.LimitSubcategories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppCategoriesGetInstanceRequest generates requests for AppCategoriesGetInstance
func NewAppCategoriesGetInstanceRequest(server string, id string, params *AppCategoriesGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appCategories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsAppCategories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appCategories]", runtime.ParamLocationQuery, *params.FieldsAppCategories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitSubcategories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[subcategories]", runtime.ParamLocationQuery, *params.LimitSubcategories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppCategoriesParentGetToOneRelatedRequest generates requests for AppCategoriesParentGetToOneRelated
func NewAppCategoriesParentGetToOneRelatedRequest(server string, id string, params *AppCategoriesParentGetToOneRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appCategories/%s/parent", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsAppCategories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appCategories]", runtime.ParamLocationQuery, *params.FieldsAppCategories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppCategoriesSubcategoriesGetToManyRelatedRequest generates requests for AppCategoriesSubcategoriesGetToManyRelated
func NewAppCategoriesSubcategoriesGetToManyRelatedRequest(server string, id string, params *AppCategoriesSubcategoriesGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appCategories/%s/subcategories", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsAppCategories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appCategories]", runtime.ParamLocationQuery, *params.FieldsAppCategories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppEncryptionDeclarationsGetCollectionRequest generates requests for AppEncryptionDeclarationsGetCollection
func NewAppEncryptionDeclarationsGetCollectionRequest(server string, params *AppEncryptionDeclarationsGetCollectionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appEncryptionDeclarations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FilterPlatform != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[platform]", runtime.ParamLocationQuery, *params.FilterPlatform); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterApp != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[app]", runtime.ParamLocationQuery, *params.FilterApp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[builds]", runtime.ParamLocationQuery, *params.FilterBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAppEncryptionDeclarations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appEncryptionDeclarations]", runtime.ParamLocationQuery, *params.FieldsAppEncryptionDeclarations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[apps]", runtime.ParamLocationQuery, *params.FieldsApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppEncryptionDeclarationsGetInstanceRequest generates requests for AppEncryptionDeclarationsGetInstance
func NewAppEncryptionDeclarationsGetInstanceRequest(server string, id string, params *AppEncryptionDeclarationsGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appEncryptionDeclarations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsAppEncryptionDeclarations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appEncryptionDeclarations]", runtime.ParamLocationQuery, *params.FieldsAppEncryptionDeclarations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[apps]", runtime.ParamLocationQuery, *params.FieldsApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppEncryptionDeclarationsAppGetToOneRelatedRequest generates requests for AppEncryptionDeclarationsAppGetToOneRelated
func NewAppEncryptionDeclarationsAppGetToOneRelatedRequest(server string, id string, params *AppEncryptionDeclarationsAppGetToOneRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appEncryptionDeclarations/%s/app", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[apps]", runtime.ParamLocationQuery, *params.FieldsApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppEncryptionDeclarationsBuildsCreateToManyRelationshipRequest calls the generic AppEncryptionDeclarationsBuildsCreateToManyRelationship builder with application/json body
func NewAppEncryptionDeclarationsBuildsCreateToManyRelationshipRequest(server string, id string, body AppEncryptionDeclarationsBuildsCreateToManyRelationshipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAppEncryptionDeclarationsBuildsCreateToManyRelationshipRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAppEncryptionDeclarationsBuildsCreateToManyRelationshipRequestWithBody generates requests for AppEncryptionDeclarationsBuildsCreateToManyRelationship with any type of body
func NewAppEncryptionDeclarationsBuildsCreateToManyRelationshipRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appEncryptionDeclarations/%s/relationships/builds", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAppInfoLocalizationsCreateInstanceRequest calls the generic AppInfoLocalizationsCreateInstance builder with application/json body
func NewAppInfoLocalizationsCreateInstanceRequest(server string, body AppInfoLocalizationsCreateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAppInfoLocalizationsCreateInstanceRequestWithBody(server, "application/json", bodyReader)
}

// NewAppInfoLocalizationsCreateInstanceRequestWithBody generates requests for AppInfoLocalizationsCreateInstance with any type of body
func NewAppInfoLocalizationsCreateInstanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appInfoLocalizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAppInfoLocalizationsDeleteInstanceRequest generates requests for AppInfoLocalizationsDeleteInstance
func NewAppInfoLocalizationsDeleteInstanceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appInfoLocalizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppInfoLocalizationsGetInstanceRequest generates requests for AppInfoLocalizationsGetInstance
func NewAppInfoLocalizationsGetInstanceRequest(server string, id string, params *AppInfoLocalizationsGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appInfoLocalizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsAppInfoLocalizations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appInfoLocalizations]", runtime.ParamLocationQuery, *params.FieldsAppInfoLocalizations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppInfoLocalizationsUpdateInstanceRequest calls the generic AppInfoLocalizationsUpdateInstance builder with application/json body
func NewAppInfoLocalizationsUpdateInstanceRequest(server string, id string, body AppInfoLocalizationsUpdateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAppInfoLocalizationsUpdateInstanceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAppInfoLocalizationsUpdateInstanceRequestWithBody generates requests for AppInfoLocalizationsUpdateInstance with any type of body
func NewAppInfoLocalizationsUpdateInstanceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appInfoLocalizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAppInfosGetInstanceRequest generates requests for AppInfosGetInstance
func NewAppInfosGetInstanceRequest(server string, id string, params *AppInfosGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appInfos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsAppInfos != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appInfos]", runtime.ParamLocationQuery, *params.FieldsAppInfos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAgeRatingDeclarations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ageRatingDeclarations]", runtime.ParamLocationQuery, *params.FieldsAgeRatingDeclarations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAppInfoLocalizations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appInfoLocalizations]", runtime.ParamLocationQuery, *params.FieldsAppInfoLocalizations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAppCategories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appCategories]", runtime.ParamLocationQuery, *params.FieldsAppCategories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitAppInfoLocalizations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[appInfoLocalizations]", runtime.ParamLocationQuery, *params.LimitAppInfoLocalizations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppInfosUpdateInstanceRequest calls the generic AppInfosUpdateInstance builder with application/json body
func NewAppInfosUpdateInstanceRequest(server string, id string, body AppInfosUpdateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAppInfosUpdateInstanceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAppInfosUpdateInstanceRequestWithBody generates requests for AppInfosUpdateInstance with any type of body
func NewAppInfosUpdateInstanceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appInfos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAppInfosAgeRatingDeclarationGetToOneRelatedRequest generates requests for AppInfosAgeRatingDeclarationGetToOneRelated
func NewAppInfosAgeRatingDeclarationGetToOneRelatedRequest(server string, id string, params *AppInfosAgeRatingDeclarationGetToOneRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appInfos/%s/ageRatingDeclaration", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsAgeRatingDeclarations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ageRatingDeclarations]", runtime.ParamLocationQuery, *params.FieldsAgeRatingDeclarations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppInfosAppInfoLocalizationsGetToManyRelatedRequest generates requests for AppInfosAppInfoLocalizationsGetToManyRelated
func NewAppInfosAppInfoLocalizationsGetToManyRelatedRequest(server string, id string, params *AppInfosAppInfoLocalizationsGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appInfos/%s/appInfoLocalizations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FilterLocale != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[locale]", runtime.ParamLocationQuery, *params.FilterLocale); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAppInfoLocalizations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appInfoLocalizations]", runtime.ParamLocationQuery, *params.FieldsAppInfoLocalizations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppInfosPrimaryCategoryGetToOneRelatedRequest generates requests for AppInfosPrimaryCategoryGetToOneRelated
func NewAppInfosPrimaryCategoryGetToOneRelatedRequest(server string, id string, params *AppInfosPrimaryCategoryGetToOneRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appInfos/%s/primaryCategory", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsAppCategories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appCategories]", runtime.ParamLocationQuery, *params.FieldsAppCategories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppInfosPrimarySubcategoryOneGetToOneRelatedRequest generates requests for AppInfosPrimarySubcategoryOneGetToOneRelated
func NewAppInfosPrimarySubcategoryOneGetToOneRelatedRequest(server string, id string, params *AppInfosPrimarySubcategoryOneGetToOneRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appInfos/%s/primarySubcategoryOne", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsAppCategories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appCategories]", runtime.ParamLocationQuery, *params.FieldsAppCategories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppInfosPrimarySubcategoryTwoGetToOneRelatedRequest generates requests for AppInfosPrimarySubcategoryTwoGetToOneRelated
func NewAppInfosPrimarySubcategoryTwoGetToOneRelatedRequest(server string, id string, params *AppInfosPrimarySubcategoryTwoGetToOneRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appInfos/%s/primarySubcategoryTwo", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsAppCategories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appCategories]", runtime.ParamLocationQuery, *params.FieldsAppCategories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppInfosSecondaryCategoryGetToOneRelatedRequest generates requests for AppInfosSecondaryCategoryGetToOneRelated
func NewAppInfosSecondaryCategoryGetToOneRelatedRequest(server string, id string, params *AppInfosSecondaryCategoryGetToOneRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appInfos/%s/secondaryCategory", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsAppCategories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appCategories]", runtime.ParamLocationQuery, *params.FieldsAppCategories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppInfosSecondarySubcategoryOneGetToOneRelatedRequest generates requests for AppInfosSecondarySubcategoryOneGetToOneRelated
func NewAppInfosSecondarySubcategoryOneGetToOneRelatedRequest(server string, id string, params *AppInfosSecondarySubcategoryOneGetToOneRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appInfos/%s/secondarySubcategoryOne", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsAppCategories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appCategories]", runtime.ParamLocationQuery, *params.FieldsAppCategories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppInfosSecondarySubcategoryTwoGetToOneRelatedRequest generates requests for AppInfosSecondarySubcategoryTwoGetToOneRelated
func NewAppInfosSecondarySubcategoryTwoGetToOneRelatedRequest(server string, id string, params *AppInfosSecondarySubcategoryTwoGetToOneRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appInfos/%s/secondarySubcategoryTwo", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsAppCategories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appCategories]", runtime.ParamLocationQuery, *params.FieldsAppCategories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppPreOrdersCreateInstanceRequest calls the generic AppPreOrdersCreateInstance builder with application/json body
func NewAppPreOrdersCreateInstanceRequest(server string, body AppPreOrdersCreateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAppPreOrdersCreateInstanceRequestWithBody(server, "application/json", bodyReader)
}

// NewAppPreOrdersCreateInstanceRequestWithBody generates requests for AppPreOrdersCreateInstance with any type of body
func NewAppPreOrdersCreateInstanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appPreOrders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAppPreOrdersDeleteInstanceRequest generates requests for AppPreOrdersDeleteInstance
func NewAppPreOrdersDeleteInstanceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appPreOrders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppPreOrdersGetInstanceRequest generates requests for AppPreOrdersGetInstance
func NewAppPreOrdersGetInstanceRequest(server string, id string, params *AppPreOrdersGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appPreOrders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsAppPreOrders != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appPreOrders]", runtime.ParamLocationQuery, *params.FieldsAppPreOrders); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppPreOrdersUpdateInstanceRequest calls the generic AppPreOrdersUpdateInstance builder with application/json body
func NewAppPreOrdersUpdateInstanceRequest(server string, id string, body AppPreOrdersUpdateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAppPreOrdersUpdateInstanceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAppPreOrdersUpdateInstanceRequestWithBody generates requests for AppPreOrdersUpdateInstance with any type of body
func NewAppPreOrdersUpdateInstanceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appPreOrders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAppPreviewSetsCreateInstanceRequest calls the generic AppPreviewSetsCreateInstance builder with application/json body
func NewAppPreviewSetsCreateInstanceRequest(server string, body AppPreviewSetsCreateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAppPreviewSetsCreateInstanceRequestWithBody(server, "application/json", bodyReader)
}

// NewAppPreviewSetsCreateInstanceRequestWithBody generates requests for AppPreviewSetsCreateInstance with any type of body
func NewAppPreviewSetsCreateInstanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appPreviewSets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAppPreviewSetsDeleteInstanceRequest generates requests for AppPreviewSetsDeleteInstance
func NewAppPreviewSetsDeleteInstanceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appPreviewSets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppPreviewSetsGetInstanceRequest generates requests for AppPreviewSetsGetInstance
func NewAppPreviewSetsGetInstanceRequest(server string, id string, params *AppPreviewSetsGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appPreviewSets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsAppPreviewSets != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appPreviewSets]", runtime.ParamLocationQuery, *params.FieldsAppPreviewSets); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAppPreviews != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appPreviews]", runtime.ParamLocationQuery, *params.FieldsAppPreviews); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitAppPreviews != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[appPreviews]", runtime.ParamLocationQuery, *params.LimitAppPreviews); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppPreviewSetsAppPreviewsGetToManyRelatedRequest generates requests for AppPreviewSetsAppPreviewsGetToManyRelated
func NewAppPreviewSetsAppPreviewsGetToManyRelatedRequest(server string, id string, params *AppPreviewSetsAppPreviewsGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appPreviewSets/%s/appPreviews", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsAppPreviews != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appPreviews]", runtime.ParamLocationQuery, *params.FieldsAppPreviews); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppPreviewSetsAppPreviewsGetToManyRelationshipRequest generates requests for AppPreviewSetsAppPreviewsGetToManyRelationship
func NewAppPreviewSetsAppPreviewsGetToManyRelationshipRequest(server string, id string, params *AppPreviewSetsAppPreviewsGetToManyRelationshipParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appPreviewSets/%s/relationships/appPreviews", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppPreviewSetsAppPreviewsReplaceToManyRelationshipRequest calls the generic AppPreviewSetsAppPreviewsReplaceToManyRelationship builder with application/json body
func NewAppPreviewSetsAppPreviewsReplaceToManyRelationshipRequest(server string, id string, body AppPreviewSetsAppPreviewsReplaceToManyRelationshipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAppPreviewSetsAppPreviewsReplaceToManyRelationshipRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAppPreviewSetsAppPreviewsReplaceToManyRelationshipRequestWithBody generates requests for AppPreviewSetsAppPreviewsReplaceToManyRelationship with any type of body
func NewAppPreviewSetsAppPreviewsReplaceToManyRelationshipRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appPreviewSets/%s/relationships/appPreviews", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAppPreviewsCreateInstanceRequest calls the generic AppPreviewsCreateInstance builder with application/json body
func NewAppPreviewsCreateInstanceRequest(server string, body AppPreviewsCreateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAppPreviewsCreateInstanceRequestWithBody(server, "application/json", bodyReader)
}

// NewAppPreviewsCreateInstanceRequestWithBody generates requests for AppPreviewsCreateInstance with any type of body
func NewAppPreviewsCreateInstanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appPreviews")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAppPreviewsDeleteInstanceRequest generates requests for AppPreviewsDeleteInstance
func NewAppPreviewsDeleteInstanceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appPreviews/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppPreviewsGetInstanceRequest generates requests for AppPreviewsGetInstance
func NewAppPreviewsGetInstanceRequest(server string, id string, params *AppPreviewsGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appPreviews/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsAppPreviews != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appPreviews]", runtime.ParamLocationQuery, *params.FieldsAppPreviews); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppPreviewsUpdateInstanceRequest calls the generic AppPreviewsUpdateInstance builder with application/json body
func NewAppPreviewsUpdateInstanceRequest(server string, id string, body AppPreviewsUpdateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAppPreviewsUpdateInstanceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAppPreviewsUpdateInstanceRequestWithBody generates requests for AppPreviewsUpdateInstance with any type of body
func NewAppPreviewsUpdateInstanceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appPreviews/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAppPricePointsGetCollectionRequest generates requests for AppPricePointsGetCollection
func NewAppPricePointsGetCollectionRequest(server string, params *AppPricePointsGetCollectionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appPricePoints")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FilterPriceTier != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[priceTier]", runtime.ParamLocationQuery, *params.FilterPriceTier); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterTerritory != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[territory]", runtime.ParamLocationQuery, *params.FilterTerritory); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAppPricePoints != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appPricePoints]", runtime.ParamLocationQuery, *params.FieldsAppPricePoints); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsTerritories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[territories]", runtime.ParamLocationQuery, *params.FieldsTerritories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppPricePointsGetInstanceRequest generates requests for AppPricePointsGetInstance
func NewAppPricePointsGetInstanceRequest(server string, id string, params *AppPricePointsGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appPricePoints/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsAppPricePoints != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appPricePoints]", runtime.ParamLocationQuery, *params.FieldsAppPricePoints); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsTerritories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[territories]", runtime.ParamLocationQuery, *params.FieldsTerritories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppPricePointsTerritoryGetToOneRelatedRequest generates requests for AppPricePointsTerritoryGetToOneRelated
func NewAppPricePointsTerritoryGetToOneRelatedRequest(server string, id string, params *AppPricePointsTerritoryGetToOneRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appPricePoints/%s/territory", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsTerritories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[territories]", runtime.ParamLocationQuery, *params.FieldsTerritories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppPriceTiersGetCollectionRequest generates requests for AppPriceTiersGetCollection
func NewAppPriceTiersGetCollectionRequest(server string, params *AppPriceTiersGetCollectionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appPriceTiers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FilterId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[id]", runtime.ParamLocationQuery, *params.FilterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAppPriceTiers != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appPriceTiers]", runtime.ParamLocationQuery, *params.FieldsAppPriceTiers); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAppPricePoints != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appPricePoints]", runtime.ParamLocationQuery, *params.FieldsAppPricePoints); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitPricePoints != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[pricePoints]", runtime.ParamLocationQuery, *params.LimitPricePoints); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppPriceTiersGetInstanceRequest generates requests for AppPriceTiersGetInstance
func NewAppPriceTiersGetInstanceRequest(server string, id string, params *AppPriceTiersGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appPriceTiers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsAppPriceTiers != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appPriceTiers]", runtime.ParamLocationQuery, *params.FieldsAppPriceTiers); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAppPricePoints != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appPricePoints]", runtime.ParamLocationQuery, *params.FieldsAppPricePoints); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitPricePoints != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[pricePoints]", runtime.ParamLocationQuery, *params.LimitPricePoints); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppPriceTiersPricePointsGetToManyRelatedRequest generates requests for AppPriceTiersPricePointsGetToManyRelated
func NewAppPriceTiersPricePointsGetToManyRelatedRequest(server string, id string, params *AppPriceTiersPricePointsGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appPriceTiers/%s/pricePoints", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsAppPricePoints != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appPricePoints]", runtime.ParamLocationQuery, *params.FieldsAppPricePoints); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppPricesGetInstanceRequest generates requests for AppPricesGetInstance
func NewAppPricesGetInstanceRequest(server string, id string, params *AppPricesGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appPrices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsAppPrices != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appPrices]", runtime.ParamLocationQuery, *params.FieldsAppPrices); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppScreenshotSetsCreateInstanceRequest calls the generic AppScreenshotSetsCreateInstance builder with application/json body
func NewAppScreenshotSetsCreateInstanceRequest(server string, body AppScreenshotSetsCreateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAppScreenshotSetsCreateInstanceRequestWithBody(server, "application/json", bodyReader)
}

// NewAppScreenshotSetsCreateInstanceRequestWithBody generates requests for AppScreenshotSetsCreateInstance with any type of body
func NewAppScreenshotSetsCreateInstanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appScreenshotSets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAppScreenshotSetsDeleteInstanceRequest generates requests for AppScreenshotSetsDeleteInstance
func NewAppScreenshotSetsDeleteInstanceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appScreenshotSets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppScreenshotSetsGetInstanceRequest generates requests for AppScreenshotSetsGetInstance
func NewAppScreenshotSetsGetInstanceRequest(server string, id string, params *AppScreenshotSetsGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appScreenshotSets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsAppScreenshotSets != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appScreenshotSets]", runtime.ParamLocationQuery, *params.FieldsAppScreenshotSets); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAppScreenshots != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appScreenshots]", runtime.ParamLocationQuery, *params.FieldsAppScreenshots); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitAppScreenshots != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[appScreenshots]", runtime.ParamLocationQuery, *params.LimitAppScreenshots); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppScreenshotSetsAppScreenshotsGetToManyRelatedRequest generates requests for AppScreenshotSetsAppScreenshotsGetToManyRelated
func NewAppScreenshotSetsAppScreenshotsGetToManyRelatedRequest(server string, id string, params *AppScreenshotSetsAppScreenshotsGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appScreenshotSets/%s/appScreenshots", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsAppScreenshots != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appScreenshots]", runtime.ParamLocationQuery, *params.FieldsAppScreenshots); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppScreenshotSetsAppScreenshotsGetToManyRelationshipRequest generates requests for AppScreenshotSetsAppScreenshotsGetToManyRelationship
func NewAppScreenshotSetsAppScreenshotsGetToManyRelationshipRequest(server string, id string, params *AppScreenshotSetsAppScreenshotsGetToManyRelationshipParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appScreenshotSets/%s/relationships/appScreenshots", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppScreenshotSetsAppScreenshotsReplaceToManyRelationshipRequest calls the generic AppScreenshotSetsAppScreenshotsReplaceToManyRelationship builder with application/json body
func NewAppScreenshotSetsAppScreenshotsReplaceToManyRelationshipRequest(server string, id string, body AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAppScreenshotSetsAppScreenshotsReplaceToManyRelationshipRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAppScreenshotSetsAppScreenshotsReplaceToManyRelationshipRequestWithBody generates requests for AppScreenshotSetsAppScreenshotsReplaceToManyRelationship with any type of body
func NewAppScreenshotSetsAppScreenshotsReplaceToManyRelationshipRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appScreenshotSets/%s/relationships/appScreenshots", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAppScreenshotsCreateInstanceRequest calls the generic AppScreenshotsCreateInstance builder with application/json body
func NewAppScreenshotsCreateInstanceRequest(server string, body AppScreenshotsCreateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAppScreenshotsCreateInstanceRequestWithBody(server, "application/json", bodyReader)
}

// NewAppScreenshotsCreateInstanceRequestWithBody generates requests for AppScreenshotsCreateInstance with any type of body
func NewAppScreenshotsCreateInstanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appScreenshots")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAppScreenshotsDeleteInstanceRequest generates requests for AppScreenshotsDeleteInstance
func NewAppScreenshotsDeleteInstanceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appScreenshots/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppScreenshotsGetInstanceRequest generates requests for AppScreenshotsGetInstance
func NewAppScreenshotsGetInstanceRequest(server string, id string, params *AppScreenshotsGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appScreenshots/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsAppScreenshots != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appScreenshots]", runtime.ParamLocationQuery, *params.FieldsAppScreenshots); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppScreenshotsUpdateInstanceRequest calls the generic AppScreenshotsUpdateInstance builder with application/json body
func NewAppScreenshotsUpdateInstanceRequest(server string, id string, body AppScreenshotsUpdateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAppScreenshotsUpdateInstanceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAppScreenshotsUpdateInstanceRequestWithBody generates requests for AppScreenshotsUpdateInstance with any type of body
func NewAppScreenshotsUpdateInstanceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appScreenshots/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAppStoreReviewAttachmentsCreateInstanceRequest calls the generic AppStoreReviewAttachmentsCreateInstance builder with application/json body
func NewAppStoreReviewAttachmentsCreateInstanceRequest(server string, body AppStoreReviewAttachmentsCreateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAppStoreReviewAttachmentsCreateInstanceRequestWithBody(server, "application/json", bodyReader)
}

// NewAppStoreReviewAttachmentsCreateInstanceRequestWithBody generates requests for AppStoreReviewAttachmentsCreateInstance with any type of body
func NewAppStoreReviewAttachmentsCreateInstanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appStoreReviewAttachments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAppStoreReviewAttachmentsDeleteInstanceRequest generates requests for AppStoreReviewAttachmentsDeleteInstance
func NewAppStoreReviewAttachmentsDeleteInstanceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appStoreReviewAttachments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppStoreReviewAttachmentsGetInstanceRequest generates requests for AppStoreReviewAttachmentsGetInstance
func NewAppStoreReviewAttachmentsGetInstanceRequest(server string, id string, params *AppStoreReviewAttachmentsGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appStoreReviewAttachments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsAppStoreReviewAttachments != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appStoreReviewAttachments]", runtime.ParamLocationQuery, *params.FieldsAppStoreReviewAttachments); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppStoreReviewAttachmentsUpdateInstanceRequest calls the generic AppStoreReviewAttachmentsUpdateInstance builder with application/json body
func NewAppStoreReviewAttachmentsUpdateInstanceRequest(server string, id string, body AppStoreReviewAttachmentsUpdateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAppStoreReviewAttachmentsUpdateInstanceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAppStoreReviewAttachmentsUpdateInstanceRequestWithBody generates requests for AppStoreReviewAttachmentsUpdateInstance with any type of body
func NewAppStoreReviewAttachmentsUpdateInstanceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appStoreReviewAttachments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAppStoreReviewDetailsCreateInstanceRequest calls the generic AppStoreReviewDetailsCreateInstance builder with application/json body
func NewAppStoreReviewDetailsCreateInstanceRequest(server string, body AppStoreReviewDetailsCreateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAppStoreReviewDetailsCreateInstanceRequestWithBody(server, "application/json", bodyReader)
}

// NewAppStoreReviewDetailsCreateInstanceRequestWithBody generates requests for AppStoreReviewDetailsCreateInstance with any type of body
func NewAppStoreReviewDetailsCreateInstanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appStoreReviewDetails")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAppStoreReviewDetailsGetInstanceRequest generates requests for AppStoreReviewDetailsGetInstance
func NewAppStoreReviewDetailsGetInstanceRequest(server string, id string, params *AppStoreReviewDetailsGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appStoreReviewDetails/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsAppStoreReviewDetails != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appStoreReviewDetails]", runtime.ParamLocationQuery, *params.FieldsAppStoreReviewDetails); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAppStoreReviewAttachments != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appStoreReviewAttachments]", runtime.ParamLocationQuery, *params.FieldsAppStoreReviewAttachments); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitAppStoreReviewAttachments != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[appStoreReviewAttachments]", runtime.ParamLocationQuery, *params.LimitAppStoreReviewAttachments); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppStoreReviewDetailsUpdateInstanceRequest calls the generic AppStoreReviewDetailsUpdateInstance builder with application/json body
func NewAppStoreReviewDetailsUpdateInstanceRequest(server string, id string, body AppStoreReviewDetailsUpdateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAppStoreReviewDetailsUpdateInstanceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAppStoreReviewDetailsUpdateInstanceRequestWithBody generates requests for AppStoreReviewDetailsUpdateInstance with any type of body
func NewAppStoreReviewDetailsUpdateInstanceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appStoreReviewDetails/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedRequest generates requests for AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelated
func NewAppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedRequest(server string, id string, params *AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appStoreReviewDetails/%s/appStoreReviewAttachments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsAppStoreReviewAttachments != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appStoreReviewAttachments]", runtime.ParamLocationQuery, *params.FieldsAppStoreReviewAttachments); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppStoreVersionLocalizationsCreateInstanceRequest calls the generic AppStoreVersionLocalizationsCreateInstance builder with application/json body
func NewAppStoreVersionLocalizationsCreateInstanceRequest(server string, body AppStoreVersionLocalizationsCreateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAppStoreVersionLocalizationsCreateInstanceRequestWithBody(server, "application/json", bodyReader)
}

// NewAppStoreVersionLocalizationsCreateInstanceRequestWithBody generates requests for AppStoreVersionLocalizationsCreateInstance with any type of body
func NewAppStoreVersionLocalizationsCreateInstanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appStoreVersionLocalizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAppStoreVersionLocalizationsDeleteInstanceRequest generates requests for AppStoreVersionLocalizationsDeleteInstance
func NewAppStoreVersionLocalizationsDeleteInstanceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appStoreVersionLocalizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppStoreVersionLocalizationsGetInstanceRequest generates requests for AppStoreVersionLocalizationsGetInstance
func NewAppStoreVersionLocalizationsGetInstanceRequest(server string, id string, params *AppStoreVersionLocalizationsGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appStoreVersionLocalizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsAppStoreVersionLocalizations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appStoreVersionLocalizations]", runtime.ParamLocationQuery, *params.FieldsAppStoreVersionLocalizations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAppScreenshotSets != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appScreenshotSets]", runtime.ParamLocationQuery, *params.FieldsAppScreenshotSets); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAppPreviewSets != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appPreviewSets]", runtime.ParamLocationQuery, *params.FieldsAppPreviewSets); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitAppPreviewSets != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[appPreviewSets]", runtime.ParamLocationQuery, *params.LimitAppPreviewSets); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitAppScreenshotSets != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[appScreenshotSets]", runtime.ParamLocationQuery, *params.LimitAppScreenshotSets); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppStoreVersionLocalizationsUpdateInstanceRequest calls the generic AppStoreVersionLocalizationsUpdateInstance builder with application/json body
func NewAppStoreVersionLocalizationsUpdateInstanceRequest(server string, id string, body AppStoreVersionLocalizationsUpdateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAppStoreVersionLocalizationsUpdateInstanceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAppStoreVersionLocalizationsUpdateInstanceRequestWithBody generates requests for AppStoreVersionLocalizationsUpdateInstance with any type of body
func NewAppStoreVersionLocalizationsUpdateInstanceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appStoreVersionLocalizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest generates requests for AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelated
func NewAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest(server string, id string, params *AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appStoreVersionLocalizations/%s/appPreviewSets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FilterPreviewType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[previewType]", runtime.ParamLocationQuery, *params.FilterPreviewType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAppPreviews != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appPreviews]", runtime.ParamLocationQuery, *params.FieldsAppPreviews); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAppPreviewSets != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appPreviewSets]", runtime.ParamLocationQuery, *params.FieldsAppPreviewSets); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitAppPreviews != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[appPreviews]", runtime.ParamLocationQuery, *params.LimitAppPreviews); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest generates requests for AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelated
func NewAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest(server string, id string, params *AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appStoreVersionLocalizations/%s/appScreenshotSets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FilterScreenshotDisplayType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[screenshotDisplayType]", runtime.ParamLocationQuery, *params.FilterScreenshotDisplayType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAppScreenshotSets != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appScreenshotSets]", runtime.ParamLocationQuery, *params.FieldsAppScreenshotSets); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAppScreenshots != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appScreenshots]", runtime.ParamLocationQuery, *params.FieldsAppScreenshots); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitAppScreenshots != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[appScreenshots]", runtime.ParamLocationQuery, *params.LimitAppScreenshots); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppStoreVersionPhasedReleasesCreateInstanceRequest calls the generic AppStoreVersionPhasedReleasesCreateInstance builder with application/json body
func NewAppStoreVersionPhasedReleasesCreateInstanceRequest(server string, body AppStoreVersionPhasedReleasesCreateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAppStoreVersionPhasedReleasesCreateInstanceRequestWithBody(server, "application/json", bodyReader)
}

// NewAppStoreVersionPhasedReleasesCreateInstanceRequestWithBody generates requests for AppStoreVersionPhasedReleasesCreateInstance with any type of body
func NewAppStoreVersionPhasedReleasesCreateInstanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appStoreVersionPhasedReleases")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAppStoreVersionPhasedReleasesDeleteInstanceRequest generates requests for AppStoreVersionPhasedReleasesDeleteInstance
func NewAppStoreVersionPhasedReleasesDeleteInstanceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appStoreVersionPhasedReleases/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppStoreVersionPhasedReleasesUpdateInstanceRequest calls the generic AppStoreVersionPhasedReleasesUpdateInstance builder with application/json body
func NewAppStoreVersionPhasedReleasesUpdateInstanceRequest(server string, id string, body AppStoreVersionPhasedReleasesUpdateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAppStoreVersionPhasedReleasesUpdateInstanceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAppStoreVersionPhasedReleasesUpdateInstanceRequestWithBody generates requests for AppStoreVersionPhasedReleasesUpdateInstance with any type of body
func NewAppStoreVersionPhasedReleasesUpdateInstanceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appStoreVersionPhasedReleases/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAppStoreVersionReleaseRequestsCreateInstanceRequest calls the generic AppStoreVersionReleaseRequestsCreateInstance builder with application/json body
func NewAppStoreVersionReleaseRequestsCreateInstanceRequest(server string, body AppStoreVersionReleaseRequestsCreateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAppStoreVersionReleaseRequestsCreateInstanceRequestWithBody(server, "application/json", bodyReader)
}

// NewAppStoreVersionReleaseRequestsCreateInstanceRequestWithBody generates requests for AppStoreVersionReleaseRequestsCreateInstance with any type of body
func NewAppStoreVersionReleaseRequestsCreateInstanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appStoreVersionReleaseRequests")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAppStoreVersionSubmissionsCreateInstanceRequest calls the generic AppStoreVersionSubmissionsCreateInstance builder with application/json body
func NewAppStoreVersionSubmissionsCreateInstanceRequest(server string, body AppStoreVersionSubmissionsCreateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAppStoreVersionSubmissionsCreateInstanceRequestWithBody(server, "application/json", bodyReader)
}

// NewAppStoreVersionSubmissionsCreateInstanceRequestWithBody generates requests for AppStoreVersionSubmissionsCreateInstance with any type of body
func NewAppStoreVersionSubmissionsCreateInstanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appStoreVersionSubmissions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAppStoreVersionSubmissionsDeleteInstanceRequest generates requests for AppStoreVersionSubmissionsDeleteInstance
func NewAppStoreVersionSubmissionsDeleteInstanceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appStoreVersionSubmissions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppStoreVersionsCreateInstanceRequest calls the generic AppStoreVersionsCreateInstance builder with application/json body
func NewAppStoreVersionsCreateInstanceRequest(server string, body AppStoreVersionsCreateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAppStoreVersionsCreateInstanceRequestWithBody(server, "application/json", bodyReader)
}

// NewAppStoreVersionsCreateInstanceRequestWithBody generates requests for AppStoreVersionsCreateInstance with any type of body
func NewAppStoreVersionsCreateInstanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appStoreVersions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAppStoreVersionsDeleteInstanceRequest generates requests for AppStoreVersionsDeleteInstance
func NewAppStoreVersionsDeleteInstanceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appStoreVersions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppStoreVersionsGetInstanceRequest generates requests for AppStoreVersionsGetInstance
func NewAppStoreVersionsGetInstanceRequest(server string, id string, params *AppStoreVersionsGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appStoreVersions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsAppStoreVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appStoreVersions]", runtime.ParamLocationQuery, *params.FieldsAppStoreVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAppStoreVersionSubmissions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appStoreVersionSubmissions]", runtime.ParamLocationQuery, *params.FieldsAppStoreVersionSubmissions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAgeRatingDeclarations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ageRatingDeclarations]", runtime.ParamLocationQuery, *params.FieldsAgeRatingDeclarations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAppStoreReviewDetails != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appStoreReviewDetails]", runtime.ParamLocationQuery, *params.FieldsAppStoreReviewDetails); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsIdfaDeclarations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[idfaDeclarations]", runtime.ParamLocationQuery, *params.FieldsIdfaDeclarations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsRoutingAppCoverages != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[routingAppCoverages]", runtime.ParamLocationQuery, *params.FieldsRoutingAppCoverages); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAppStoreVersionPhasedReleases != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appStoreVersionPhasedReleases]", runtime.ParamLocationQuery, *params.FieldsAppStoreVersionPhasedReleases); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[builds]", runtime.ParamLocationQuery, *params.FieldsBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAppStoreVersionLocalizations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appStoreVersionLocalizations]", runtime.ParamLocationQuery, *params.FieldsAppStoreVersionLocalizations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitAppStoreVersionLocalizations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[appStoreVersionLocalizations]", runtime.ParamLocationQuery, *params.LimitAppStoreVersionLocalizations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppStoreVersionsUpdateInstanceRequest calls the generic AppStoreVersionsUpdateInstance builder with application/json body
func NewAppStoreVersionsUpdateInstanceRequest(server string, id string, body AppStoreVersionsUpdateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAppStoreVersionsUpdateInstanceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAppStoreVersionsUpdateInstanceRequestWithBody generates requests for AppStoreVersionsUpdateInstance with any type of body
func NewAppStoreVersionsUpdateInstanceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appStoreVersions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAppStoreVersionsAgeRatingDeclarationGetToOneRelatedRequest generates requests for AppStoreVersionsAgeRatingDeclarationGetToOneRelated
func NewAppStoreVersionsAgeRatingDeclarationGetToOneRelatedRequest(server string, id string, params *AppStoreVersionsAgeRatingDeclarationGetToOneRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appStoreVersions/%s/ageRatingDeclaration", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsAgeRatingDeclarations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ageRatingDeclarations]", runtime.ParamLocationQuery, *params.FieldsAgeRatingDeclarations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppStoreVersionsAppStoreReviewDetailGetToOneRelatedRequest generates requests for AppStoreVersionsAppStoreReviewDetailGetToOneRelated
func NewAppStoreVersionsAppStoreReviewDetailGetToOneRelatedRequest(server string, id string, params *AppStoreVersionsAppStoreReviewDetailGetToOneRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appStoreVersions/%s/appStoreReviewDetail", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsAppStoreReviewDetails != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appStoreReviewDetails]", runtime.ParamLocationQuery, *params.FieldsAppStoreReviewDetails); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAppStoreReviewAttachments != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appStoreReviewAttachments]", runtime.ParamLocationQuery, *params.FieldsAppStoreReviewAttachments); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitAppStoreReviewAttachments != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[appStoreReviewAttachments]", runtime.ParamLocationQuery, *params.LimitAppStoreReviewAttachments); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest generates requests for AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelated
func NewAppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest(server string, id string, params *AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appStoreVersions/%s/appStoreVersionLocalizations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsAppStoreVersionLocalizations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appStoreVersionLocalizations]", runtime.ParamLocationQuery, *params.FieldsAppStoreVersionLocalizations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedRequest generates requests for AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated
func NewAppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedRequest(server string, id string, params *AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appStoreVersions/%s/appStoreVersionPhasedRelease", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsAppStoreVersionPhasedReleases != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appStoreVersionPhasedReleases]", runtime.ParamLocationQuery, *params.FieldsAppStoreVersionPhasedReleases); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedRequest generates requests for AppStoreVersionsAppStoreVersionSubmissionGetToOneRelated
func NewAppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedRequest(server string, id string, params *AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appStoreVersions/%s/appStoreVersionSubmission", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsAppStoreVersionSubmissions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appStoreVersionSubmissions]", runtime.ParamLocationQuery, *params.FieldsAppStoreVersionSubmissions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppStoreVersionsBuildGetToOneRelatedRequest generates requests for AppStoreVersionsBuildGetToOneRelated
func NewAppStoreVersionsBuildGetToOneRelatedRequest(server string, id string, params *AppStoreVersionsBuildGetToOneRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appStoreVersions/%s/build", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[builds]", runtime.ParamLocationQuery, *params.FieldsBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppStoreVersionsIdfaDeclarationGetToOneRelatedRequest generates requests for AppStoreVersionsIdfaDeclarationGetToOneRelated
func NewAppStoreVersionsIdfaDeclarationGetToOneRelatedRequest(server string, id string, params *AppStoreVersionsIdfaDeclarationGetToOneRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appStoreVersions/%s/idfaDeclaration", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsIdfaDeclarations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[idfaDeclarations]", runtime.ParamLocationQuery, *params.FieldsIdfaDeclarations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppStoreVersionsBuildGetToOneRelationshipRequest generates requests for AppStoreVersionsBuildGetToOneRelationship
func NewAppStoreVersionsBuildGetToOneRelationshipRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appStoreVersions/%s/relationships/build", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppStoreVersionsBuildUpdateToOneRelationshipRequest calls the generic AppStoreVersionsBuildUpdateToOneRelationship builder with application/json body
func NewAppStoreVersionsBuildUpdateToOneRelationshipRequest(server string, id string, body AppStoreVersionsBuildUpdateToOneRelationshipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAppStoreVersionsBuildUpdateToOneRelationshipRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAppStoreVersionsBuildUpdateToOneRelationshipRequestWithBody generates requests for AppStoreVersionsBuildUpdateToOneRelationship with any type of body
func NewAppStoreVersionsBuildUpdateToOneRelationshipRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appStoreVersions/%s/relationships/build", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAppStoreVersionsRoutingAppCoverageGetToOneRelatedRequest generates requests for AppStoreVersionsRoutingAppCoverageGetToOneRelated
func NewAppStoreVersionsRoutingAppCoverageGetToOneRelatedRequest(server string, id string, params *AppStoreVersionsRoutingAppCoverageGetToOneRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/appStoreVersions/%s/routingAppCoverage", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsRoutingAppCoverages != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[routingAppCoverages]", runtime.ParamLocationQuery, *params.FieldsRoutingAppCoverages); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppsGetCollectionRequest generates requests for AppsGetCollection
func NewAppsGetCollectionRequest(server string, params *AppsGetCollectionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/apps")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FilterAppStoreVersionsAppStoreState != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[appStoreVersions.appStoreState]", runtime.ParamLocationQuery, *params.FilterAppStoreVersionsAppStoreState); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterAppStoreVersionsPlatform != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[appStoreVersions.platform]", runtime.ParamLocationQuery, *params.FilterAppStoreVersionsPlatform); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterBundleId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[bundleId]", runtime.ParamLocationQuery, *params.FilterBundleId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSku != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[sku]", runtime.ParamLocationQuery, *params.FilterSku); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterAppStoreVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[appStoreVersions]", runtime.ParamLocationQuery, *params.FilterAppStoreVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[id]", runtime.ParamLocationQuery, *params.FilterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExistsGameCenterEnabledVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "exists[gameCenterEnabledVersions]", runtime.ParamLocationQuery, *params.ExistsGameCenterEnabledVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[apps]", runtime.ParamLocationQuery, *params.FieldsApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBetaLicenseAgreements != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaLicenseAgreements]", runtime.ParamLocationQuery, *params.FieldsBetaLicenseAgreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBetaAppReviewDetails != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaAppReviewDetails]", runtime.ParamLocationQuery, *params.FieldsBetaAppReviewDetails); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAppInfos != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appInfos]", runtime.ParamLocationQuery, *params.FieldsAppInfos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBetaAppLocalizations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaAppLocalizations]", runtime.ParamLocationQuery, *params.FieldsBetaAppLocalizations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsInAppPurchases != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[inAppPurchases]", runtime.ParamLocationQuery, *params.FieldsInAppPurchases); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsPreReleaseVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[preReleaseVersions]", runtime.ParamLocationQuery, *params.FieldsPreReleaseVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsCiProducts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ciProducts]", runtime.ParamLocationQuery, *params.FieldsCiProducts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAppPrices != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appPrices]", runtime.ParamLocationQuery, *params.FieldsAppPrices); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAppPreOrders != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appPreOrders]", runtime.ParamLocationQuery, *params.FieldsAppPreOrders); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBetaGroups != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaGroups]", runtime.ParamLocationQuery, *params.FieldsBetaGroups); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsGameCenterEnabledVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[gameCenterEnabledVersions]", runtime.ParamLocationQuery, *params.FieldsGameCenterEnabledVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsEndUserLicenseAgreements != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[endUserLicenseAgreements]", runtime.ParamLocationQuery, *params.FieldsEndUserLicenseAgreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAppStoreVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appStoreVersions]", runtime.ParamLocationQuery, *params.FieldsAppStoreVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsTerritories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[territories]", runtime.ParamLocationQuery, *params.FieldsTerritories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsPerfPowerMetrics != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[perfPowerMetrics]", runtime.ParamLocationQuery, *params.FieldsPerfPowerMetrics); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[builds]", runtime.ParamLocationQuery, *params.FieldsBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitAppInfos != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[appInfos]", runtime.ParamLocationQuery, *params.LimitAppInfos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitAppStoreVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[appStoreVersions]", runtime.ParamLocationQuery, *params.LimitAppStoreVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitAvailableTerritories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[availableTerritories]", runtime.ParamLocationQuery, *params.LimitAvailableTerritories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitBetaAppLocalizations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[betaAppLocalizations]", runtime.ParamLocationQuery, *params.LimitBetaAppLocalizations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitBetaGroups != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[betaGroups]", runtime.ParamLocationQuery, *params.LimitBetaGroups); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[builds]", runtime.ParamLocationQuery, *params.LimitBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitGameCenterEnabledVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[gameCenterEnabledVersions]", runtime.ParamLocationQuery, *params.LimitGameCenterEnabledVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitInAppPurchases != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[inAppPurchases]", runtime.ParamLocationQuery, *params.LimitInAppPurchases); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitPreReleaseVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[preReleaseVersions]", runtime.ParamLocationQuery, *params.LimitPreReleaseVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitPrices != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[prices]", runtime.ParamLocationQuery, *params.LimitPrices); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppsGetInstanceRequest generates requests for AppsGetInstance
func NewAppsGetInstanceRequest(server string, id string, params *AppsGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/apps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[apps]", runtime.ParamLocationQuery, *params.FieldsApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBetaLicenseAgreements != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaLicenseAgreements]", runtime.ParamLocationQuery, *params.FieldsBetaLicenseAgreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBetaAppReviewDetails != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaAppReviewDetails]", runtime.ParamLocationQuery, *params.FieldsBetaAppReviewDetails); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAppInfos != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appInfos]", runtime.ParamLocationQuery, *params.FieldsAppInfos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBetaAppLocalizations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaAppLocalizations]", runtime.ParamLocationQuery, *params.FieldsBetaAppLocalizations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsInAppPurchases != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[inAppPurchases]", runtime.ParamLocationQuery, *params.FieldsInAppPurchases); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsPreReleaseVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[preReleaseVersions]", runtime.ParamLocationQuery, *params.FieldsPreReleaseVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsCiProducts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ciProducts]", runtime.ParamLocationQuery, *params.FieldsCiProducts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAppPrices != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appPrices]", runtime.ParamLocationQuery, *params.FieldsAppPrices); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAppPreOrders != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appPreOrders]", runtime.ParamLocationQuery, *params.FieldsAppPreOrders); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBetaGroups != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaGroups]", runtime.ParamLocationQuery, *params.FieldsBetaGroups); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsGameCenterEnabledVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[gameCenterEnabledVersions]", runtime.ParamLocationQuery, *params.FieldsGameCenterEnabledVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsEndUserLicenseAgreements != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[endUserLicenseAgreements]", runtime.ParamLocationQuery, *params.FieldsEndUserLicenseAgreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAppStoreVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appStoreVersions]", runtime.ParamLocationQuery, *params.FieldsAppStoreVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsTerritories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[territories]", runtime.ParamLocationQuery, *params.FieldsTerritories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsPerfPowerMetrics != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[perfPowerMetrics]", runtime.ParamLocationQuery, *params.FieldsPerfPowerMetrics); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[builds]", runtime.ParamLocationQuery, *params.FieldsBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitAppInfos != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[appInfos]", runtime.ParamLocationQuery, *params.LimitAppInfos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitAppStoreVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[appStoreVersions]", runtime.ParamLocationQuery, *params.LimitAppStoreVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitAvailableTerritories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[availableTerritories]", runtime.ParamLocationQuery, *params.LimitAvailableTerritories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitBetaAppLocalizations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[betaAppLocalizations]", runtime.ParamLocationQuery, *params.LimitBetaAppLocalizations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitBetaGroups != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[betaGroups]", runtime.ParamLocationQuery, *params.LimitBetaGroups); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[builds]", runtime.ParamLocationQuery, *params.LimitBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitGameCenterEnabledVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[gameCenterEnabledVersions]", runtime.ParamLocationQuery, *params.LimitGameCenterEnabledVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitInAppPurchases != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[inAppPurchases]", runtime.ParamLocationQuery, *params.LimitInAppPurchases); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitPreReleaseVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[preReleaseVersions]", runtime.ParamLocationQuery, *params.LimitPreReleaseVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitPrices != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[prices]", runtime.ParamLocationQuery, *params.LimitPrices); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppsUpdateInstanceRequest calls the generic AppsUpdateInstance builder with application/json body
func NewAppsUpdateInstanceRequest(server string, id string, body AppsUpdateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAppsUpdateInstanceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAppsUpdateInstanceRequestWithBody generates requests for AppsUpdateInstance with any type of body
func NewAppsUpdateInstanceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/apps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAppsAppInfosGetToManyRelatedRequest generates requests for AppsAppInfosGetToManyRelated
func NewAppsAppInfosGetToManyRelatedRequest(server string, id string, params *AppsAppInfosGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/apps/%s/appInfos", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsAppInfos != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appInfos]", runtime.ParamLocationQuery, *params.FieldsAppInfos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAppInfoLocalizations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appInfoLocalizations]", runtime.ParamLocationQuery, *params.FieldsAppInfoLocalizations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitAppInfoLocalizations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[appInfoLocalizations]", runtime.ParamLocationQuery, *params.LimitAppInfoLocalizations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppsAppStoreVersionsGetToManyRelatedRequest generates requests for AppsAppStoreVersionsGetToManyRelated
func NewAppsAppStoreVersionsGetToManyRelatedRequest(server string, id string, params *AppsAppStoreVersionsGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/apps/%s/appStoreVersions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FilterAppStoreState != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[appStoreState]", runtime.ParamLocationQuery, *params.FilterAppStoreState); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterPlatform != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[platform]", runtime.ParamLocationQuery, *params.FilterPlatform); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterVersionString != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[versionString]", runtime.ParamLocationQuery, *params.FilterVersionString); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[id]", runtime.ParamLocationQuery, *params.FilterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAppStoreVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appStoreVersions]", runtime.ParamLocationQuery, *params.FieldsAppStoreVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAppStoreVersionLocalizations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appStoreVersionLocalizations]", runtime.ParamLocationQuery, *params.FieldsAppStoreVersionLocalizations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitAppStoreVersionLocalizations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[appStoreVersionLocalizations]", runtime.ParamLocationQuery, *params.LimitAppStoreVersionLocalizations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppsAvailableTerritoriesGetToManyRelatedRequest generates requests for AppsAvailableTerritoriesGetToManyRelated
func NewAppsAvailableTerritoriesGetToManyRelatedRequest(server string, id string, params *AppsAvailableTerritoriesGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/apps/%s/availableTerritories", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsTerritories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[territories]", runtime.ParamLocationQuery, *params.FieldsTerritories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppsBetaAppLocalizationsGetToManyRelatedRequest generates requests for AppsBetaAppLocalizationsGetToManyRelated
func NewAppsBetaAppLocalizationsGetToManyRelatedRequest(server string, id string, params *AppsBetaAppLocalizationsGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/apps/%s/betaAppLocalizations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsBetaAppLocalizations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaAppLocalizations]", runtime.ParamLocationQuery, *params.FieldsBetaAppLocalizations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppsBetaAppReviewDetailGetToOneRelatedRequest generates requests for AppsBetaAppReviewDetailGetToOneRelated
func NewAppsBetaAppReviewDetailGetToOneRelatedRequest(server string, id string, params *AppsBetaAppReviewDetailGetToOneRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/apps/%s/betaAppReviewDetail", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsBetaAppReviewDetails != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaAppReviewDetails]", runtime.ParamLocationQuery, *params.FieldsBetaAppReviewDetails); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppsBetaGroupsGetToManyRelatedRequest generates requests for AppsBetaGroupsGetToManyRelated
func NewAppsBetaGroupsGetToManyRelatedRequest(server string, id string, params *AppsBetaGroupsGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/apps/%s/betaGroups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsBetaGroups != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaGroups]", runtime.ParamLocationQuery, *params.FieldsBetaGroups); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppsBetaLicenseAgreementGetToOneRelatedRequest generates requests for AppsBetaLicenseAgreementGetToOneRelated
func NewAppsBetaLicenseAgreementGetToOneRelatedRequest(server string, id string, params *AppsBetaLicenseAgreementGetToOneRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/apps/%s/betaLicenseAgreement", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsBetaLicenseAgreements != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaLicenseAgreements]", runtime.ParamLocationQuery, *params.FieldsBetaLicenseAgreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppsBuildsGetToManyRelatedRequest generates requests for AppsBuildsGetToManyRelated
func NewAppsBuildsGetToManyRelatedRequest(server string, id string, params *AppsBuildsGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/apps/%s/builds", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[builds]", runtime.ParamLocationQuery, *params.FieldsBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppsCiProductGetToOneRelatedRequest generates requests for AppsCiProductGetToOneRelated
func NewAppsCiProductGetToOneRelatedRequest(server string, id string, params *AppsCiProductGetToOneRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/apps/%s/ciProduct", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsCiProducts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ciProducts]", runtime.ParamLocationQuery, *params.FieldsCiProducts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsScmRepositories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[scmRepositories]", runtime.ParamLocationQuery, *params.FieldsScmRepositories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitPrimaryRepositories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[primaryRepositories]", runtime.ParamLocationQuery, *params.LimitPrimaryRepositories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppsEndUserLicenseAgreementGetToOneRelatedRequest generates requests for AppsEndUserLicenseAgreementGetToOneRelated
func NewAppsEndUserLicenseAgreementGetToOneRelatedRequest(server string, id string, params *AppsEndUserLicenseAgreementGetToOneRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/apps/%s/endUserLicenseAgreement", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsEndUserLicenseAgreements != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[endUserLicenseAgreements]", runtime.ParamLocationQuery, *params.FieldsEndUserLicenseAgreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppsGameCenterEnabledVersionsGetToManyRelatedRequest generates requests for AppsGameCenterEnabledVersionsGetToManyRelated
func NewAppsGameCenterEnabledVersionsGetToManyRelatedRequest(server string, id string, params *AppsGameCenterEnabledVersionsGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/apps/%s/gameCenterEnabledVersions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FilterPlatform != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[platform]", runtime.ParamLocationQuery, *params.FilterPlatform); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterVersionString != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[versionString]", runtime.ParamLocationQuery, *params.FilterVersionString); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[id]", runtime.ParamLocationQuery, *params.FilterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsGameCenterEnabledVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[gameCenterEnabledVersions]", runtime.ParamLocationQuery, *params.FieldsGameCenterEnabledVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitCompatibleVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[compatibleVersions]", runtime.ParamLocationQuery, *params.LimitCompatibleVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppsInAppPurchasesGetToManyRelatedRequest generates requests for AppsInAppPurchasesGetToManyRelated
func NewAppsInAppPurchasesGetToManyRelatedRequest(server string, id string, params *AppsInAppPurchasesGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/apps/%s/inAppPurchases", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FilterInAppPurchaseType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[inAppPurchaseType]", runtime.ParamLocationQuery, *params.FilterInAppPurchaseType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterCanBeSubmitted != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[canBeSubmitted]", runtime.ParamLocationQuery, *params.FilterCanBeSubmitted); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsInAppPurchases != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[inAppPurchases]", runtime.ParamLocationQuery, *params.FieldsInAppPurchases); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[apps]", runtime.ParamLocationQuery, *params.FieldsApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[apps]", runtime.ParamLocationQuery, *params.LimitApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppsPerfPowerMetricsGetToManyRelatedRequest generates requests for AppsPerfPowerMetricsGetToManyRelated
func NewAppsPerfPowerMetricsGetToManyRelatedRequest(server string, id string, params *AppsPerfPowerMetricsGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/apps/%s/perfPowerMetrics", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FilterDeviceType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[deviceType]", runtime.ParamLocationQuery, *params.FilterDeviceType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterMetricType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[metricType]", runtime.ParamLocationQuery, *params.FilterMetricType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterPlatform != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[platform]", runtime.ParamLocationQuery, *params.FilterPlatform); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppsPreOrderGetToOneRelatedRequest generates requests for AppsPreOrderGetToOneRelated
func NewAppsPreOrderGetToOneRelatedRequest(server string, id string, params *AppsPreOrderGetToOneRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/apps/%s/preOrder", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsAppPreOrders != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appPreOrders]", runtime.ParamLocationQuery, *params.FieldsAppPreOrders); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppsPreReleaseVersionsGetToManyRelatedRequest generates requests for AppsPreReleaseVersionsGetToManyRelated
func NewAppsPreReleaseVersionsGetToManyRelatedRequest(server string, id string, params *AppsPreReleaseVersionsGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/apps/%s/preReleaseVersions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsPreReleaseVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[preReleaseVersions]", runtime.ParamLocationQuery, *params.FieldsPreReleaseVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppsPricesGetToManyRelatedRequest generates requests for AppsPricesGetToManyRelated
func NewAppsPricesGetToManyRelatedRequest(server string, id string, params *AppsPricesGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/apps/%s/prices", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsAppPrices != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appPrices]", runtime.ParamLocationQuery, *params.FieldsAppPrices); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppsBetaTestersDeleteToManyRelationshipRequest calls the generic AppsBetaTestersDeleteToManyRelationship builder with application/json body
func NewAppsBetaTestersDeleteToManyRelationshipRequest(server string, id string, body AppsBetaTestersDeleteToManyRelationshipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAppsBetaTestersDeleteToManyRelationshipRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAppsBetaTestersDeleteToManyRelationshipRequestWithBody generates requests for AppsBetaTestersDeleteToManyRelationship with any type of body
func NewAppsBetaTestersDeleteToManyRelationshipRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/apps/%s/relationships/betaTesters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBetaAppLocalizationsGetCollectionRequest generates requests for BetaAppLocalizationsGetCollection
func NewBetaAppLocalizationsGetCollectionRequest(server string, params *BetaAppLocalizationsGetCollectionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaAppLocalizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FilterLocale != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[locale]", runtime.ParamLocationQuery, *params.FilterLocale); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterApp != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[app]", runtime.ParamLocationQuery, *params.FilterApp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBetaAppLocalizations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaAppLocalizations]", runtime.ParamLocationQuery, *params.FieldsBetaAppLocalizations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[apps]", runtime.ParamLocationQuery, *params.FieldsApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBetaAppLocalizationsCreateInstanceRequest calls the generic BetaAppLocalizationsCreateInstance builder with application/json body
func NewBetaAppLocalizationsCreateInstanceRequest(server string, body BetaAppLocalizationsCreateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBetaAppLocalizationsCreateInstanceRequestWithBody(server, "application/json", bodyReader)
}

// NewBetaAppLocalizationsCreateInstanceRequestWithBody generates requests for BetaAppLocalizationsCreateInstance with any type of body
func NewBetaAppLocalizationsCreateInstanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaAppLocalizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBetaAppLocalizationsDeleteInstanceRequest generates requests for BetaAppLocalizationsDeleteInstance
func NewBetaAppLocalizationsDeleteInstanceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaAppLocalizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBetaAppLocalizationsGetInstanceRequest generates requests for BetaAppLocalizationsGetInstance
func NewBetaAppLocalizationsGetInstanceRequest(server string, id string, params *BetaAppLocalizationsGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaAppLocalizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsBetaAppLocalizations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaAppLocalizations]", runtime.ParamLocationQuery, *params.FieldsBetaAppLocalizations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[apps]", runtime.ParamLocationQuery, *params.FieldsApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBetaAppLocalizationsUpdateInstanceRequest calls the generic BetaAppLocalizationsUpdateInstance builder with application/json body
func NewBetaAppLocalizationsUpdateInstanceRequest(server string, id string, body BetaAppLocalizationsUpdateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBetaAppLocalizationsUpdateInstanceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewBetaAppLocalizationsUpdateInstanceRequestWithBody generates requests for BetaAppLocalizationsUpdateInstance with any type of body
func NewBetaAppLocalizationsUpdateInstanceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaAppLocalizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBetaAppLocalizationsAppGetToOneRelatedRequest generates requests for BetaAppLocalizationsAppGetToOneRelated
func NewBetaAppLocalizationsAppGetToOneRelatedRequest(server string, id string, params *BetaAppLocalizationsAppGetToOneRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaAppLocalizations/%s/app", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[apps]", runtime.ParamLocationQuery, *params.FieldsApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBetaAppReviewDetailsGetCollectionRequest generates requests for BetaAppReviewDetailsGetCollection
func NewBetaAppReviewDetailsGetCollectionRequest(server string, params *BetaAppReviewDetailsGetCollectionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaAppReviewDetails")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[app]", runtime.ParamLocationQuery, params.FilterApp); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.FieldsBetaAppReviewDetails != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaAppReviewDetails]", runtime.ParamLocationQuery, *params.FieldsBetaAppReviewDetails); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[apps]", runtime.ParamLocationQuery, *params.FieldsApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBetaAppReviewDetailsGetInstanceRequest generates requests for BetaAppReviewDetailsGetInstance
func NewBetaAppReviewDetailsGetInstanceRequest(server string, id string, params *BetaAppReviewDetailsGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaAppReviewDetails/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsBetaAppReviewDetails != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaAppReviewDetails]", runtime.ParamLocationQuery, *params.FieldsBetaAppReviewDetails); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[apps]", runtime.ParamLocationQuery, *params.FieldsApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBetaAppReviewDetailsUpdateInstanceRequest calls the generic BetaAppReviewDetailsUpdateInstance builder with application/json body
func NewBetaAppReviewDetailsUpdateInstanceRequest(server string, id string, body BetaAppReviewDetailsUpdateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBetaAppReviewDetailsUpdateInstanceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewBetaAppReviewDetailsUpdateInstanceRequestWithBody generates requests for BetaAppReviewDetailsUpdateInstance with any type of body
func NewBetaAppReviewDetailsUpdateInstanceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaAppReviewDetails/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBetaAppReviewDetailsAppGetToOneRelatedRequest generates requests for BetaAppReviewDetailsAppGetToOneRelated
func NewBetaAppReviewDetailsAppGetToOneRelatedRequest(server string, id string, params *BetaAppReviewDetailsAppGetToOneRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaAppReviewDetails/%s/app", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[apps]", runtime.ParamLocationQuery, *params.FieldsApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBetaAppReviewSubmissionsGetCollectionRequest generates requests for BetaAppReviewSubmissionsGetCollection
func NewBetaAppReviewSubmissionsGetCollectionRequest(server string, params *BetaAppReviewSubmissionsGetCollectionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaAppReviewSubmissions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FilterBetaReviewState != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[betaReviewState]", runtime.ParamLocationQuery, *params.FilterBetaReviewState); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[build]", runtime.ParamLocationQuery, params.FilterBuild); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.FieldsBetaAppReviewSubmissions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaAppReviewSubmissions]", runtime.ParamLocationQuery, *params.FieldsBetaAppReviewSubmissions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[builds]", runtime.ParamLocationQuery, *params.FieldsBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBetaAppReviewSubmissionsCreateInstanceRequest calls the generic BetaAppReviewSubmissionsCreateInstance builder with application/json body
func NewBetaAppReviewSubmissionsCreateInstanceRequest(server string, body BetaAppReviewSubmissionsCreateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBetaAppReviewSubmissionsCreateInstanceRequestWithBody(server, "application/json", bodyReader)
}

// NewBetaAppReviewSubmissionsCreateInstanceRequestWithBody generates requests for BetaAppReviewSubmissionsCreateInstance with any type of body
func NewBetaAppReviewSubmissionsCreateInstanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaAppReviewSubmissions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBetaAppReviewSubmissionsGetInstanceRequest generates requests for BetaAppReviewSubmissionsGetInstance
func NewBetaAppReviewSubmissionsGetInstanceRequest(server string, id string, params *BetaAppReviewSubmissionsGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaAppReviewSubmissions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsBetaAppReviewSubmissions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaAppReviewSubmissions]", runtime.ParamLocationQuery, *params.FieldsBetaAppReviewSubmissions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[builds]", runtime.ParamLocationQuery, *params.FieldsBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBetaAppReviewSubmissionsBuildGetToOneRelatedRequest generates requests for BetaAppReviewSubmissionsBuildGetToOneRelated
func NewBetaAppReviewSubmissionsBuildGetToOneRelatedRequest(server string, id string, params *BetaAppReviewSubmissionsBuildGetToOneRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaAppReviewSubmissions/%s/build", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[builds]", runtime.ParamLocationQuery, *params.FieldsBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBetaBuildLocalizationsGetCollectionRequest generates requests for BetaBuildLocalizationsGetCollection
func NewBetaBuildLocalizationsGetCollectionRequest(server string, params *BetaBuildLocalizationsGetCollectionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaBuildLocalizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FilterLocale != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[locale]", runtime.ParamLocationQuery, *params.FilterLocale); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterBuild != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[build]", runtime.ParamLocationQuery, *params.FilterBuild); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBetaBuildLocalizations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaBuildLocalizations]", runtime.ParamLocationQuery, *params.FieldsBetaBuildLocalizations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[builds]", runtime.ParamLocationQuery, *params.FieldsBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBetaBuildLocalizationsCreateInstanceRequest calls the generic BetaBuildLocalizationsCreateInstance builder with application/json body
func NewBetaBuildLocalizationsCreateInstanceRequest(server string, body BetaBuildLocalizationsCreateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBetaBuildLocalizationsCreateInstanceRequestWithBody(server, "application/json", bodyReader)
}

// NewBetaBuildLocalizationsCreateInstanceRequestWithBody generates requests for BetaBuildLocalizationsCreateInstance with any type of body
func NewBetaBuildLocalizationsCreateInstanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaBuildLocalizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBetaBuildLocalizationsDeleteInstanceRequest generates requests for BetaBuildLocalizationsDeleteInstance
func NewBetaBuildLocalizationsDeleteInstanceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaBuildLocalizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBetaBuildLocalizationsGetInstanceRequest generates requests for BetaBuildLocalizationsGetInstance
func NewBetaBuildLocalizationsGetInstanceRequest(server string, id string, params *BetaBuildLocalizationsGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaBuildLocalizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsBetaBuildLocalizations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaBuildLocalizations]", runtime.ParamLocationQuery, *params.FieldsBetaBuildLocalizations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[builds]", runtime.ParamLocationQuery, *params.FieldsBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBetaBuildLocalizationsUpdateInstanceRequest calls the generic BetaBuildLocalizationsUpdateInstance builder with application/json body
func NewBetaBuildLocalizationsUpdateInstanceRequest(server string, id string, body BetaBuildLocalizationsUpdateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBetaBuildLocalizationsUpdateInstanceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewBetaBuildLocalizationsUpdateInstanceRequestWithBody generates requests for BetaBuildLocalizationsUpdateInstance with any type of body
func NewBetaBuildLocalizationsUpdateInstanceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaBuildLocalizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBetaBuildLocalizationsBuildGetToOneRelatedRequest generates requests for BetaBuildLocalizationsBuildGetToOneRelated
func NewBetaBuildLocalizationsBuildGetToOneRelatedRequest(server string, id string, params *BetaBuildLocalizationsBuildGetToOneRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaBuildLocalizations/%s/build", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[builds]", runtime.ParamLocationQuery, *params.FieldsBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBetaGroupsGetCollectionRequest generates requests for BetaGroupsGetCollection
func NewBetaGroupsGetCollectionRequest(server string, params *BetaGroupsGetCollectionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaGroups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FilterIsInternalGroup != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[isInternalGroup]", runtime.ParamLocationQuery, *params.FilterIsInternalGroup); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterPublicLink != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[publicLink]", runtime.ParamLocationQuery, *params.FilterPublicLink); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterPublicLinkEnabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[publicLinkEnabled]", runtime.ParamLocationQuery, *params.FilterPublicLinkEnabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterPublicLinkLimitEnabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[publicLinkLimitEnabled]", runtime.ParamLocationQuery, *params.FilterPublicLinkLimitEnabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterApp != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[app]", runtime.ParamLocationQuery, *params.FilterApp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[builds]", runtime.ParamLocationQuery, *params.FilterBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[id]", runtime.ParamLocationQuery, *params.FilterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBetaGroups != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaGroups]", runtime.ParamLocationQuery, *params.FieldsBetaGroups); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBetaTesters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaTesters]", runtime.ParamLocationQuery, *params.FieldsBetaTesters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[apps]", runtime.ParamLocationQuery, *params.FieldsApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[builds]", runtime.ParamLocationQuery, *params.FieldsBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitBetaTesters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[betaTesters]", runtime.ParamLocationQuery, *params.LimitBetaTesters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[builds]", runtime.ParamLocationQuery, *params.LimitBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBetaGroupsCreateInstanceRequest calls the generic BetaGroupsCreateInstance builder with application/json body
func NewBetaGroupsCreateInstanceRequest(server string, body BetaGroupsCreateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBetaGroupsCreateInstanceRequestWithBody(server, "application/json", bodyReader)
}

// NewBetaGroupsCreateInstanceRequestWithBody generates requests for BetaGroupsCreateInstance with any type of body
func NewBetaGroupsCreateInstanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaGroups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBetaGroupsDeleteInstanceRequest generates requests for BetaGroupsDeleteInstance
func NewBetaGroupsDeleteInstanceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaGroups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBetaGroupsGetInstanceRequest generates requests for BetaGroupsGetInstance
func NewBetaGroupsGetInstanceRequest(server string, id string, params *BetaGroupsGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaGroups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsBetaGroups != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaGroups]", runtime.ParamLocationQuery, *params.FieldsBetaGroups); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBetaTesters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaTesters]", runtime.ParamLocationQuery, *params.FieldsBetaTesters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[apps]", runtime.ParamLocationQuery, *params.FieldsApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[builds]", runtime.ParamLocationQuery, *params.FieldsBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitBetaTesters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[betaTesters]", runtime.ParamLocationQuery, *params.LimitBetaTesters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[builds]", runtime.ParamLocationQuery, *params.LimitBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBetaGroupsUpdateInstanceRequest calls the generic BetaGroupsUpdateInstance builder with application/json body
func NewBetaGroupsUpdateInstanceRequest(server string, id string, body BetaGroupsUpdateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBetaGroupsUpdateInstanceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewBetaGroupsUpdateInstanceRequestWithBody generates requests for BetaGroupsUpdateInstance with any type of body
func NewBetaGroupsUpdateInstanceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaGroups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBetaGroupsAppGetToOneRelatedRequest generates requests for BetaGroupsAppGetToOneRelated
func NewBetaGroupsAppGetToOneRelatedRequest(server string, id string, params *BetaGroupsAppGetToOneRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaGroups/%s/app", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[apps]", runtime.ParamLocationQuery, *params.FieldsApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBetaGroupsBetaTestersGetToManyRelatedRequest generates requests for BetaGroupsBetaTestersGetToManyRelated
func NewBetaGroupsBetaTestersGetToManyRelatedRequest(server string, id string, params *BetaGroupsBetaTestersGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaGroups/%s/betaTesters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsBetaTesters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaTesters]", runtime.ParamLocationQuery, *params.FieldsBetaTesters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBetaGroupsBuildsGetToManyRelatedRequest generates requests for BetaGroupsBuildsGetToManyRelated
func NewBetaGroupsBuildsGetToManyRelatedRequest(server string, id string, params *BetaGroupsBuildsGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaGroups/%s/builds", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[builds]", runtime.ParamLocationQuery, *params.FieldsBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBetaGroupsBetaTestersDeleteToManyRelationshipRequest calls the generic BetaGroupsBetaTestersDeleteToManyRelationship builder with application/json body
func NewBetaGroupsBetaTestersDeleteToManyRelationshipRequest(server string, id string, body BetaGroupsBetaTestersDeleteToManyRelationshipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBetaGroupsBetaTestersDeleteToManyRelationshipRequestWithBody(server, id, "application/json", bodyReader)
}

// NewBetaGroupsBetaTestersDeleteToManyRelationshipRequestWithBody generates requests for BetaGroupsBetaTestersDeleteToManyRelationship with any type of body
func NewBetaGroupsBetaTestersDeleteToManyRelationshipRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaGroups/%s/relationships/betaTesters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBetaGroupsBetaTestersGetToManyRelationshipRequest generates requests for BetaGroupsBetaTestersGetToManyRelationship
func NewBetaGroupsBetaTestersGetToManyRelationshipRequest(server string, id string, params *BetaGroupsBetaTestersGetToManyRelationshipParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaGroups/%s/relationships/betaTesters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBetaGroupsBetaTestersCreateToManyRelationshipRequest calls the generic BetaGroupsBetaTestersCreateToManyRelationship builder with application/json body
func NewBetaGroupsBetaTestersCreateToManyRelationshipRequest(server string, id string, body BetaGroupsBetaTestersCreateToManyRelationshipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBetaGroupsBetaTestersCreateToManyRelationshipRequestWithBody(server, id, "application/json", bodyReader)
}

// NewBetaGroupsBetaTestersCreateToManyRelationshipRequestWithBody generates requests for BetaGroupsBetaTestersCreateToManyRelationship with any type of body
func NewBetaGroupsBetaTestersCreateToManyRelationshipRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaGroups/%s/relationships/betaTesters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBetaGroupsBuildsDeleteToManyRelationshipRequest calls the generic BetaGroupsBuildsDeleteToManyRelationship builder with application/json body
func NewBetaGroupsBuildsDeleteToManyRelationshipRequest(server string, id string, body BetaGroupsBuildsDeleteToManyRelationshipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBetaGroupsBuildsDeleteToManyRelationshipRequestWithBody(server, id, "application/json", bodyReader)
}

// NewBetaGroupsBuildsDeleteToManyRelationshipRequestWithBody generates requests for BetaGroupsBuildsDeleteToManyRelationship with any type of body
func NewBetaGroupsBuildsDeleteToManyRelationshipRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaGroups/%s/relationships/builds", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBetaGroupsBuildsGetToManyRelationshipRequest generates requests for BetaGroupsBuildsGetToManyRelationship
func NewBetaGroupsBuildsGetToManyRelationshipRequest(server string, id string, params *BetaGroupsBuildsGetToManyRelationshipParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaGroups/%s/relationships/builds", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBetaGroupsBuildsCreateToManyRelationshipRequest calls the generic BetaGroupsBuildsCreateToManyRelationship builder with application/json body
func NewBetaGroupsBuildsCreateToManyRelationshipRequest(server string, id string, body BetaGroupsBuildsCreateToManyRelationshipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBetaGroupsBuildsCreateToManyRelationshipRequestWithBody(server, id, "application/json", bodyReader)
}

// NewBetaGroupsBuildsCreateToManyRelationshipRequestWithBody generates requests for BetaGroupsBuildsCreateToManyRelationship with any type of body
func NewBetaGroupsBuildsCreateToManyRelationshipRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaGroups/%s/relationships/builds", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBetaLicenseAgreementsGetCollectionRequest generates requests for BetaLicenseAgreementsGetCollection
func NewBetaLicenseAgreementsGetCollectionRequest(server string, params *BetaLicenseAgreementsGetCollectionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaLicenseAgreements")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FilterApp != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[app]", runtime.ParamLocationQuery, *params.FilterApp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBetaLicenseAgreements != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaLicenseAgreements]", runtime.ParamLocationQuery, *params.FieldsBetaLicenseAgreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[apps]", runtime.ParamLocationQuery, *params.FieldsApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBetaLicenseAgreementsGetInstanceRequest generates requests for BetaLicenseAgreementsGetInstance
func NewBetaLicenseAgreementsGetInstanceRequest(server string, id string, params *BetaLicenseAgreementsGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaLicenseAgreements/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsBetaLicenseAgreements != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaLicenseAgreements]", runtime.ParamLocationQuery, *params.FieldsBetaLicenseAgreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[apps]", runtime.ParamLocationQuery, *params.FieldsApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBetaLicenseAgreementsUpdateInstanceRequest calls the generic BetaLicenseAgreementsUpdateInstance builder with application/json body
func NewBetaLicenseAgreementsUpdateInstanceRequest(server string, id string, body BetaLicenseAgreementsUpdateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBetaLicenseAgreementsUpdateInstanceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewBetaLicenseAgreementsUpdateInstanceRequestWithBody generates requests for BetaLicenseAgreementsUpdateInstance with any type of body
func NewBetaLicenseAgreementsUpdateInstanceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaLicenseAgreements/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBetaLicenseAgreementsAppGetToOneRelatedRequest generates requests for BetaLicenseAgreementsAppGetToOneRelated
func NewBetaLicenseAgreementsAppGetToOneRelatedRequest(server string, id string, params *BetaLicenseAgreementsAppGetToOneRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaLicenseAgreements/%s/app", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[apps]", runtime.ParamLocationQuery, *params.FieldsApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBetaTesterInvitationsCreateInstanceRequest calls the generic BetaTesterInvitationsCreateInstance builder with application/json body
func NewBetaTesterInvitationsCreateInstanceRequest(server string, body BetaTesterInvitationsCreateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBetaTesterInvitationsCreateInstanceRequestWithBody(server, "application/json", bodyReader)
}

// NewBetaTesterInvitationsCreateInstanceRequestWithBody generates requests for BetaTesterInvitationsCreateInstance with any type of body
func NewBetaTesterInvitationsCreateInstanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaTesterInvitations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBetaTestersGetCollectionRequest generates requests for BetaTestersGetCollection
func NewBetaTestersGetCollectionRequest(server string, params *BetaTestersGetCollectionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaTesters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FilterEmail != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[email]", runtime.ParamLocationQuery, *params.FilterEmail); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterFirstName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[firstName]", runtime.ParamLocationQuery, *params.FilterFirstName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterInviteType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[inviteType]", runtime.ParamLocationQuery, *params.FilterInviteType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterLastName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[lastName]", runtime.ParamLocationQuery, *params.FilterLastName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[apps]", runtime.ParamLocationQuery, *params.FilterApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterBetaGroups != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[betaGroups]", runtime.ParamLocationQuery, *params.FilterBetaGroups); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[builds]", runtime.ParamLocationQuery, *params.FilterBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[id]", runtime.ParamLocationQuery, *params.FilterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBetaTesters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaTesters]", runtime.ParamLocationQuery, *params.FieldsBetaTesters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[apps]", runtime.ParamLocationQuery, *params.FieldsApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[builds]", runtime.ParamLocationQuery, *params.FieldsBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBetaGroups != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaGroups]", runtime.ParamLocationQuery, *params.FieldsBetaGroups); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[apps]", runtime.ParamLocationQuery, *params.LimitApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitBetaGroups != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[betaGroups]", runtime.ParamLocationQuery, *params.LimitBetaGroups); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[builds]", runtime.ParamLocationQuery, *params.LimitBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBetaTestersCreateInstanceRequest calls the generic BetaTestersCreateInstance builder with application/json body
func NewBetaTestersCreateInstanceRequest(server string, body BetaTestersCreateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBetaTestersCreateInstanceRequestWithBody(server, "application/json", bodyReader)
}

// NewBetaTestersCreateInstanceRequestWithBody generates requests for BetaTestersCreateInstance with any type of body
func NewBetaTestersCreateInstanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaTesters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBetaTestersDeleteInstanceRequest generates requests for BetaTestersDeleteInstance
func NewBetaTestersDeleteInstanceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaTesters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBetaTestersGetInstanceRequest generates requests for BetaTestersGetInstance
func NewBetaTestersGetInstanceRequest(server string, id string, params *BetaTestersGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaTesters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsBetaTesters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaTesters]", runtime.ParamLocationQuery, *params.FieldsBetaTesters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[apps]", runtime.ParamLocationQuery, *params.FieldsApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[builds]", runtime.ParamLocationQuery, *params.FieldsBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBetaGroups != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaGroups]", runtime.ParamLocationQuery, *params.FieldsBetaGroups); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[apps]", runtime.ParamLocationQuery, *params.LimitApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitBetaGroups != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[betaGroups]", runtime.ParamLocationQuery, *params.LimitBetaGroups); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[builds]", runtime.ParamLocationQuery, *params.LimitBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBetaTestersAppsGetToManyRelatedRequest generates requests for BetaTestersAppsGetToManyRelated
func NewBetaTestersAppsGetToManyRelatedRequest(server string, id string, params *BetaTestersAppsGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaTesters/%s/apps", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[apps]", runtime.ParamLocationQuery, *params.FieldsApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBetaTestersBetaGroupsGetToManyRelatedRequest generates requests for BetaTestersBetaGroupsGetToManyRelated
func NewBetaTestersBetaGroupsGetToManyRelatedRequest(server string, id string, params *BetaTestersBetaGroupsGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaTesters/%s/betaGroups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsBetaGroups != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaGroups]", runtime.ParamLocationQuery, *params.FieldsBetaGroups); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBetaTestersBuildsGetToManyRelatedRequest generates requests for BetaTestersBuildsGetToManyRelated
func NewBetaTestersBuildsGetToManyRelatedRequest(server string, id string, params *BetaTestersBuildsGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaTesters/%s/builds", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[builds]", runtime.ParamLocationQuery, *params.FieldsBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBetaTestersAppsDeleteToManyRelationshipRequest calls the generic BetaTestersAppsDeleteToManyRelationship builder with application/json body
func NewBetaTestersAppsDeleteToManyRelationshipRequest(server string, id string, body BetaTestersAppsDeleteToManyRelationshipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBetaTestersAppsDeleteToManyRelationshipRequestWithBody(server, id, "application/json", bodyReader)
}

// NewBetaTestersAppsDeleteToManyRelationshipRequestWithBody generates requests for BetaTestersAppsDeleteToManyRelationship with any type of body
func NewBetaTestersAppsDeleteToManyRelationshipRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaTesters/%s/relationships/apps", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBetaTestersAppsGetToManyRelationshipRequest generates requests for BetaTestersAppsGetToManyRelationship
func NewBetaTestersAppsGetToManyRelationshipRequest(server string, id string, params *BetaTestersAppsGetToManyRelationshipParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaTesters/%s/relationships/apps", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBetaTestersBetaGroupsDeleteToManyRelationshipRequest calls the generic BetaTestersBetaGroupsDeleteToManyRelationship builder with application/json body
func NewBetaTestersBetaGroupsDeleteToManyRelationshipRequest(server string, id string, body BetaTestersBetaGroupsDeleteToManyRelationshipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBetaTestersBetaGroupsDeleteToManyRelationshipRequestWithBody(server, id, "application/json", bodyReader)
}

// NewBetaTestersBetaGroupsDeleteToManyRelationshipRequestWithBody generates requests for BetaTestersBetaGroupsDeleteToManyRelationship with any type of body
func NewBetaTestersBetaGroupsDeleteToManyRelationshipRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaTesters/%s/relationships/betaGroups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBetaTestersBetaGroupsGetToManyRelationshipRequest generates requests for BetaTestersBetaGroupsGetToManyRelationship
func NewBetaTestersBetaGroupsGetToManyRelationshipRequest(server string, id string, params *BetaTestersBetaGroupsGetToManyRelationshipParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaTesters/%s/relationships/betaGroups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBetaTestersBetaGroupsCreateToManyRelationshipRequest calls the generic BetaTestersBetaGroupsCreateToManyRelationship builder with application/json body
func NewBetaTestersBetaGroupsCreateToManyRelationshipRequest(server string, id string, body BetaTestersBetaGroupsCreateToManyRelationshipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBetaTestersBetaGroupsCreateToManyRelationshipRequestWithBody(server, id, "application/json", bodyReader)
}

// NewBetaTestersBetaGroupsCreateToManyRelationshipRequestWithBody generates requests for BetaTestersBetaGroupsCreateToManyRelationship with any type of body
func NewBetaTestersBetaGroupsCreateToManyRelationshipRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaTesters/%s/relationships/betaGroups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBetaTestersBuildsDeleteToManyRelationshipRequest calls the generic BetaTestersBuildsDeleteToManyRelationship builder with application/json body
func NewBetaTestersBuildsDeleteToManyRelationshipRequest(server string, id string, body BetaTestersBuildsDeleteToManyRelationshipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBetaTestersBuildsDeleteToManyRelationshipRequestWithBody(server, id, "application/json", bodyReader)
}

// NewBetaTestersBuildsDeleteToManyRelationshipRequestWithBody generates requests for BetaTestersBuildsDeleteToManyRelationship with any type of body
func NewBetaTestersBuildsDeleteToManyRelationshipRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaTesters/%s/relationships/builds", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBetaTestersBuildsGetToManyRelationshipRequest generates requests for BetaTestersBuildsGetToManyRelationship
func NewBetaTestersBuildsGetToManyRelationshipRequest(server string, id string, params *BetaTestersBuildsGetToManyRelationshipParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaTesters/%s/relationships/builds", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBetaTestersBuildsCreateToManyRelationshipRequest calls the generic BetaTestersBuildsCreateToManyRelationship builder with application/json body
func NewBetaTestersBuildsCreateToManyRelationshipRequest(server string, id string, body BetaTestersBuildsCreateToManyRelationshipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBetaTestersBuildsCreateToManyRelationshipRequestWithBody(server, id, "application/json", bodyReader)
}

// NewBetaTestersBuildsCreateToManyRelationshipRequestWithBody generates requests for BetaTestersBuildsCreateToManyRelationship with any type of body
func NewBetaTestersBuildsCreateToManyRelationshipRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/betaTesters/%s/relationships/builds", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBuildBetaDetailsGetCollectionRequest generates requests for BuildBetaDetailsGetCollection
func NewBuildBetaDetailsGetCollectionRequest(server string, params *BuildBetaDetailsGetCollectionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/buildBetaDetails")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FilterBuild != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[build]", runtime.ParamLocationQuery, *params.FilterBuild); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[id]", runtime.ParamLocationQuery, *params.FilterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBuildBetaDetails != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[buildBetaDetails]", runtime.ParamLocationQuery, *params.FieldsBuildBetaDetails); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[builds]", runtime.ParamLocationQuery, *params.FieldsBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBuildBetaDetailsGetInstanceRequest generates requests for BuildBetaDetailsGetInstance
func NewBuildBetaDetailsGetInstanceRequest(server string, id string, params *BuildBetaDetailsGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/buildBetaDetails/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsBuildBetaDetails != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[buildBetaDetails]", runtime.ParamLocationQuery, *params.FieldsBuildBetaDetails); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[builds]", runtime.ParamLocationQuery, *params.FieldsBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBuildBetaDetailsUpdateInstanceRequest calls the generic BuildBetaDetailsUpdateInstance builder with application/json body
func NewBuildBetaDetailsUpdateInstanceRequest(server string, id string, body BuildBetaDetailsUpdateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBuildBetaDetailsUpdateInstanceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewBuildBetaDetailsUpdateInstanceRequestWithBody generates requests for BuildBetaDetailsUpdateInstance with any type of body
func NewBuildBetaDetailsUpdateInstanceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/buildBetaDetails/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBuildBetaDetailsBuildGetToOneRelatedRequest generates requests for BuildBetaDetailsBuildGetToOneRelated
func NewBuildBetaDetailsBuildGetToOneRelatedRequest(server string, id string, params *BuildBetaDetailsBuildGetToOneRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/buildBetaDetails/%s/build", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[builds]", runtime.ParamLocationQuery, *params.FieldsBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBuildBetaNotificationsCreateInstanceRequest calls the generic BuildBetaNotificationsCreateInstance builder with application/json body
func NewBuildBetaNotificationsCreateInstanceRequest(server string, body BuildBetaNotificationsCreateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBuildBetaNotificationsCreateInstanceRequestWithBody(server, "application/json", bodyReader)
}

// NewBuildBetaNotificationsCreateInstanceRequestWithBody generates requests for BuildBetaNotificationsCreateInstance with any type of body
func NewBuildBetaNotificationsCreateInstanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/buildBetaNotifications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBuildsGetCollectionRequest generates requests for BuildsGetCollection
func NewBuildsGetCollectionRequest(server string, params *BuildsGetCollectionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/builds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FilterBetaAppReviewSubmissionBetaReviewState != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[betaAppReviewSubmission.betaReviewState]", runtime.ParamLocationQuery, *params.FilterBetaAppReviewSubmissionBetaReviewState); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterBuildAudienceType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[buildAudienceType]", runtime.ParamLocationQuery, *params.FilterBuildAudienceType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterExpired != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[expired]", runtime.ParamLocationQuery, *params.FilterExpired); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterPreReleaseVersionPlatform != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[preReleaseVersion.platform]", runtime.ParamLocationQuery, *params.FilterPreReleaseVersionPlatform); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterPreReleaseVersionVersion != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[preReleaseVersion.version]", runtime.ParamLocationQuery, *params.FilterPreReleaseVersionVersion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterProcessingState != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[processingState]", runtime.ParamLocationQuery, *params.FilterProcessingState); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterUsesNonExemptEncryption != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[usesNonExemptEncryption]", runtime.ParamLocationQuery, *params.FilterUsesNonExemptEncryption); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterVersion != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[version]", runtime.ParamLocationQuery, *params.FilterVersion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterApp != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[app]", runtime.ParamLocationQuery, *params.FilterApp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterAppStoreVersion != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[appStoreVersion]", runtime.ParamLocationQuery, *params.FilterAppStoreVersion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterBetaGroups != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[betaGroups]", runtime.ParamLocationQuery, *params.FilterBetaGroups); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterPreReleaseVersion != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[preReleaseVersion]", runtime.ParamLocationQuery, *params.FilterPreReleaseVersion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[id]", runtime.ParamLocationQuery, *params.FilterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[builds]", runtime.ParamLocationQuery, *params.FieldsBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsDiagnosticSignatures != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[diagnosticSignatures]", runtime.ParamLocationQuery, *params.FieldsDiagnosticSignatures); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBuildIcons != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[buildIcons]", runtime.ParamLocationQuery, *params.FieldsBuildIcons); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBuildBetaDetails != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[buildBetaDetails]", runtime.ParamLocationQuery, *params.FieldsBuildBetaDetails); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBetaAppReviewSubmissions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaAppReviewSubmissions]", runtime.ParamLocationQuery, *params.FieldsBetaAppReviewSubmissions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBetaTesters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaTesters]", runtime.ParamLocationQuery, *params.FieldsBetaTesters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAppStoreVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appStoreVersions]", runtime.ParamLocationQuery, *params.FieldsAppStoreVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBetaBuildLocalizations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaBuildLocalizations]", runtime.ParamLocationQuery, *params.FieldsBetaBuildLocalizations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsPreReleaseVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[preReleaseVersions]", runtime.ParamLocationQuery, *params.FieldsPreReleaseVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAppEncryptionDeclarations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appEncryptionDeclarations]", runtime.ParamLocationQuery, *params.FieldsAppEncryptionDeclarations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[apps]", runtime.ParamLocationQuery, *params.FieldsApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsPerfPowerMetrics != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[perfPowerMetrics]", runtime.ParamLocationQuery, *params.FieldsPerfPowerMetrics); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitBetaBuildLocalizations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[betaBuildLocalizations]", runtime.ParamLocationQuery, *params.LimitBetaBuildLocalizations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitIcons != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[icons]", runtime.ParamLocationQuery, *params.LimitIcons); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitIndividualTesters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[individualTesters]", runtime.ParamLocationQuery, *params.LimitIndividualTesters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBuildsGetInstanceRequest generates requests for BuildsGetInstance
func NewBuildsGetInstanceRequest(server string, id string, params *BuildsGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/builds/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[builds]", runtime.ParamLocationQuery, *params.FieldsBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsDiagnosticSignatures != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[diagnosticSignatures]", runtime.ParamLocationQuery, *params.FieldsDiagnosticSignatures); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBuildIcons != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[buildIcons]", runtime.ParamLocationQuery, *params.FieldsBuildIcons); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBuildBetaDetails != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[buildBetaDetails]", runtime.ParamLocationQuery, *params.FieldsBuildBetaDetails); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBetaAppReviewSubmissions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaAppReviewSubmissions]", runtime.ParamLocationQuery, *params.FieldsBetaAppReviewSubmissions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBetaTesters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaTesters]", runtime.ParamLocationQuery, *params.FieldsBetaTesters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAppStoreVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appStoreVersions]", runtime.ParamLocationQuery, *params.FieldsAppStoreVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBetaBuildLocalizations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaBuildLocalizations]", runtime.ParamLocationQuery, *params.FieldsBetaBuildLocalizations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsPreReleaseVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[preReleaseVersions]", runtime.ParamLocationQuery, *params.FieldsPreReleaseVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAppEncryptionDeclarations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appEncryptionDeclarations]", runtime.ParamLocationQuery, *params.FieldsAppEncryptionDeclarations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[apps]", runtime.ParamLocationQuery, *params.FieldsApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsPerfPowerMetrics != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[perfPowerMetrics]", runtime.ParamLocationQuery, *params.FieldsPerfPowerMetrics); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitBetaBuildLocalizations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[betaBuildLocalizations]", runtime.ParamLocationQuery, *params.LimitBetaBuildLocalizations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitIcons != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[icons]", runtime.ParamLocationQuery, *params.LimitIcons); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitIndividualTesters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[individualTesters]", runtime.ParamLocationQuery, *params.LimitIndividualTesters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBuildsUpdateInstanceRequest calls the generic BuildsUpdateInstance builder with application/json body
func NewBuildsUpdateInstanceRequest(server string, id string, body BuildsUpdateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBuildsUpdateInstanceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewBuildsUpdateInstanceRequestWithBody generates requests for BuildsUpdateInstance with any type of body
func NewBuildsUpdateInstanceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/builds/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBuildsAppGetToOneRelatedRequest generates requests for BuildsAppGetToOneRelated
func NewBuildsAppGetToOneRelatedRequest(server string, id string, params *BuildsAppGetToOneRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/builds/%s/app", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[apps]", runtime.ParamLocationQuery, *params.FieldsApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBuildsAppEncryptionDeclarationGetToOneRelatedRequest generates requests for BuildsAppEncryptionDeclarationGetToOneRelated
func NewBuildsAppEncryptionDeclarationGetToOneRelatedRequest(server string, id string, params *BuildsAppEncryptionDeclarationGetToOneRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/builds/%s/appEncryptionDeclaration", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsAppEncryptionDeclarations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appEncryptionDeclarations]", runtime.ParamLocationQuery, *params.FieldsAppEncryptionDeclarations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBuildsAppStoreVersionGetToOneRelatedRequest generates requests for BuildsAppStoreVersionGetToOneRelated
func NewBuildsAppStoreVersionGetToOneRelatedRequest(server string, id string, params *BuildsAppStoreVersionGetToOneRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/builds/%s/appStoreVersion", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsAppStoreVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appStoreVersions]", runtime.ParamLocationQuery, *params.FieldsAppStoreVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBuildsBetaAppReviewSubmissionGetToOneRelatedRequest generates requests for BuildsBetaAppReviewSubmissionGetToOneRelated
func NewBuildsBetaAppReviewSubmissionGetToOneRelatedRequest(server string, id string, params *BuildsBetaAppReviewSubmissionGetToOneRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/builds/%s/betaAppReviewSubmission", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsBetaAppReviewSubmissions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaAppReviewSubmissions]", runtime.ParamLocationQuery, *params.FieldsBetaAppReviewSubmissions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBuildsBetaBuildLocalizationsGetToManyRelatedRequest generates requests for BuildsBetaBuildLocalizationsGetToManyRelated
func NewBuildsBetaBuildLocalizationsGetToManyRelatedRequest(server string, id string, params *BuildsBetaBuildLocalizationsGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/builds/%s/betaBuildLocalizations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsBetaBuildLocalizations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaBuildLocalizations]", runtime.ParamLocationQuery, *params.FieldsBetaBuildLocalizations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBuildsBuildBetaDetailGetToOneRelatedRequest generates requests for BuildsBuildBetaDetailGetToOneRelated
func NewBuildsBuildBetaDetailGetToOneRelatedRequest(server string, id string, params *BuildsBuildBetaDetailGetToOneRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/builds/%s/buildBetaDetail", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsBuildBetaDetails != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[buildBetaDetails]", runtime.ParamLocationQuery, *params.FieldsBuildBetaDetails); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBuildsDiagnosticSignaturesGetToManyRelatedRequest generates requests for BuildsDiagnosticSignaturesGetToManyRelated
func NewBuildsDiagnosticSignaturesGetToManyRelatedRequest(server string, id string, params *BuildsDiagnosticSignaturesGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/builds/%s/diagnosticSignatures", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FilterDiagnosticType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[diagnosticType]", runtime.ParamLocationQuery, *params.FilterDiagnosticType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsDiagnosticSignatures != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[diagnosticSignatures]", runtime.ParamLocationQuery, *params.FieldsDiagnosticSignatures); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBuildsIconsGetToManyRelatedRequest generates requests for BuildsIconsGetToManyRelated
func NewBuildsIconsGetToManyRelatedRequest(server string, id string, params *BuildsIconsGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/builds/%s/icons", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsBuildIcons != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[buildIcons]", runtime.ParamLocationQuery, *params.FieldsBuildIcons); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBuildsIndividualTestersGetToManyRelatedRequest generates requests for BuildsIndividualTestersGetToManyRelated
func NewBuildsIndividualTestersGetToManyRelatedRequest(server string, id string, params *BuildsIndividualTestersGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/builds/%s/individualTesters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsBetaTesters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaTesters]", runtime.ParamLocationQuery, *params.FieldsBetaTesters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBuildsPerfPowerMetricsGetToManyRelatedRequest generates requests for BuildsPerfPowerMetricsGetToManyRelated
func NewBuildsPerfPowerMetricsGetToManyRelatedRequest(server string, id string, params *BuildsPerfPowerMetricsGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/builds/%s/perfPowerMetrics", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FilterDeviceType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[deviceType]", runtime.ParamLocationQuery, *params.FilterDeviceType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterMetricType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[metricType]", runtime.ParamLocationQuery, *params.FilterMetricType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterPlatform != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[platform]", runtime.ParamLocationQuery, *params.FilterPlatform); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBuildsPreReleaseVersionGetToOneRelatedRequest generates requests for BuildsPreReleaseVersionGetToOneRelated
func NewBuildsPreReleaseVersionGetToOneRelatedRequest(server string, id string, params *BuildsPreReleaseVersionGetToOneRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/builds/%s/preReleaseVersion", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsPreReleaseVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[preReleaseVersions]", runtime.ParamLocationQuery, *params.FieldsPreReleaseVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBuildsAppEncryptionDeclarationGetToOneRelationshipRequest generates requests for BuildsAppEncryptionDeclarationGetToOneRelationship
func NewBuildsAppEncryptionDeclarationGetToOneRelationshipRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/builds/%s/relationships/appEncryptionDeclaration", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBuildsAppEncryptionDeclarationUpdateToOneRelationshipRequest calls the generic BuildsAppEncryptionDeclarationUpdateToOneRelationship builder with application/json body
func NewBuildsAppEncryptionDeclarationUpdateToOneRelationshipRequest(server string, id string, body BuildsAppEncryptionDeclarationUpdateToOneRelationshipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBuildsAppEncryptionDeclarationUpdateToOneRelationshipRequestWithBody(server, id, "application/json", bodyReader)
}

// NewBuildsAppEncryptionDeclarationUpdateToOneRelationshipRequestWithBody generates requests for BuildsAppEncryptionDeclarationUpdateToOneRelationship with any type of body
func NewBuildsAppEncryptionDeclarationUpdateToOneRelationshipRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/builds/%s/relationships/appEncryptionDeclaration", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBuildsBetaGroupsDeleteToManyRelationshipRequest calls the generic BuildsBetaGroupsDeleteToManyRelationship builder with application/json body
func NewBuildsBetaGroupsDeleteToManyRelationshipRequest(server string, id string, body BuildsBetaGroupsDeleteToManyRelationshipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBuildsBetaGroupsDeleteToManyRelationshipRequestWithBody(server, id, "application/json", bodyReader)
}

// NewBuildsBetaGroupsDeleteToManyRelationshipRequestWithBody generates requests for BuildsBetaGroupsDeleteToManyRelationship with any type of body
func NewBuildsBetaGroupsDeleteToManyRelationshipRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/builds/%s/relationships/betaGroups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBuildsBetaGroupsCreateToManyRelationshipRequest calls the generic BuildsBetaGroupsCreateToManyRelationship builder with application/json body
func NewBuildsBetaGroupsCreateToManyRelationshipRequest(server string, id string, body BuildsBetaGroupsCreateToManyRelationshipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBuildsBetaGroupsCreateToManyRelationshipRequestWithBody(server, id, "application/json", bodyReader)
}

// NewBuildsBetaGroupsCreateToManyRelationshipRequestWithBody generates requests for BuildsBetaGroupsCreateToManyRelationship with any type of body
func NewBuildsBetaGroupsCreateToManyRelationshipRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/builds/%s/relationships/betaGroups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBuildsIndividualTestersDeleteToManyRelationshipRequest calls the generic BuildsIndividualTestersDeleteToManyRelationship builder with application/json body
func NewBuildsIndividualTestersDeleteToManyRelationshipRequest(server string, id string, body BuildsIndividualTestersDeleteToManyRelationshipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBuildsIndividualTestersDeleteToManyRelationshipRequestWithBody(server, id, "application/json", bodyReader)
}

// NewBuildsIndividualTestersDeleteToManyRelationshipRequestWithBody generates requests for BuildsIndividualTestersDeleteToManyRelationship with any type of body
func NewBuildsIndividualTestersDeleteToManyRelationshipRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/builds/%s/relationships/individualTesters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBuildsIndividualTestersGetToManyRelationshipRequest generates requests for BuildsIndividualTestersGetToManyRelationship
func NewBuildsIndividualTestersGetToManyRelationshipRequest(server string, id string, params *BuildsIndividualTestersGetToManyRelationshipParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/builds/%s/relationships/individualTesters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBuildsIndividualTestersCreateToManyRelationshipRequest calls the generic BuildsIndividualTestersCreateToManyRelationship builder with application/json body
func NewBuildsIndividualTestersCreateToManyRelationshipRequest(server string, id string, body BuildsIndividualTestersCreateToManyRelationshipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBuildsIndividualTestersCreateToManyRelationshipRequestWithBody(server, id, "application/json", bodyReader)
}

// NewBuildsIndividualTestersCreateToManyRelationshipRequestWithBody generates requests for BuildsIndividualTestersCreateToManyRelationship with any type of body
func NewBuildsIndividualTestersCreateToManyRelationshipRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/builds/%s/relationships/individualTesters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBundleIdCapabilitiesCreateInstanceRequest calls the generic BundleIdCapabilitiesCreateInstance builder with application/json body
func NewBundleIdCapabilitiesCreateInstanceRequest(server string, body BundleIdCapabilitiesCreateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBundleIdCapabilitiesCreateInstanceRequestWithBody(server, "application/json", bodyReader)
}

// NewBundleIdCapabilitiesCreateInstanceRequestWithBody generates requests for BundleIdCapabilitiesCreateInstance with any type of body
func NewBundleIdCapabilitiesCreateInstanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/bundleIdCapabilities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBundleIdCapabilitiesDeleteInstanceRequest generates requests for BundleIdCapabilitiesDeleteInstance
func NewBundleIdCapabilitiesDeleteInstanceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/bundleIdCapabilities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBundleIdCapabilitiesUpdateInstanceRequest calls the generic BundleIdCapabilitiesUpdateInstance builder with application/json body
func NewBundleIdCapabilitiesUpdateInstanceRequest(server string, id string, body BundleIdCapabilitiesUpdateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBundleIdCapabilitiesUpdateInstanceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewBundleIdCapabilitiesUpdateInstanceRequestWithBody generates requests for BundleIdCapabilitiesUpdateInstance with any type of body
func NewBundleIdCapabilitiesUpdateInstanceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/bundleIdCapabilities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBundleIdsGetCollectionRequest generates requests for BundleIdsGetCollection
func NewBundleIdsGetCollectionRequest(server string, params *BundleIdsGetCollectionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/bundleIds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FilterIdentifier != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[identifier]", runtime.ParamLocationQuery, *params.FilterIdentifier); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterPlatform != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[platform]", runtime.ParamLocationQuery, *params.FilterPlatform); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSeedId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[seedId]", runtime.ParamLocationQuery, *params.FilterSeedId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[id]", runtime.ParamLocationQuery, *params.FilterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBundleIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[bundleIds]", runtime.ParamLocationQuery, *params.FieldsBundleIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBundleIdCapabilities != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[bundleIdCapabilities]", runtime.ParamLocationQuery, *params.FieldsBundleIdCapabilities); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsProfiles != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[profiles]", runtime.ParamLocationQuery, *params.FieldsProfiles); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[apps]", runtime.ParamLocationQuery, *params.FieldsApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitBundleIdCapabilities != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[bundleIdCapabilities]", runtime.ParamLocationQuery, *params.LimitBundleIdCapabilities); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitProfiles != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[profiles]", runtime.ParamLocationQuery, *params.LimitProfiles); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBundleIdsCreateInstanceRequest calls the generic BundleIdsCreateInstance builder with application/json body
func NewBundleIdsCreateInstanceRequest(server string, body BundleIdsCreateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBundleIdsCreateInstanceRequestWithBody(server, "application/json", bodyReader)
}

// NewBundleIdsCreateInstanceRequestWithBody generates requests for BundleIdsCreateInstance with any type of body
func NewBundleIdsCreateInstanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/bundleIds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBundleIdsDeleteInstanceRequest generates requests for BundleIdsDeleteInstance
func NewBundleIdsDeleteInstanceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/bundleIds/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBundleIdsGetInstanceRequest generates requests for BundleIdsGetInstance
func NewBundleIdsGetInstanceRequest(server string, id string, params *BundleIdsGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/bundleIds/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsBundleIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[bundleIds]", runtime.ParamLocationQuery, *params.FieldsBundleIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBundleIdCapabilities != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[bundleIdCapabilities]", runtime.ParamLocationQuery, *params.FieldsBundleIdCapabilities); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsProfiles != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[profiles]", runtime.ParamLocationQuery, *params.FieldsProfiles); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[apps]", runtime.ParamLocationQuery, *params.FieldsApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitBundleIdCapabilities != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[bundleIdCapabilities]", runtime.ParamLocationQuery, *params.LimitBundleIdCapabilities); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitProfiles != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[profiles]", runtime.ParamLocationQuery, *params.LimitProfiles); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBundleIdsUpdateInstanceRequest calls the generic BundleIdsUpdateInstance builder with application/json body
func NewBundleIdsUpdateInstanceRequest(server string, id string, body BundleIdsUpdateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBundleIdsUpdateInstanceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewBundleIdsUpdateInstanceRequestWithBody generates requests for BundleIdsUpdateInstance with any type of body
func NewBundleIdsUpdateInstanceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/bundleIds/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBundleIdsAppGetToOneRelatedRequest generates requests for BundleIdsAppGetToOneRelated
func NewBundleIdsAppGetToOneRelatedRequest(server string, id string, params *BundleIdsAppGetToOneRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/bundleIds/%s/app", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[apps]", runtime.ParamLocationQuery, *params.FieldsApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBundleIdsBundleIdCapabilitiesGetToManyRelatedRequest generates requests for BundleIdsBundleIdCapabilitiesGetToManyRelated
func NewBundleIdsBundleIdCapabilitiesGetToManyRelatedRequest(server string, id string, params *BundleIdsBundleIdCapabilitiesGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/bundleIds/%s/bundleIdCapabilities", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsBundleIdCapabilities != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[bundleIdCapabilities]", runtime.ParamLocationQuery, *params.FieldsBundleIdCapabilities); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBundleIdsProfilesGetToManyRelatedRequest generates requests for BundleIdsProfilesGetToManyRelated
func NewBundleIdsProfilesGetToManyRelatedRequest(server string, id string, params *BundleIdsProfilesGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/bundleIds/%s/profiles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsProfiles != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[profiles]", runtime.ParamLocationQuery, *params.FieldsProfiles); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCertificatesGetCollectionRequest generates requests for CertificatesGetCollection
func NewCertificatesGetCollectionRequest(server string, params *CertificatesGetCollectionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/certificates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FilterCertificateType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[certificateType]", runtime.ParamLocationQuery, *params.FilterCertificateType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterDisplayName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[displayName]", runtime.ParamLocationQuery, *params.FilterDisplayName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSerialNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[serialNumber]", runtime.ParamLocationQuery, *params.FilterSerialNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[id]", runtime.ParamLocationQuery, *params.FilterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsCertificates != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[certificates]", runtime.ParamLocationQuery, *params.FieldsCertificates); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCertificatesCreateInstanceRequest calls the generic CertificatesCreateInstance builder with application/json body
func NewCertificatesCreateInstanceRequest(server string, body CertificatesCreateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCertificatesCreateInstanceRequestWithBody(server, "application/json", bodyReader)
}

// NewCertificatesCreateInstanceRequestWithBody generates requests for CertificatesCreateInstance with any type of body
func NewCertificatesCreateInstanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/certificates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCertificatesDeleteInstanceRequest generates requests for CertificatesDeleteInstance
func NewCertificatesDeleteInstanceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/certificates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCertificatesGetInstanceRequest generates requests for CertificatesGetInstance
func NewCertificatesGetInstanceRequest(server string, id string, params *CertificatesGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/certificates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsCertificates != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[certificates]", runtime.ParamLocationQuery, *params.FieldsCertificates); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCiArtifactsGetInstanceRequest generates requests for CiArtifactsGetInstance
func NewCiArtifactsGetInstanceRequest(server string, id string, params *CiArtifactsGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ciArtifacts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsCiArtifacts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ciArtifacts]", runtime.ParamLocationQuery, *params.FieldsCiArtifacts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCiBuildActionsGetInstanceRequest generates requests for CiBuildActionsGetInstance
func NewCiBuildActionsGetInstanceRequest(server string, id string, params *CiBuildActionsGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ciBuildActions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsCiBuildActions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ciBuildActions]", runtime.ParamLocationQuery, *params.FieldsCiBuildActions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsCiIssues != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ciIssues]", runtime.ParamLocationQuery, *params.FieldsCiIssues); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsCiBuildRuns != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ciBuildRuns]", runtime.ParamLocationQuery, *params.FieldsCiBuildRuns); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsCiTestResults != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ciTestResults]", runtime.ParamLocationQuery, *params.FieldsCiTestResults); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsCiArtifacts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ciArtifacts]", runtime.ParamLocationQuery, *params.FieldsCiArtifacts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCiBuildActionsArtifactsGetToManyRelatedRequest generates requests for CiBuildActionsArtifactsGetToManyRelated
func NewCiBuildActionsArtifactsGetToManyRelatedRequest(server string, id string, params *CiBuildActionsArtifactsGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ciBuildActions/%s/artifacts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsCiArtifacts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ciArtifacts]", runtime.ParamLocationQuery, *params.FieldsCiArtifacts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCiBuildActionsBuildRunGetToOneRelatedRequest generates requests for CiBuildActionsBuildRunGetToOneRelated
func NewCiBuildActionsBuildRunGetToOneRelatedRequest(server string, id string, params *CiBuildActionsBuildRunGetToOneRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ciBuildActions/%s/buildRun", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsCiBuildRuns != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ciBuildRuns]", runtime.ParamLocationQuery, *params.FieldsCiBuildRuns); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[builds]", runtime.ParamLocationQuery, *params.FieldsBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[builds]", runtime.ParamLocationQuery, *params.LimitBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCiBuildActionsIssuesGetToManyRelatedRequest generates requests for CiBuildActionsIssuesGetToManyRelated
func NewCiBuildActionsIssuesGetToManyRelatedRequest(server string, id string, params *CiBuildActionsIssuesGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ciBuildActions/%s/issues", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsCiIssues != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ciIssues]", runtime.ParamLocationQuery, *params.FieldsCiIssues); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCiBuildActionsTestResultsGetToManyRelatedRequest generates requests for CiBuildActionsTestResultsGetToManyRelated
func NewCiBuildActionsTestResultsGetToManyRelatedRequest(server string, id string, params *CiBuildActionsTestResultsGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ciBuildActions/%s/testResults", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsCiTestResults != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ciTestResults]", runtime.ParamLocationQuery, *params.FieldsCiTestResults); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCiBuildRunsCreateInstanceRequest calls the generic CiBuildRunsCreateInstance builder with application/json body
func NewCiBuildRunsCreateInstanceRequest(server string, body CiBuildRunsCreateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCiBuildRunsCreateInstanceRequestWithBody(server, "application/json", bodyReader)
}

// NewCiBuildRunsCreateInstanceRequestWithBody generates requests for CiBuildRunsCreateInstance with any type of body
func NewCiBuildRunsCreateInstanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ciBuildRuns")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCiBuildRunsGetInstanceRequest generates requests for CiBuildRunsGetInstance
func NewCiBuildRunsGetInstanceRequest(server string, id string, params *CiBuildRunsGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ciBuildRuns/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsCiBuildRuns != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ciBuildRuns]", runtime.ParamLocationQuery, *params.FieldsCiBuildRuns); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsCiBuildActions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ciBuildActions]", runtime.ParamLocationQuery, *params.FieldsCiBuildActions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[builds]", runtime.ParamLocationQuery, *params.FieldsBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[builds]", runtime.ParamLocationQuery, *params.LimitBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCiBuildRunsActionsGetToManyRelatedRequest generates requests for CiBuildRunsActionsGetToManyRelated
func NewCiBuildRunsActionsGetToManyRelatedRequest(server string, id string, params *CiBuildRunsActionsGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ciBuildRuns/%s/actions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsCiBuildActions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ciBuildActions]", runtime.ParamLocationQuery, *params.FieldsCiBuildActions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCiBuildRunsBuildsGetToManyRelatedRequest generates requests for CiBuildRunsBuildsGetToManyRelated
func NewCiBuildRunsBuildsGetToManyRelatedRequest(server string, id string, params *CiBuildRunsBuildsGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ciBuildRuns/%s/builds", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FilterBetaAppReviewSubmissionBetaReviewState != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[betaAppReviewSubmission.betaReviewState]", runtime.ParamLocationQuery, *params.FilterBetaAppReviewSubmissionBetaReviewState); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterBuildAudienceType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[buildAudienceType]", runtime.ParamLocationQuery, *params.FilterBuildAudienceType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterExpired != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[expired]", runtime.ParamLocationQuery, *params.FilterExpired); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterPreReleaseVersionPlatform != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[preReleaseVersion.platform]", runtime.ParamLocationQuery, *params.FilterPreReleaseVersionPlatform); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterPreReleaseVersionVersion != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[preReleaseVersion.version]", runtime.ParamLocationQuery, *params.FilterPreReleaseVersionVersion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterProcessingState != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[processingState]", runtime.ParamLocationQuery, *params.FilterProcessingState); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterUsesNonExemptEncryption != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[usesNonExemptEncryption]", runtime.ParamLocationQuery, *params.FilterUsesNonExemptEncryption); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterVersion != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[version]", runtime.ParamLocationQuery, *params.FilterVersion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterApp != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[app]", runtime.ParamLocationQuery, *params.FilterApp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterAppStoreVersion != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[appStoreVersion]", runtime.ParamLocationQuery, *params.FilterAppStoreVersion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterBetaGroups != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[betaGroups]", runtime.ParamLocationQuery, *params.FilterBetaGroups); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterPreReleaseVersion != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[preReleaseVersion]", runtime.ParamLocationQuery, *params.FilterPreReleaseVersion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[id]", runtime.ParamLocationQuery, *params.FilterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBuildIcons != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[buildIcons]", runtime.ParamLocationQuery, *params.FieldsBuildIcons); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBetaTesters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaTesters]", runtime.ParamLocationQuery, *params.FieldsBetaTesters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBetaBuildLocalizations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaBuildLocalizations]", runtime.ParamLocationQuery, *params.FieldsBetaBuildLocalizations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[builds]", runtime.ParamLocationQuery, *params.FieldsBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitIndividualTesters != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[individualTesters]", runtime.ParamLocationQuery, *params.LimitIndividualTesters); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitBetaBuildLocalizations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[betaBuildLocalizations]", runtime.ParamLocationQuery, *params.LimitBetaBuildLocalizations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitIcons != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[icons]", runtime.ParamLocationQuery, *params.LimitIcons); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCiIssuesGetInstanceRequest generates requests for CiIssuesGetInstance
func NewCiIssuesGetInstanceRequest(server string, id string, params *CiIssuesGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ciIssues/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsCiIssues != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ciIssues]", runtime.ParamLocationQuery, *params.FieldsCiIssues); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCiMacOsVersionsGetCollectionRequest generates requests for CiMacOsVersionsGetCollection
func NewCiMacOsVersionsGetCollectionRequest(server string, params *CiMacOsVersionsGetCollectionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ciMacOsVersions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsCiMacOsVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ciMacOsVersions]", runtime.ParamLocationQuery, *params.FieldsCiMacOsVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsCiXcodeVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ciXcodeVersions]", runtime.ParamLocationQuery, *params.FieldsCiXcodeVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitXcodeVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[xcodeVersions]", runtime.ParamLocationQuery, *params.LimitXcodeVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCiMacOsVersionsGetInstanceRequest generates requests for CiMacOsVersionsGetInstance
func NewCiMacOsVersionsGetInstanceRequest(server string, id string, params *CiMacOsVersionsGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ciMacOsVersions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsCiMacOsVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ciMacOsVersions]", runtime.ParamLocationQuery, *params.FieldsCiMacOsVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsCiXcodeVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ciXcodeVersions]", runtime.ParamLocationQuery, *params.FieldsCiXcodeVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitXcodeVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[xcodeVersions]", runtime.ParamLocationQuery, *params.LimitXcodeVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCiMacOsVersionsXcodeVersionsGetToManyRelatedRequest generates requests for CiMacOsVersionsXcodeVersionsGetToManyRelated
func NewCiMacOsVersionsXcodeVersionsGetToManyRelatedRequest(server string, id string, params *CiMacOsVersionsXcodeVersionsGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ciMacOsVersions/%s/xcodeVersions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsCiXcodeVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ciXcodeVersions]", runtime.ParamLocationQuery, *params.FieldsCiXcodeVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsCiMacOsVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ciMacOsVersions]", runtime.ParamLocationQuery, *params.FieldsCiMacOsVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitMacOsVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[macOsVersions]", runtime.ParamLocationQuery, *params.LimitMacOsVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCiProductsGetCollectionRequest generates requests for CiProductsGetCollection
func NewCiProductsGetCollectionRequest(server string, params *CiProductsGetCollectionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ciProducts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FilterProductType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[productType]", runtime.ParamLocationQuery, *params.FilterProductType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterApp != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[app]", runtime.ParamLocationQuery, *params.FilterApp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsCiProducts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ciProducts]", runtime.ParamLocationQuery, *params.FieldsCiProducts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsCiBuildRuns != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ciBuildRuns]", runtime.ParamLocationQuery, *params.FieldsCiBuildRuns); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsCiWorkflows != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ciWorkflows]", runtime.ParamLocationQuery, *params.FieldsCiWorkflows); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[apps]", runtime.ParamLocationQuery, *params.FieldsApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsScmRepositories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[scmRepositories]", runtime.ParamLocationQuery, *params.FieldsScmRepositories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitPrimaryRepositories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[primaryRepositories]", runtime.ParamLocationQuery, *params.LimitPrimaryRepositories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCiProductsDeleteInstanceRequest generates requests for CiProductsDeleteInstance
func NewCiProductsDeleteInstanceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ciProducts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCiProductsGetInstanceRequest generates requests for CiProductsGetInstance
func NewCiProductsGetInstanceRequest(server string, id string, params *CiProductsGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ciProducts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsCiProducts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ciProducts]", runtime.ParamLocationQuery, *params.FieldsCiProducts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsCiBuildRuns != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ciBuildRuns]", runtime.ParamLocationQuery, *params.FieldsCiBuildRuns); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsCiWorkflows != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ciWorkflows]", runtime.ParamLocationQuery, *params.FieldsCiWorkflows); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[apps]", runtime.ParamLocationQuery, *params.FieldsApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsScmRepositories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[scmRepositories]", runtime.ParamLocationQuery, *params.FieldsScmRepositories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitPrimaryRepositories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[primaryRepositories]", runtime.ParamLocationQuery, *params.LimitPrimaryRepositories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCiProductsAdditionalRepositoriesGetToManyRelatedRequest generates requests for CiProductsAdditionalRepositoriesGetToManyRelated
func NewCiProductsAdditionalRepositoriesGetToManyRelatedRequest(server string, id string, params *CiProductsAdditionalRepositoriesGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ciProducts/%s/additionalRepositories", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FilterId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[id]", runtime.ParamLocationQuery, *params.FilterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsScmRepositories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[scmRepositories]", runtime.ParamLocationQuery, *params.FieldsScmRepositories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCiProductsAppGetToOneRelatedRequest generates requests for CiProductsAppGetToOneRelated
func NewCiProductsAppGetToOneRelatedRequest(server string, id string, params *CiProductsAppGetToOneRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ciProducts/%s/app", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsGameCenterEnabledVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[gameCenterEnabledVersions]", runtime.ParamLocationQuery, *params.FieldsGameCenterEnabledVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBetaAppLocalizations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaAppLocalizations]", runtime.ParamLocationQuery, *params.FieldsBetaAppLocalizations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAppInfos != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appInfos]", runtime.ParamLocationQuery, *params.FieldsAppInfos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAppStoreVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appStoreVersions]", runtime.ParamLocationQuery, *params.FieldsAppStoreVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsPreReleaseVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[preReleaseVersions]", runtime.ParamLocationQuery, *params.FieldsPreReleaseVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsInAppPurchases != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[inAppPurchases]", runtime.ParamLocationQuery, *params.FieldsInAppPurchases); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[apps]", runtime.ParamLocationQuery, *params.FieldsApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsTerritories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[territories]", runtime.ParamLocationQuery, *params.FieldsTerritories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBetaGroups != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[betaGroups]", runtime.ParamLocationQuery, *params.FieldsBetaGroups); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[builds]", runtime.ParamLocationQuery, *params.FieldsBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsAppPrices != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[appPrices]", runtime.ParamLocationQuery, *params.FieldsAppPrices); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitBetaGroups != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[betaGroups]", runtime.ParamLocationQuery, *params.LimitBetaGroups); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitAppStoreVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[appStoreVersions]", runtime.ParamLocationQuery, *params.LimitAppStoreVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitPreReleaseVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[preReleaseVersions]", runtime.ParamLocationQuery, *params.LimitPreReleaseVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitBetaAppLocalizations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[betaAppLocalizations]", runtime.ParamLocationQuery, *params.LimitBetaAppLocalizations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[builds]", runtime.ParamLocationQuery, *params.LimitBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitAppInfos != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[appInfos]", runtime.ParamLocationQuery, *params.LimitAppInfos); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitPrices != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[prices]", runtime.ParamLocationQuery, *params.LimitPrices); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitAvailableTerritories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[availableTerritories]", runtime.ParamLocationQuery, *params.LimitAvailableTerritories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitInAppPurchases != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[inAppPurchases]", runtime.ParamLocationQuery, *params.LimitInAppPurchases); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitGameCenterEnabledVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[gameCenterEnabledVersions]", runtime.ParamLocationQuery, *params.LimitGameCenterEnabledVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCiProductsBuildRunsGetToManyRelatedRequest generates requests for CiProductsBuildRunsGetToManyRelated
func NewCiProductsBuildRunsGetToManyRelatedRequest(server string, id string, params *CiProductsBuildRunsGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ciProducts/%s/buildRuns", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FilterBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[builds]", runtime.ParamLocationQuery, *params.FilterBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsCiBuildRuns != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ciBuildRuns]", runtime.ParamLocationQuery, *params.FieldsCiBuildRuns); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[builds]", runtime.ParamLocationQuery, *params.FieldsBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[builds]", runtime.ParamLocationQuery, *params.LimitBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCiProductsPrimaryRepositoriesGetToManyRelatedRequest generates requests for CiProductsPrimaryRepositoriesGetToManyRelated
func NewCiProductsPrimaryRepositoriesGetToManyRelatedRequest(server string, id string, params *CiProductsPrimaryRepositoriesGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ciProducts/%s/primaryRepositories", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FilterId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[id]", runtime.ParamLocationQuery, *params.FilterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsScmRepositories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[scmRepositories]", runtime.ParamLocationQuery, *params.FieldsScmRepositories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCiProductsWorkflowsGetToManyRelatedRequest generates requests for CiProductsWorkflowsGetToManyRelated
func NewCiProductsWorkflowsGetToManyRelatedRequest(server string, id string, params *CiProductsWorkflowsGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ciProducts/%s/workflows", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsCiWorkflows != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ciWorkflows]", runtime.ParamLocationQuery, *params.FieldsCiWorkflows); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCiTestResultsGetInstanceRequest generates requests for CiTestResultsGetInstance
func NewCiTestResultsGetInstanceRequest(server string, id string, params *CiTestResultsGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ciTestResults/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsCiTestResults != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ciTestResults]", runtime.ParamLocationQuery, *params.FieldsCiTestResults); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCiWorkflowsCreateInstanceRequest calls the generic CiWorkflowsCreateInstance builder with application/json body
func NewCiWorkflowsCreateInstanceRequest(server string, body CiWorkflowsCreateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCiWorkflowsCreateInstanceRequestWithBody(server, "application/json", bodyReader)
}

// NewCiWorkflowsCreateInstanceRequestWithBody generates requests for CiWorkflowsCreateInstance with any type of body
func NewCiWorkflowsCreateInstanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ciWorkflows")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCiWorkflowsDeleteInstanceRequest generates requests for CiWorkflowsDeleteInstance
func NewCiWorkflowsDeleteInstanceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ciWorkflows/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCiWorkflowsGetInstanceRequest generates requests for CiWorkflowsGetInstance
func NewCiWorkflowsGetInstanceRequest(server string, id string, params *CiWorkflowsGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ciWorkflows/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsCiWorkflows != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ciWorkflows]", runtime.ParamLocationQuery, *params.FieldsCiWorkflows); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsCiBuildRuns != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ciBuildRuns]", runtime.ParamLocationQuery, *params.FieldsCiBuildRuns); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsScmRepositories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[scmRepositories]", runtime.ParamLocationQuery, *params.FieldsScmRepositories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCiWorkflowsUpdateInstanceRequest calls the generic CiWorkflowsUpdateInstance builder with application/json body
func NewCiWorkflowsUpdateInstanceRequest(server string, id string, body CiWorkflowsUpdateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCiWorkflowsUpdateInstanceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCiWorkflowsUpdateInstanceRequestWithBody generates requests for CiWorkflowsUpdateInstance with any type of body
func NewCiWorkflowsUpdateInstanceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ciWorkflows/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCiWorkflowsBuildRunsGetToManyRelatedRequest generates requests for CiWorkflowsBuildRunsGetToManyRelated
func NewCiWorkflowsBuildRunsGetToManyRelatedRequest(server string, id string, params *CiWorkflowsBuildRunsGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ciWorkflows/%s/buildRuns", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FilterBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[builds]", runtime.ParamLocationQuery, *params.FilterBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsCiBuildRuns != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ciBuildRuns]", runtime.ParamLocationQuery, *params.FieldsCiBuildRuns); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[builds]", runtime.ParamLocationQuery, *params.FieldsBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[builds]", runtime.ParamLocationQuery, *params.LimitBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCiWorkflowsRepositoryGetToOneRelatedRequest generates requests for CiWorkflowsRepositoryGetToOneRelated
func NewCiWorkflowsRepositoryGetToOneRelatedRequest(server string, id string, params *CiWorkflowsRepositoryGetToOneRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ciWorkflows/%s/repository", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsScmRepositories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[scmRepositories]", runtime.ParamLocationQuery, *params.FieldsScmRepositories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCiXcodeVersionsGetCollectionRequest generates requests for CiXcodeVersionsGetCollection
func NewCiXcodeVersionsGetCollectionRequest(server string, params *CiXcodeVersionsGetCollectionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ciXcodeVersions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsCiXcodeVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ciXcodeVersions]", runtime.ParamLocationQuery, *params.FieldsCiXcodeVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsCiMacOsVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ciMacOsVersions]", runtime.ParamLocationQuery, *params.FieldsCiMacOsVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitMacOsVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[macOsVersions]", runtime.ParamLocationQuery, *params.LimitMacOsVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCiXcodeVersionsGetInstanceRequest generates requests for CiXcodeVersionsGetInstance
func NewCiXcodeVersionsGetInstanceRequest(server string, id string, params *CiXcodeVersionsGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ciXcodeVersions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsCiXcodeVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ciXcodeVersions]", runtime.ParamLocationQuery, *params.FieldsCiXcodeVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsCiMacOsVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ciMacOsVersions]", runtime.ParamLocationQuery, *params.FieldsCiMacOsVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitMacOsVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[macOsVersions]", runtime.ParamLocationQuery, *params.LimitMacOsVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCiXcodeVersionsMacOsVersionsGetToManyRelatedRequest generates requests for CiXcodeVersionsMacOsVersionsGetToManyRelated
func NewCiXcodeVersionsMacOsVersionsGetToManyRelatedRequest(server string, id string, params *CiXcodeVersionsMacOsVersionsGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ciXcodeVersions/%s/macOsVersions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsCiXcodeVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ciXcodeVersions]", runtime.ParamLocationQuery, *params.FieldsCiXcodeVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsCiMacOsVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[ciMacOsVersions]", runtime.ParamLocationQuery, *params.FieldsCiMacOsVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitXcodeVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[xcodeVersions]", runtime.ParamLocationQuery, *params.LimitXcodeVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevicesGetCollectionRequest generates requests for DevicesGetCollection
func NewDevicesGetCollectionRequest(server string, params *DevicesGetCollectionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/devices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FilterName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterPlatform != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[platform]", runtime.ParamLocationQuery, *params.FilterPlatform); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterStatus != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[status]", runtime.ParamLocationQuery, *params.FilterStatus); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterUdid != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[udid]", runtime.ParamLocationQuery, *params.FilterUdid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[id]", runtime.ParamLocationQuery, *params.FilterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsDevices != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[devices]", runtime.ParamLocationQuery, *params.FieldsDevices); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevicesCreateInstanceRequest calls the generic DevicesCreateInstance builder with application/json body
func NewDevicesCreateInstanceRequest(server string, body DevicesCreateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDevicesCreateInstanceRequestWithBody(server, "application/json", bodyReader)
}

// NewDevicesCreateInstanceRequestWithBody generates requests for DevicesCreateInstance with any type of body
func NewDevicesCreateInstanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/devices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDevicesGetInstanceRequest generates requests for DevicesGetInstance
func NewDevicesGetInstanceRequest(server string, id string, params *DevicesGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/devices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsDevices != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[devices]", runtime.ParamLocationQuery, *params.FieldsDevices); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDevicesUpdateInstanceRequest calls the generic DevicesUpdateInstance builder with application/json body
func NewDevicesUpdateInstanceRequest(server string, id string, body DevicesUpdateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDevicesUpdateInstanceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDevicesUpdateInstanceRequestWithBody generates requests for DevicesUpdateInstance with any type of body
func NewDevicesUpdateInstanceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/devices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDiagnosticSignaturesLogsGetToManyRelatedRequest generates requests for DiagnosticSignaturesLogsGetToManyRelated
func NewDiagnosticSignaturesLogsGetToManyRelatedRequest(server string, id string, params *DiagnosticSignaturesLogsGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/diagnosticSignatures/%s/logs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEndUserLicenseAgreementsCreateInstanceRequest calls the generic EndUserLicenseAgreementsCreateInstance builder with application/json body
func NewEndUserLicenseAgreementsCreateInstanceRequest(server string, body EndUserLicenseAgreementsCreateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEndUserLicenseAgreementsCreateInstanceRequestWithBody(server, "application/json", bodyReader)
}

// NewEndUserLicenseAgreementsCreateInstanceRequestWithBody generates requests for EndUserLicenseAgreementsCreateInstance with any type of body
func NewEndUserLicenseAgreementsCreateInstanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/endUserLicenseAgreements")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEndUserLicenseAgreementsDeleteInstanceRequest generates requests for EndUserLicenseAgreementsDeleteInstance
func NewEndUserLicenseAgreementsDeleteInstanceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/endUserLicenseAgreements/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEndUserLicenseAgreementsGetInstanceRequest generates requests for EndUserLicenseAgreementsGetInstance
func NewEndUserLicenseAgreementsGetInstanceRequest(server string, id string, params *EndUserLicenseAgreementsGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/endUserLicenseAgreements/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsEndUserLicenseAgreements != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[endUserLicenseAgreements]", runtime.ParamLocationQuery, *params.FieldsEndUserLicenseAgreements); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsTerritories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[territories]", runtime.ParamLocationQuery, *params.FieldsTerritories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitTerritories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[territories]", runtime.ParamLocationQuery, *params.LimitTerritories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEndUserLicenseAgreementsUpdateInstanceRequest calls the generic EndUserLicenseAgreementsUpdateInstance builder with application/json body
func NewEndUserLicenseAgreementsUpdateInstanceRequest(server string, id string, body EndUserLicenseAgreementsUpdateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEndUserLicenseAgreementsUpdateInstanceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewEndUserLicenseAgreementsUpdateInstanceRequestWithBody generates requests for EndUserLicenseAgreementsUpdateInstance with any type of body
func NewEndUserLicenseAgreementsUpdateInstanceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/endUserLicenseAgreements/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEndUserLicenseAgreementsTerritoriesGetToManyRelatedRequest generates requests for EndUserLicenseAgreementsTerritoriesGetToManyRelated
func NewEndUserLicenseAgreementsTerritoriesGetToManyRelatedRequest(server string, id string, params *EndUserLicenseAgreementsTerritoriesGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/endUserLicenseAgreements/%s/territories", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsTerritories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[territories]", runtime.ParamLocationQuery, *params.FieldsTerritories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFinanceReportsGetCollectionRequest generates requests for FinanceReportsGetCollection
func NewFinanceReportsGetCollectionRequest(server string, params *FinanceReportsGetCollectionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/financeReports")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[regionCode]", runtime.ParamLocationQuery, params.FilterRegionCode); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[reportDate]", runtime.ParamLocationQuery, params.FilterReportDate); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[reportType]", runtime.ParamLocationQuery, params.FilterReportType); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[vendorNumber]", runtime.ParamLocationQuery, params.FilterVendorNumber); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedRequest generates requests for GameCenterEnabledVersionsCompatibleVersionsGetToManyRelated
func NewGameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedRequest(server string, id string, params *GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/gameCenterEnabledVersions/%s/compatibleVersions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FilterPlatform != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[platform]", runtime.ParamLocationQuery, *params.FilterPlatform); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterVersionString != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[versionString]", runtime.ParamLocationQuery, *params.FilterVersionString); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterApp != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[app]", runtime.ParamLocationQuery, *params.FilterApp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[id]", runtime.ParamLocationQuery, *params.FilterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsGameCenterEnabledVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[gameCenterEnabledVersions]", runtime.ParamLocationQuery, *params.FieldsGameCenterEnabledVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitCompatibleVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[compatibleVersions]", runtime.ParamLocationQuery, *params.LimitCompatibleVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipRequest calls the generic GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationship builder with application/json body
func NewGameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipRequest(server string, id string, body GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipRequestWithBody(server, id, "application/json", bodyReader)
}

// NewGameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipRequestWithBody generates requests for GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationship with any type of body
func NewGameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/gameCenterEnabledVersions/%s/relationships/compatibleVersions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipRequest generates requests for GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationship
func NewGameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipRequest(server string, id string, params *GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/gameCenterEnabledVersions/%s/relationships/compatibleVersions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipRequest calls the generic GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationship builder with application/json body
func NewGameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipRequest(server string, id string, body GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipRequestWithBody(server, id, "application/json", bodyReader)
}

// NewGameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipRequestWithBody generates requests for GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationship with any type of body
func NewGameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/gameCenterEnabledVersions/%s/relationships/compatibleVersions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipRequest calls the generic GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationship builder with application/json body
func NewGameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipRequest(server string, id string, body GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipRequestWithBody(server, id, "application/json", bodyReader)
}

// NewGameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipRequestWithBody generates requests for GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationship with any type of body
func NewGameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/gameCenterEnabledVersions/%s/relationships/compatibleVersions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIdfaDeclarationsCreateInstanceRequest calls the generic IdfaDeclarationsCreateInstance builder with application/json body
func NewIdfaDeclarationsCreateInstanceRequest(server string, body IdfaDeclarationsCreateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIdfaDeclarationsCreateInstanceRequestWithBody(server, "application/json", bodyReader)
}

// NewIdfaDeclarationsCreateInstanceRequestWithBody generates requests for IdfaDeclarationsCreateInstance with any type of body
func NewIdfaDeclarationsCreateInstanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/idfaDeclarations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIdfaDeclarationsDeleteInstanceRequest generates requests for IdfaDeclarationsDeleteInstance
func NewIdfaDeclarationsDeleteInstanceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/idfaDeclarations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIdfaDeclarationsUpdateInstanceRequest calls the generic IdfaDeclarationsUpdateInstance builder with application/json body
func NewIdfaDeclarationsUpdateInstanceRequest(server string, id string, body IdfaDeclarationsUpdateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIdfaDeclarationsUpdateInstanceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewIdfaDeclarationsUpdateInstanceRequestWithBody generates requests for IdfaDeclarationsUpdateInstance with any type of body
func NewIdfaDeclarationsUpdateInstanceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/idfaDeclarations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInAppPurchasesGetInstanceRequest generates requests for InAppPurchasesGetInstance
func NewInAppPurchasesGetInstanceRequest(server string, id string, params *InAppPurchasesGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/inAppPurchases/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsInAppPurchases != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[inAppPurchases]", runtime.ParamLocationQuery, *params.FieldsInAppPurchases); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[apps]", runtime.ParamLocationQuery, *params.LimitApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPreReleaseVersionsGetCollectionRequest generates requests for PreReleaseVersionsGetCollection
func NewPreReleaseVersionsGetCollectionRequest(server string, params *PreReleaseVersionsGetCollectionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/preReleaseVersions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FilterBuildsExpired != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[builds.expired]", runtime.ParamLocationQuery, *params.FilterBuildsExpired); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterBuildsProcessingState != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[builds.processingState]", runtime.ParamLocationQuery, *params.FilterBuildsProcessingState); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterBuildsVersion != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[builds.version]", runtime.ParamLocationQuery, *params.FilterBuildsVersion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterPlatform != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[platform]", runtime.ParamLocationQuery, *params.FilterPlatform); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterVersion != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[version]", runtime.ParamLocationQuery, *params.FilterVersion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterApp != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[app]", runtime.ParamLocationQuery, *params.FilterApp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[builds]", runtime.ParamLocationQuery, *params.FilterBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsPreReleaseVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[preReleaseVersions]", runtime.ParamLocationQuery, *params.FieldsPreReleaseVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[apps]", runtime.ParamLocationQuery, *params.FieldsApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[builds]", runtime.ParamLocationQuery, *params.FieldsBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[builds]", runtime.ParamLocationQuery, *params.LimitBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPreReleaseVersionsGetInstanceRequest generates requests for PreReleaseVersionsGetInstance
func NewPreReleaseVersionsGetInstanceRequest(server string, id string, params *PreReleaseVersionsGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/preReleaseVersions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsPreReleaseVersions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[preReleaseVersions]", runtime.ParamLocationQuery, *params.FieldsPreReleaseVersions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[apps]", runtime.ParamLocationQuery, *params.FieldsApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[builds]", runtime.ParamLocationQuery, *params.FieldsBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[builds]", runtime.ParamLocationQuery, *params.LimitBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPreReleaseVersionsAppGetToOneRelatedRequest generates requests for PreReleaseVersionsAppGetToOneRelated
func NewPreReleaseVersionsAppGetToOneRelatedRequest(server string, id string, params *PreReleaseVersionsAppGetToOneRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/preReleaseVersions/%s/app", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[apps]", runtime.ParamLocationQuery, *params.FieldsApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPreReleaseVersionsBuildsGetToManyRelatedRequest generates requests for PreReleaseVersionsBuildsGetToManyRelated
func NewPreReleaseVersionsBuildsGetToManyRelatedRequest(server string, id string, params *PreReleaseVersionsBuildsGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/preReleaseVersions/%s/builds", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsBuilds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[builds]", runtime.ParamLocationQuery, *params.FieldsBuilds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProfilesGetCollectionRequest generates requests for ProfilesGetCollection
func NewProfilesGetCollectionRequest(server string, params *ProfilesGetCollectionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/profiles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FilterName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterProfileState != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[profileState]", runtime.ParamLocationQuery, *params.FilterProfileState); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterProfileType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[profileType]", runtime.ParamLocationQuery, *params.FilterProfileType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[id]", runtime.ParamLocationQuery, *params.FilterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsProfiles != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[profiles]", runtime.ParamLocationQuery, *params.FieldsProfiles); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsCertificates != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[certificates]", runtime.ParamLocationQuery, *params.FieldsCertificates); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsDevices != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[devices]", runtime.ParamLocationQuery, *params.FieldsDevices); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBundleIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[bundleIds]", runtime.ParamLocationQuery, *params.FieldsBundleIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitCertificates != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[certificates]", runtime.ParamLocationQuery, *params.LimitCertificates); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitDevices != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[devices]", runtime.ParamLocationQuery, *params.LimitDevices); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProfilesCreateInstanceRequest calls the generic ProfilesCreateInstance builder with application/json body
func NewProfilesCreateInstanceRequest(server string, body ProfilesCreateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProfilesCreateInstanceRequestWithBody(server, "application/json", bodyReader)
}

// NewProfilesCreateInstanceRequestWithBody generates requests for ProfilesCreateInstance with any type of body
func NewProfilesCreateInstanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/profiles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProfilesDeleteInstanceRequest generates requests for ProfilesDeleteInstance
func NewProfilesDeleteInstanceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/profiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProfilesGetInstanceRequest generates requests for ProfilesGetInstance
func NewProfilesGetInstanceRequest(server string, id string, params *ProfilesGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/profiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsProfiles != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[profiles]", runtime.ParamLocationQuery, *params.FieldsProfiles); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsCertificates != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[certificates]", runtime.ParamLocationQuery, *params.FieldsCertificates); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsDevices != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[devices]", runtime.ParamLocationQuery, *params.FieldsDevices); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsBundleIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[bundleIds]", runtime.ParamLocationQuery, *params.FieldsBundleIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitCertificates != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[certificates]", runtime.ParamLocationQuery, *params.LimitCertificates); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitDevices != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[devices]", runtime.ParamLocationQuery, *params.LimitDevices); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProfilesBundleIdGetToOneRelatedRequest generates requests for ProfilesBundleIdGetToOneRelated
func NewProfilesBundleIdGetToOneRelatedRequest(server string, id string, params *ProfilesBundleIdGetToOneRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/profiles/%s/bundleId", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsBundleIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[bundleIds]", runtime.ParamLocationQuery, *params.FieldsBundleIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProfilesCertificatesGetToManyRelatedRequest generates requests for ProfilesCertificatesGetToManyRelated
func NewProfilesCertificatesGetToManyRelatedRequest(server string, id string, params *ProfilesCertificatesGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/profiles/%s/certificates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsCertificates != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[certificates]", runtime.ParamLocationQuery, *params.FieldsCertificates); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProfilesDevicesGetToManyRelatedRequest generates requests for ProfilesDevicesGetToManyRelated
func NewProfilesDevicesGetToManyRelatedRequest(server string, id string, params *ProfilesDevicesGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/profiles/%s/devices", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsDevices != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[devices]", runtime.ParamLocationQuery, *params.FieldsDevices); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRoutingAppCoveragesCreateInstanceRequest calls the generic RoutingAppCoveragesCreateInstance builder with application/json body
func NewRoutingAppCoveragesCreateInstanceRequest(server string, body RoutingAppCoveragesCreateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRoutingAppCoveragesCreateInstanceRequestWithBody(server, "application/json", bodyReader)
}

// NewRoutingAppCoveragesCreateInstanceRequestWithBody generates requests for RoutingAppCoveragesCreateInstance with any type of body
func NewRoutingAppCoveragesCreateInstanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/routingAppCoverages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRoutingAppCoveragesDeleteInstanceRequest generates requests for RoutingAppCoveragesDeleteInstance
func NewRoutingAppCoveragesDeleteInstanceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/routingAppCoverages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRoutingAppCoveragesGetInstanceRequest generates requests for RoutingAppCoveragesGetInstance
func NewRoutingAppCoveragesGetInstanceRequest(server string, id string, params *RoutingAppCoveragesGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/routingAppCoverages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsRoutingAppCoverages != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[routingAppCoverages]", runtime.ParamLocationQuery, *params.FieldsRoutingAppCoverages); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRoutingAppCoveragesUpdateInstanceRequest calls the generic RoutingAppCoveragesUpdateInstance builder with application/json body
func NewRoutingAppCoveragesUpdateInstanceRequest(server string, id string, body RoutingAppCoveragesUpdateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRoutingAppCoveragesUpdateInstanceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewRoutingAppCoveragesUpdateInstanceRequestWithBody generates requests for RoutingAppCoveragesUpdateInstance with any type of body
func NewRoutingAppCoveragesUpdateInstanceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/routingAppCoverages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSalesReportsGetCollectionRequest generates requests for SalesReportsGetCollection
func NewSalesReportsGetCollectionRequest(server string, params *SalesReportsGetCollectionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/salesReports")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[frequency]", runtime.ParamLocationQuery, params.FilterFrequency); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.FilterReportDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[reportDate]", runtime.ParamLocationQuery, *params.FilterReportDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[reportSubType]", runtime.ParamLocationQuery, params.FilterReportSubType); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[reportType]", runtime.ParamLocationQuery, params.FilterReportType); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[vendorNumber]", runtime.ParamLocationQuery, params.FilterVendorNumber); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.FilterVersion != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[version]", runtime.ParamLocationQuery, *params.FilterVersion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScmGitReferencesGetInstanceRequest generates requests for ScmGitReferencesGetInstance
func NewScmGitReferencesGetInstanceRequest(server string, id string, params *ScmGitReferencesGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scmGitReferences/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsScmGitReferences != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[scmGitReferences]", runtime.ParamLocationQuery, *params.FieldsScmGitReferences); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScmProvidersGetCollectionRequest generates requests for ScmProvidersGetCollection
func NewScmProvidersGetCollectionRequest(server string, params *ScmProvidersGetCollectionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scmProviders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsScmProviders != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[scmProviders]", runtime.ParamLocationQuery, *params.FieldsScmProviders); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsScmRepositories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[scmRepositories]", runtime.ParamLocationQuery, *params.FieldsScmRepositories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScmProvidersGetInstanceRequest generates requests for ScmProvidersGetInstance
func NewScmProvidersGetInstanceRequest(server string, id string, params *ScmProvidersGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scmProviders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsScmProviders != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[scmProviders]", runtime.ParamLocationQuery, *params.FieldsScmProviders); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsScmRepositories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[scmRepositories]", runtime.ParamLocationQuery, *params.FieldsScmRepositories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScmProvidersRepositoriesGetToManyRelatedRequest generates requests for ScmProvidersRepositoriesGetToManyRelated
func NewScmProvidersRepositoriesGetToManyRelatedRequest(server string, id string, params *ScmProvidersRepositoriesGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scmProviders/%s/repositories", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FilterId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[id]", runtime.ParamLocationQuery, *params.FilterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsScmRepositories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[scmRepositories]", runtime.ParamLocationQuery, *params.FieldsScmRepositories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScmPullRequestsGetInstanceRequest generates requests for ScmPullRequestsGetInstance
func NewScmPullRequestsGetInstanceRequest(server string, id string, params *ScmPullRequestsGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scmPullRequests/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsScmPullRequests != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[scmPullRequests]", runtime.ParamLocationQuery, *params.FieldsScmPullRequests); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScmRepositoriesGetCollectionRequest generates requests for ScmRepositoriesGetCollection
func NewScmRepositoriesGetCollectionRequest(server string, params *ScmRepositoriesGetCollectionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scmRepositories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FilterId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[id]", runtime.ParamLocationQuery, *params.FilterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsScmRepositories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[scmRepositories]", runtime.ParamLocationQuery, *params.FieldsScmRepositories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsScmGitReferences != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[scmGitReferences]", runtime.ParamLocationQuery, *params.FieldsScmGitReferences); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsScmPullRequests != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[scmPullRequests]", runtime.ParamLocationQuery, *params.FieldsScmPullRequests); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScmRepositoriesGetInstanceRequest generates requests for ScmRepositoriesGetInstance
func NewScmRepositoriesGetInstanceRequest(server string, id string, params *ScmRepositoriesGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scmRepositories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsScmRepositories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[scmRepositories]", runtime.ParamLocationQuery, *params.FieldsScmRepositories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsScmGitReferences != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[scmGitReferences]", runtime.ParamLocationQuery, *params.FieldsScmGitReferences); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsScmPullRequests != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[scmPullRequests]", runtime.ParamLocationQuery, *params.FieldsScmPullRequests); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScmRepositoriesGitReferencesGetToManyRelatedRequest generates requests for ScmRepositoriesGitReferencesGetToManyRelated
func NewScmRepositoriesGitReferencesGetToManyRelatedRequest(server string, id string, params *ScmRepositoriesGitReferencesGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scmRepositories/%s/gitReferences", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsScmGitReferences != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[scmGitReferences]", runtime.ParamLocationQuery, *params.FieldsScmGitReferences); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScmRepositoriesPullRequestsGetToManyRelatedRequest generates requests for ScmRepositoriesPullRequestsGetToManyRelated
func NewScmRepositoriesPullRequestsGetToManyRelatedRequest(server string, id string, params *ScmRepositoriesPullRequestsGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scmRepositories/%s/pullRequests", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsScmPullRequests != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[scmPullRequests]", runtime.ParamLocationQuery, *params.FieldsScmPullRequests); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTerritoriesGetCollectionRequest generates requests for TerritoriesGetCollection
func NewTerritoriesGetCollectionRequest(server string, params *TerritoriesGetCollectionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/territories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsTerritories != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[territories]", runtime.ParamLocationQuery, *params.FieldsTerritories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserInvitationsGetCollectionRequest generates requests for UserInvitationsGetCollection
func NewUserInvitationsGetCollectionRequest(server string, params *UserInvitationsGetCollectionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/userInvitations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FilterEmail != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[email]", runtime.ParamLocationQuery, *params.FilterEmail); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterRoles != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[roles]", runtime.ParamLocationQuery, *params.FilterRoles); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterVisibleApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[visibleApps]", runtime.ParamLocationQuery, *params.FilterVisibleApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsUserInvitations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[userInvitations]", runtime.ParamLocationQuery, *params.FieldsUserInvitations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[apps]", runtime.ParamLocationQuery, *params.FieldsApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitVisibleApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[visibleApps]", runtime.ParamLocationQuery, *params.LimitVisibleApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserInvitationsCreateInstanceRequest calls the generic UserInvitationsCreateInstance builder with application/json body
func NewUserInvitationsCreateInstanceRequest(server string, body UserInvitationsCreateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUserInvitationsCreateInstanceRequestWithBody(server, "application/json", bodyReader)
}

// NewUserInvitationsCreateInstanceRequestWithBody generates requests for UserInvitationsCreateInstance with any type of body
func NewUserInvitationsCreateInstanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/userInvitations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUserInvitationsDeleteInstanceRequest generates requests for UserInvitationsDeleteInstance
func NewUserInvitationsDeleteInstanceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/userInvitations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserInvitationsGetInstanceRequest generates requests for UserInvitationsGetInstance
func NewUserInvitationsGetInstanceRequest(server string, id string, params *UserInvitationsGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/userInvitations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsUserInvitations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[userInvitations]", runtime.ParamLocationQuery, *params.FieldsUserInvitations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[apps]", runtime.ParamLocationQuery, *params.FieldsApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitVisibleApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[visibleApps]", runtime.ParamLocationQuery, *params.LimitVisibleApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserInvitationsVisibleAppsGetToManyRelatedRequest generates requests for UserInvitationsVisibleAppsGetToManyRelated
func NewUserInvitationsVisibleAppsGetToManyRelatedRequest(server string, id string, params *UserInvitationsVisibleAppsGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/userInvitations/%s/visibleApps", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[apps]", runtime.ParamLocationQuery, *params.FieldsApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersGetCollectionRequest generates requests for UsersGetCollection
func NewUsersGetCollectionRequest(server string, params *UsersGetCollectionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FilterRoles != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[roles]", runtime.ParamLocationQuery, *params.FilterRoles); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterUsername != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[username]", runtime.ParamLocationQuery, *params.FilterUsername); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterVisibleApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "filter[visibleApps]", runtime.ParamLocationQuery, *params.FilterVisibleApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsUsers != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[users]", runtime.ParamLocationQuery, *params.FieldsUsers); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[apps]", runtime.ParamLocationQuery, *params.FieldsApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitVisibleApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[visibleApps]", runtime.ParamLocationQuery, *params.LimitVisibleApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersDeleteInstanceRequest generates requests for UsersDeleteInstance
func NewUsersDeleteInstanceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersGetInstanceRequest generates requests for UsersGetInstance
func NewUsersGetInstanceRequest(server string, id string, params *UsersGetInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsUsers != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[users]", runtime.ParamLocationQuery, *params.FieldsUsers); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FieldsApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[apps]", runtime.ParamLocationQuery, *params.FieldsApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LimitVisibleApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit[visibleApps]", runtime.ParamLocationQuery, *params.LimitVisibleApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersUpdateInstanceRequest calls the generic UsersUpdateInstance builder with application/json body
func NewUsersUpdateInstanceRequest(server string, id string, body UsersUpdateInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersUpdateInstanceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUsersUpdateInstanceRequestWithBody generates requests for UsersUpdateInstance with any type of body
func NewUsersUpdateInstanceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersVisibleAppsDeleteToManyRelationshipRequest calls the generic UsersVisibleAppsDeleteToManyRelationship builder with application/json body
func NewUsersVisibleAppsDeleteToManyRelationshipRequest(server string, id string, body UsersVisibleAppsDeleteToManyRelationshipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersVisibleAppsDeleteToManyRelationshipRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUsersVisibleAppsDeleteToManyRelationshipRequestWithBody generates requests for UsersVisibleAppsDeleteToManyRelationship with any type of body
func NewUsersVisibleAppsDeleteToManyRelationshipRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/%s/relationships/visibleApps", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersVisibleAppsGetToManyRelationshipRequest generates requests for UsersVisibleAppsGetToManyRelationship
func NewUsersVisibleAppsGetToManyRelationshipRequest(server string, id string, params *UsersVisibleAppsGetToManyRelationshipParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/%s/relationships/visibleApps", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersVisibleAppsReplaceToManyRelationshipRequest calls the generic UsersVisibleAppsReplaceToManyRelationship builder with application/json body
func NewUsersVisibleAppsReplaceToManyRelationshipRequest(server string, id string, body UsersVisibleAppsReplaceToManyRelationshipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersVisibleAppsReplaceToManyRelationshipRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUsersVisibleAppsReplaceToManyRelationshipRequestWithBody generates requests for UsersVisibleAppsReplaceToManyRelationship with any type of body
func NewUsersVisibleAppsReplaceToManyRelationshipRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/%s/relationships/visibleApps", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersVisibleAppsCreateToManyRelationshipRequest calls the generic UsersVisibleAppsCreateToManyRelationship builder with application/json body
func NewUsersVisibleAppsCreateToManyRelationshipRequest(server string, id string, body UsersVisibleAppsCreateToManyRelationshipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersVisibleAppsCreateToManyRelationshipRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUsersVisibleAppsCreateToManyRelationshipRequestWithBody generates requests for UsersVisibleAppsCreateToManyRelationship with any type of body
func NewUsersVisibleAppsCreateToManyRelationshipRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/%s/relationships/visibleApps", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersVisibleAppsGetToManyRelatedRequest generates requests for UsersVisibleAppsGetToManyRelated
func NewUsersVisibleAppsGetToManyRelatedRequest(server string, id string, params *UsersVisibleAppsGetToManyRelatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/%s/visibleApps", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FieldsApps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields[apps]", runtime.ParamLocationQuery, *params.FieldsApps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AgeRatingDeclarationsUpdateInstance request with any body
	AgeRatingDeclarationsUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AgeRatingDeclarationsUpdateInstanceResponse, error)

	AgeRatingDeclarationsUpdateInstanceWithResponse(ctx context.Context, id string, body AgeRatingDeclarationsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AgeRatingDeclarationsUpdateInstanceResponse, error)

	// AppCategoriesGetCollection request
	AppCategoriesGetCollectionWithResponse(ctx context.Context, params *AppCategoriesGetCollectionParams, reqEditors ...RequestEditorFn) (*AppCategoriesGetCollectionResponse, error)

	// AppCategoriesGetInstance request
	AppCategoriesGetInstanceWithResponse(ctx context.Context, id string, params *AppCategoriesGetInstanceParams, reqEditors ...RequestEditorFn) (*AppCategoriesGetInstanceResponse, error)

	// AppCategoriesParentGetToOneRelated request
	AppCategoriesParentGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppCategoriesParentGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppCategoriesParentGetToOneRelatedResponse, error)

	// AppCategoriesSubcategoriesGetToManyRelated request
	AppCategoriesSubcategoriesGetToManyRelatedWithResponse(ctx context.Context, id string, params *AppCategoriesSubcategoriesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*AppCategoriesSubcategoriesGetToManyRelatedResponse, error)

	// AppEncryptionDeclarationsGetCollection request
	AppEncryptionDeclarationsGetCollectionWithResponse(ctx context.Context, params *AppEncryptionDeclarationsGetCollectionParams, reqEditors ...RequestEditorFn) (*AppEncryptionDeclarationsGetCollectionResponse, error)

	// AppEncryptionDeclarationsGetInstance request
	AppEncryptionDeclarationsGetInstanceWithResponse(ctx context.Context, id string, params *AppEncryptionDeclarationsGetInstanceParams, reqEditors ...RequestEditorFn) (*AppEncryptionDeclarationsGetInstanceResponse, error)

	// AppEncryptionDeclarationsAppGetToOneRelated request
	AppEncryptionDeclarationsAppGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppEncryptionDeclarationsAppGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppEncryptionDeclarationsAppGetToOneRelatedResponse, error)

	// AppEncryptionDeclarationsBuildsCreateToManyRelationship request with any body
	AppEncryptionDeclarationsBuildsCreateToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppEncryptionDeclarationsBuildsCreateToManyRelationshipResponse, error)

	AppEncryptionDeclarationsBuildsCreateToManyRelationshipWithResponse(ctx context.Context, id string, body AppEncryptionDeclarationsBuildsCreateToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*AppEncryptionDeclarationsBuildsCreateToManyRelationshipResponse, error)

	// AppInfoLocalizationsCreateInstance request with any body
	AppInfoLocalizationsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppInfoLocalizationsCreateInstanceResponse, error)

	AppInfoLocalizationsCreateInstanceWithResponse(ctx context.Context, body AppInfoLocalizationsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppInfoLocalizationsCreateInstanceResponse, error)

	// AppInfoLocalizationsDeleteInstance request
	AppInfoLocalizationsDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AppInfoLocalizationsDeleteInstanceResponse, error)

	// AppInfoLocalizationsGetInstance request
	AppInfoLocalizationsGetInstanceWithResponse(ctx context.Context, id string, params *AppInfoLocalizationsGetInstanceParams, reqEditors ...RequestEditorFn) (*AppInfoLocalizationsGetInstanceResponse, error)

	// AppInfoLocalizationsUpdateInstance request with any body
	AppInfoLocalizationsUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppInfoLocalizationsUpdateInstanceResponse, error)

	AppInfoLocalizationsUpdateInstanceWithResponse(ctx context.Context, id string, body AppInfoLocalizationsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppInfoLocalizationsUpdateInstanceResponse, error)

	// AppInfosGetInstance request
	AppInfosGetInstanceWithResponse(ctx context.Context, id string, params *AppInfosGetInstanceParams, reqEditors ...RequestEditorFn) (*AppInfosGetInstanceResponse, error)

	// AppInfosUpdateInstance request with any body
	AppInfosUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppInfosUpdateInstanceResponse, error)

	AppInfosUpdateInstanceWithResponse(ctx context.Context, id string, body AppInfosUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppInfosUpdateInstanceResponse, error)

	// AppInfosAgeRatingDeclarationGetToOneRelated request
	AppInfosAgeRatingDeclarationGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppInfosAgeRatingDeclarationGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppInfosAgeRatingDeclarationGetToOneRelatedResponse, error)

	// AppInfosAppInfoLocalizationsGetToManyRelated request
	AppInfosAppInfoLocalizationsGetToManyRelatedWithResponse(ctx context.Context, id string, params *AppInfosAppInfoLocalizationsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*AppInfosAppInfoLocalizationsGetToManyRelatedResponse, error)

	// AppInfosPrimaryCategoryGetToOneRelated request
	AppInfosPrimaryCategoryGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppInfosPrimaryCategoryGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppInfosPrimaryCategoryGetToOneRelatedResponse, error)

	// AppInfosPrimarySubcategoryOneGetToOneRelated request
	AppInfosPrimarySubcategoryOneGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppInfosPrimarySubcategoryOneGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppInfosPrimarySubcategoryOneGetToOneRelatedResponse, error)

	// AppInfosPrimarySubcategoryTwoGetToOneRelated request
	AppInfosPrimarySubcategoryTwoGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppInfosPrimarySubcategoryTwoGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppInfosPrimarySubcategoryTwoGetToOneRelatedResponse, error)

	// AppInfosSecondaryCategoryGetToOneRelated request
	AppInfosSecondaryCategoryGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppInfosSecondaryCategoryGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppInfosSecondaryCategoryGetToOneRelatedResponse, error)

	// AppInfosSecondarySubcategoryOneGetToOneRelated request
	AppInfosSecondarySubcategoryOneGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppInfosSecondarySubcategoryOneGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppInfosSecondarySubcategoryOneGetToOneRelatedResponse, error)

	// AppInfosSecondarySubcategoryTwoGetToOneRelated request
	AppInfosSecondarySubcategoryTwoGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppInfosSecondarySubcategoryTwoGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppInfosSecondarySubcategoryTwoGetToOneRelatedResponse, error)

	// AppPreOrdersCreateInstance request with any body
	AppPreOrdersCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppPreOrdersCreateInstanceResponse, error)

	AppPreOrdersCreateInstanceWithResponse(ctx context.Context, body AppPreOrdersCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppPreOrdersCreateInstanceResponse, error)

	// AppPreOrdersDeleteInstance request
	AppPreOrdersDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AppPreOrdersDeleteInstanceResponse, error)

	// AppPreOrdersGetInstance request
	AppPreOrdersGetInstanceWithResponse(ctx context.Context, id string, params *AppPreOrdersGetInstanceParams, reqEditors ...RequestEditorFn) (*AppPreOrdersGetInstanceResponse, error)

	// AppPreOrdersUpdateInstance request with any body
	AppPreOrdersUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppPreOrdersUpdateInstanceResponse, error)

	AppPreOrdersUpdateInstanceWithResponse(ctx context.Context, id string, body AppPreOrdersUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppPreOrdersUpdateInstanceResponse, error)

	// AppPreviewSetsCreateInstance request with any body
	AppPreviewSetsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppPreviewSetsCreateInstanceResponse, error)

	AppPreviewSetsCreateInstanceWithResponse(ctx context.Context, body AppPreviewSetsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppPreviewSetsCreateInstanceResponse, error)

	// AppPreviewSetsDeleteInstance request
	AppPreviewSetsDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AppPreviewSetsDeleteInstanceResponse, error)

	// AppPreviewSetsGetInstance request
	AppPreviewSetsGetInstanceWithResponse(ctx context.Context, id string, params *AppPreviewSetsGetInstanceParams, reqEditors ...RequestEditorFn) (*AppPreviewSetsGetInstanceResponse, error)

	// AppPreviewSetsAppPreviewsGetToManyRelated request
	AppPreviewSetsAppPreviewsGetToManyRelatedWithResponse(ctx context.Context, id string, params *AppPreviewSetsAppPreviewsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*AppPreviewSetsAppPreviewsGetToManyRelatedResponse, error)

	// AppPreviewSetsAppPreviewsGetToManyRelationship request
	AppPreviewSetsAppPreviewsGetToManyRelationshipWithResponse(ctx context.Context, id string, params *AppPreviewSetsAppPreviewsGetToManyRelationshipParams, reqEditors ...RequestEditorFn) (*AppPreviewSetsAppPreviewsGetToManyRelationshipResponse, error)

	// AppPreviewSetsAppPreviewsReplaceToManyRelationship request with any body
	AppPreviewSetsAppPreviewsReplaceToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppPreviewSetsAppPreviewsReplaceToManyRelationshipResponse, error)

	AppPreviewSetsAppPreviewsReplaceToManyRelationshipWithResponse(ctx context.Context, id string, body AppPreviewSetsAppPreviewsReplaceToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*AppPreviewSetsAppPreviewsReplaceToManyRelationshipResponse, error)

	// AppPreviewsCreateInstance request with any body
	AppPreviewsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppPreviewsCreateInstanceResponse, error)

	AppPreviewsCreateInstanceWithResponse(ctx context.Context, body AppPreviewsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppPreviewsCreateInstanceResponse, error)

	// AppPreviewsDeleteInstance request
	AppPreviewsDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AppPreviewsDeleteInstanceResponse, error)

	// AppPreviewsGetInstance request
	AppPreviewsGetInstanceWithResponse(ctx context.Context, id string, params *AppPreviewsGetInstanceParams, reqEditors ...RequestEditorFn) (*AppPreviewsGetInstanceResponse, error)

	// AppPreviewsUpdateInstance request with any body
	AppPreviewsUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppPreviewsUpdateInstanceResponse, error)

	AppPreviewsUpdateInstanceWithResponse(ctx context.Context, id string, body AppPreviewsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppPreviewsUpdateInstanceResponse, error)

	// AppPricePointsGetCollection request
	AppPricePointsGetCollectionWithResponse(ctx context.Context, params *AppPricePointsGetCollectionParams, reqEditors ...RequestEditorFn) (*AppPricePointsGetCollectionResponse, error)

	// AppPricePointsGetInstance request
	AppPricePointsGetInstanceWithResponse(ctx context.Context, id string, params *AppPricePointsGetInstanceParams, reqEditors ...RequestEditorFn) (*AppPricePointsGetInstanceResponse, error)

	// AppPricePointsTerritoryGetToOneRelated request
	AppPricePointsTerritoryGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppPricePointsTerritoryGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppPricePointsTerritoryGetToOneRelatedResponse, error)

	// AppPriceTiersGetCollection request
	AppPriceTiersGetCollectionWithResponse(ctx context.Context, params *AppPriceTiersGetCollectionParams, reqEditors ...RequestEditorFn) (*AppPriceTiersGetCollectionResponse, error)

	// AppPriceTiersGetInstance request
	AppPriceTiersGetInstanceWithResponse(ctx context.Context, id string, params *AppPriceTiersGetInstanceParams, reqEditors ...RequestEditorFn) (*AppPriceTiersGetInstanceResponse, error)

	// AppPriceTiersPricePointsGetToManyRelated request
	AppPriceTiersPricePointsGetToManyRelatedWithResponse(ctx context.Context, id string, params *AppPriceTiersPricePointsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*AppPriceTiersPricePointsGetToManyRelatedResponse, error)

	// AppPricesGetInstance request
	AppPricesGetInstanceWithResponse(ctx context.Context, id string, params *AppPricesGetInstanceParams, reqEditors ...RequestEditorFn) (*AppPricesGetInstanceResponse, error)

	// AppScreenshotSetsCreateInstance request with any body
	AppScreenshotSetsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppScreenshotSetsCreateInstanceResponse, error)

	AppScreenshotSetsCreateInstanceWithResponse(ctx context.Context, body AppScreenshotSetsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppScreenshotSetsCreateInstanceResponse, error)

	// AppScreenshotSetsDeleteInstance request
	AppScreenshotSetsDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AppScreenshotSetsDeleteInstanceResponse, error)

	// AppScreenshotSetsGetInstance request
	AppScreenshotSetsGetInstanceWithResponse(ctx context.Context, id string, params *AppScreenshotSetsGetInstanceParams, reqEditors ...RequestEditorFn) (*AppScreenshotSetsGetInstanceResponse, error)

	// AppScreenshotSetsAppScreenshotsGetToManyRelated request
	AppScreenshotSetsAppScreenshotsGetToManyRelatedWithResponse(ctx context.Context, id string, params *AppScreenshotSetsAppScreenshotsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*AppScreenshotSetsAppScreenshotsGetToManyRelatedResponse, error)

	// AppScreenshotSetsAppScreenshotsGetToManyRelationship request
	AppScreenshotSetsAppScreenshotsGetToManyRelationshipWithResponse(ctx context.Context, id string, params *AppScreenshotSetsAppScreenshotsGetToManyRelationshipParams, reqEditors ...RequestEditorFn) (*AppScreenshotSetsAppScreenshotsGetToManyRelationshipResponse, error)

	// AppScreenshotSetsAppScreenshotsReplaceToManyRelationship request with any body
	AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipResponse, error)

	AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipWithResponse(ctx context.Context, id string, body AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipResponse, error)

	// AppScreenshotsCreateInstance request with any body
	AppScreenshotsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppScreenshotsCreateInstanceResponse, error)

	AppScreenshotsCreateInstanceWithResponse(ctx context.Context, body AppScreenshotsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppScreenshotsCreateInstanceResponse, error)

	// AppScreenshotsDeleteInstance request
	AppScreenshotsDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AppScreenshotsDeleteInstanceResponse, error)

	// AppScreenshotsGetInstance request
	AppScreenshotsGetInstanceWithResponse(ctx context.Context, id string, params *AppScreenshotsGetInstanceParams, reqEditors ...RequestEditorFn) (*AppScreenshotsGetInstanceResponse, error)

	// AppScreenshotsUpdateInstance request with any body
	AppScreenshotsUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppScreenshotsUpdateInstanceResponse, error)

	AppScreenshotsUpdateInstanceWithResponse(ctx context.Context, id string, body AppScreenshotsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppScreenshotsUpdateInstanceResponse, error)

	// AppStoreReviewAttachmentsCreateInstance request with any body
	AppStoreReviewAttachmentsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppStoreReviewAttachmentsCreateInstanceResponse, error)

	AppStoreReviewAttachmentsCreateInstanceWithResponse(ctx context.Context, body AppStoreReviewAttachmentsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppStoreReviewAttachmentsCreateInstanceResponse, error)

	// AppStoreReviewAttachmentsDeleteInstance request
	AppStoreReviewAttachmentsDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AppStoreReviewAttachmentsDeleteInstanceResponse, error)

	// AppStoreReviewAttachmentsGetInstance request
	AppStoreReviewAttachmentsGetInstanceWithResponse(ctx context.Context, id string, params *AppStoreReviewAttachmentsGetInstanceParams, reqEditors ...RequestEditorFn) (*AppStoreReviewAttachmentsGetInstanceResponse, error)

	// AppStoreReviewAttachmentsUpdateInstance request with any body
	AppStoreReviewAttachmentsUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppStoreReviewAttachmentsUpdateInstanceResponse, error)

	AppStoreReviewAttachmentsUpdateInstanceWithResponse(ctx context.Context, id string, body AppStoreReviewAttachmentsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppStoreReviewAttachmentsUpdateInstanceResponse, error)

	// AppStoreReviewDetailsCreateInstance request with any body
	AppStoreReviewDetailsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppStoreReviewDetailsCreateInstanceResponse, error)

	AppStoreReviewDetailsCreateInstanceWithResponse(ctx context.Context, body AppStoreReviewDetailsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppStoreReviewDetailsCreateInstanceResponse, error)

	// AppStoreReviewDetailsGetInstance request
	AppStoreReviewDetailsGetInstanceWithResponse(ctx context.Context, id string, params *AppStoreReviewDetailsGetInstanceParams, reqEditors ...RequestEditorFn) (*AppStoreReviewDetailsGetInstanceResponse, error)

	// AppStoreReviewDetailsUpdateInstance request with any body
	AppStoreReviewDetailsUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppStoreReviewDetailsUpdateInstanceResponse, error)

	AppStoreReviewDetailsUpdateInstanceWithResponse(ctx context.Context, id string, body AppStoreReviewDetailsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppStoreReviewDetailsUpdateInstanceResponse, error)

	// AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelated request
	AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedWithResponse(ctx context.Context, id string, params *AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedResponse, error)

	// AppStoreVersionLocalizationsCreateInstance request with any body
	AppStoreVersionLocalizationsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppStoreVersionLocalizationsCreateInstanceResponse, error)

	AppStoreVersionLocalizationsCreateInstanceWithResponse(ctx context.Context, body AppStoreVersionLocalizationsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppStoreVersionLocalizationsCreateInstanceResponse, error)

	// AppStoreVersionLocalizationsDeleteInstance request
	AppStoreVersionLocalizationsDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AppStoreVersionLocalizationsDeleteInstanceResponse, error)

	// AppStoreVersionLocalizationsGetInstance request
	AppStoreVersionLocalizationsGetInstanceWithResponse(ctx context.Context, id string, params *AppStoreVersionLocalizationsGetInstanceParams, reqEditors ...RequestEditorFn) (*AppStoreVersionLocalizationsGetInstanceResponse, error)

	// AppStoreVersionLocalizationsUpdateInstance request with any body
	AppStoreVersionLocalizationsUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppStoreVersionLocalizationsUpdateInstanceResponse, error)

	AppStoreVersionLocalizationsUpdateInstanceWithResponse(ctx context.Context, id string, body AppStoreVersionLocalizationsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppStoreVersionLocalizationsUpdateInstanceResponse, error)

	// AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelated request
	AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedWithResponse(ctx context.Context, id string, params *AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedResponse, error)

	// AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelated request
	AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedWithResponse(ctx context.Context, id string, params *AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedResponse, error)

	// AppStoreVersionPhasedReleasesCreateInstance request with any body
	AppStoreVersionPhasedReleasesCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppStoreVersionPhasedReleasesCreateInstanceResponse, error)

	AppStoreVersionPhasedReleasesCreateInstanceWithResponse(ctx context.Context, body AppStoreVersionPhasedReleasesCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppStoreVersionPhasedReleasesCreateInstanceResponse, error)

	// AppStoreVersionPhasedReleasesDeleteInstance request
	AppStoreVersionPhasedReleasesDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AppStoreVersionPhasedReleasesDeleteInstanceResponse, error)

	// AppStoreVersionPhasedReleasesUpdateInstance request with any body
	AppStoreVersionPhasedReleasesUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppStoreVersionPhasedReleasesUpdateInstanceResponse, error)

	AppStoreVersionPhasedReleasesUpdateInstanceWithResponse(ctx context.Context, id string, body AppStoreVersionPhasedReleasesUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppStoreVersionPhasedReleasesUpdateInstanceResponse, error)

	// AppStoreVersionReleaseRequestsCreateInstance request with any body
	AppStoreVersionReleaseRequestsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppStoreVersionReleaseRequestsCreateInstanceResponse, error)

	AppStoreVersionReleaseRequestsCreateInstanceWithResponse(ctx context.Context, body AppStoreVersionReleaseRequestsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppStoreVersionReleaseRequestsCreateInstanceResponse, error)

	// AppStoreVersionSubmissionsCreateInstance request with any body
	AppStoreVersionSubmissionsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppStoreVersionSubmissionsCreateInstanceResponse, error)

	AppStoreVersionSubmissionsCreateInstanceWithResponse(ctx context.Context, body AppStoreVersionSubmissionsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppStoreVersionSubmissionsCreateInstanceResponse, error)

	// AppStoreVersionSubmissionsDeleteInstance request
	AppStoreVersionSubmissionsDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AppStoreVersionSubmissionsDeleteInstanceResponse, error)

	// AppStoreVersionsCreateInstance request with any body
	AppStoreVersionsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppStoreVersionsCreateInstanceResponse, error)

	AppStoreVersionsCreateInstanceWithResponse(ctx context.Context, body AppStoreVersionsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppStoreVersionsCreateInstanceResponse, error)

	// AppStoreVersionsDeleteInstance request
	AppStoreVersionsDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AppStoreVersionsDeleteInstanceResponse, error)

	// AppStoreVersionsGetInstance request
	AppStoreVersionsGetInstanceWithResponse(ctx context.Context, id string, params *AppStoreVersionsGetInstanceParams, reqEditors ...RequestEditorFn) (*AppStoreVersionsGetInstanceResponse, error)

	// AppStoreVersionsUpdateInstance request with any body
	AppStoreVersionsUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppStoreVersionsUpdateInstanceResponse, error)

	AppStoreVersionsUpdateInstanceWithResponse(ctx context.Context, id string, body AppStoreVersionsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppStoreVersionsUpdateInstanceResponse, error)

	// AppStoreVersionsAgeRatingDeclarationGetToOneRelated request
	AppStoreVersionsAgeRatingDeclarationGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppStoreVersionsAgeRatingDeclarationGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppStoreVersionsAgeRatingDeclarationGetToOneRelatedResponse, error)

	// AppStoreVersionsAppStoreReviewDetailGetToOneRelated request
	AppStoreVersionsAppStoreReviewDetailGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppStoreVersionsAppStoreReviewDetailGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppStoreVersionsAppStoreReviewDetailGetToOneRelatedResponse, error)

	// AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelated request
	AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedWithResponse(ctx context.Context, id string, params *AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedResponse, error)

	// AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated request
	AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedResponse, error)

	// AppStoreVersionsAppStoreVersionSubmissionGetToOneRelated request
	AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedResponse, error)

	// AppStoreVersionsBuildGetToOneRelated request
	AppStoreVersionsBuildGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppStoreVersionsBuildGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppStoreVersionsBuildGetToOneRelatedResponse, error)

	// AppStoreVersionsIdfaDeclarationGetToOneRelated request
	AppStoreVersionsIdfaDeclarationGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppStoreVersionsIdfaDeclarationGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppStoreVersionsIdfaDeclarationGetToOneRelatedResponse, error)

	// AppStoreVersionsBuildGetToOneRelationship request
	AppStoreVersionsBuildGetToOneRelationshipWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AppStoreVersionsBuildGetToOneRelationshipResponse, error)

	// AppStoreVersionsBuildUpdateToOneRelationship request with any body
	AppStoreVersionsBuildUpdateToOneRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppStoreVersionsBuildUpdateToOneRelationshipResponse, error)

	AppStoreVersionsBuildUpdateToOneRelationshipWithResponse(ctx context.Context, id string, body AppStoreVersionsBuildUpdateToOneRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*AppStoreVersionsBuildUpdateToOneRelationshipResponse, error)

	// AppStoreVersionsRoutingAppCoverageGetToOneRelated request
	AppStoreVersionsRoutingAppCoverageGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppStoreVersionsRoutingAppCoverageGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppStoreVersionsRoutingAppCoverageGetToOneRelatedResponse, error)

	// AppsGetCollection request
	AppsGetCollectionWithResponse(ctx context.Context, params *AppsGetCollectionParams, reqEditors ...RequestEditorFn) (*AppsGetCollectionResponse, error)

	// AppsGetInstance request
	AppsGetInstanceWithResponse(ctx context.Context, id string, params *AppsGetInstanceParams, reqEditors ...RequestEditorFn) (*AppsGetInstanceResponse, error)

	// AppsUpdateInstance request with any body
	AppsUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppsUpdateInstanceResponse, error)

	AppsUpdateInstanceWithResponse(ctx context.Context, id string, body AppsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppsUpdateInstanceResponse, error)

	// AppsAppInfosGetToManyRelated request
	AppsAppInfosGetToManyRelatedWithResponse(ctx context.Context, id string, params *AppsAppInfosGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*AppsAppInfosGetToManyRelatedResponse, error)

	// AppsAppStoreVersionsGetToManyRelated request
	AppsAppStoreVersionsGetToManyRelatedWithResponse(ctx context.Context, id string, params *AppsAppStoreVersionsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*AppsAppStoreVersionsGetToManyRelatedResponse, error)

	// AppsAvailableTerritoriesGetToManyRelated request
	AppsAvailableTerritoriesGetToManyRelatedWithResponse(ctx context.Context, id string, params *AppsAvailableTerritoriesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*AppsAvailableTerritoriesGetToManyRelatedResponse, error)

	// AppsBetaAppLocalizationsGetToManyRelated request
	AppsBetaAppLocalizationsGetToManyRelatedWithResponse(ctx context.Context, id string, params *AppsBetaAppLocalizationsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*AppsBetaAppLocalizationsGetToManyRelatedResponse, error)

	// AppsBetaAppReviewDetailGetToOneRelated request
	AppsBetaAppReviewDetailGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppsBetaAppReviewDetailGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppsBetaAppReviewDetailGetToOneRelatedResponse, error)

	// AppsBetaGroupsGetToManyRelated request
	AppsBetaGroupsGetToManyRelatedWithResponse(ctx context.Context, id string, params *AppsBetaGroupsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*AppsBetaGroupsGetToManyRelatedResponse, error)

	// AppsBetaLicenseAgreementGetToOneRelated request
	AppsBetaLicenseAgreementGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppsBetaLicenseAgreementGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppsBetaLicenseAgreementGetToOneRelatedResponse, error)

	// AppsBuildsGetToManyRelated request
	AppsBuildsGetToManyRelatedWithResponse(ctx context.Context, id string, params *AppsBuildsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*AppsBuildsGetToManyRelatedResponse, error)

	// AppsCiProductGetToOneRelated request
	AppsCiProductGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppsCiProductGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppsCiProductGetToOneRelatedResponse, error)

	// AppsEndUserLicenseAgreementGetToOneRelated request
	AppsEndUserLicenseAgreementGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppsEndUserLicenseAgreementGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppsEndUserLicenseAgreementGetToOneRelatedResponse, error)

	// AppsGameCenterEnabledVersionsGetToManyRelated request
	AppsGameCenterEnabledVersionsGetToManyRelatedWithResponse(ctx context.Context, id string, params *AppsGameCenterEnabledVersionsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*AppsGameCenterEnabledVersionsGetToManyRelatedResponse, error)

	// AppsInAppPurchasesGetToManyRelated request
	AppsInAppPurchasesGetToManyRelatedWithResponse(ctx context.Context, id string, params *AppsInAppPurchasesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*AppsInAppPurchasesGetToManyRelatedResponse, error)

	// AppsPerfPowerMetricsGetToManyRelated request
	AppsPerfPowerMetricsGetToManyRelatedWithResponse(ctx context.Context, id string, params *AppsPerfPowerMetricsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*AppsPerfPowerMetricsGetToManyRelatedResponse, error)

	// AppsPreOrderGetToOneRelated request
	AppsPreOrderGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppsPreOrderGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppsPreOrderGetToOneRelatedResponse, error)

	// AppsPreReleaseVersionsGetToManyRelated request
	AppsPreReleaseVersionsGetToManyRelatedWithResponse(ctx context.Context, id string, params *AppsPreReleaseVersionsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*AppsPreReleaseVersionsGetToManyRelatedResponse, error)

	// AppsPricesGetToManyRelated request
	AppsPricesGetToManyRelatedWithResponse(ctx context.Context, id string, params *AppsPricesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*AppsPricesGetToManyRelatedResponse, error)

	// AppsBetaTestersDeleteToManyRelationship request with any body
	AppsBetaTestersDeleteToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppsBetaTestersDeleteToManyRelationshipResponse, error)

	AppsBetaTestersDeleteToManyRelationshipWithResponse(ctx context.Context, id string, body AppsBetaTestersDeleteToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*AppsBetaTestersDeleteToManyRelationshipResponse, error)

	// BetaAppLocalizationsGetCollection request
	BetaAppLocalizationsGetCollectionWithResponse(ctx context.Context, params *BetaAppLocalizationsGetCollectionParams, reqEditors ...RequestEditorFn) (*BetaAppLocalizationsGetCollectionResponse, error)

	// BetaAppLocalizationsCreateInstance request with any body
	BetaAppLocalizationsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BetaAppLocalizationsCreateInstanceResponse, error)

	BetaAppLocalizationsCreateInstanceWithResponse(ctx context.Context, body BetaAppLocalizationsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*BetaAppLocalizationsCreateInstanceResponse, error)

	// BetaAppLocalizationsDeleteInstance request
	BetaAppLocalizationsDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*BetaAppLocalizationsDeleteInstanceResponse, error)

	// BetaAppLocalizationsGetInstance request
	BetaAppLocalizationsGetInstanceWithResponse(ctx context.Context, id string, params *BetaAppLocalizationsGetInstanceParams, reqEditors ...RequestEditorFn) (*BetaAppLocalizationsGetInstanceResponse, error)

	// BetaAppLocalizationsUpdateInstance request with any body
	BetaAppLocalizationsUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BetaAppLocalizationsUpdateInstanceResponse, error)

	BetaAppLocalizationsUpdateInstanceWithResponse(ctx context.Context, id string, body BetaAppLocalizationsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*BetaAppLocalizationsUpdateInstanceResponse, error)

	// BetaAppLocalizationsAppGetToOneRelated request
	BetaAppLocalizationsAppGetToOneRelatedWithResponse(ctx context.Context, id string, params *BetaAppLocalizationsAppGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*BetaAppLocalizationsAppGetToOneRelatedResponse, error)

	// BetaAppReviewDetailsGetCollection request
	BetaAppReviewDetailsGetCollectionWithResponse(ctx context.Context, params *BetaAppReviewDetailsGetCollectionParams, reqEditors ...RequestEditorFn) (*BetaAppReviewDetailsGetCollectionResponse, error)

	// BetaAppReviewDetailsGetInstance request
	BetaAppReviewDetailsGetInstanceWithResponse(ctx context.Context, id string, params *BetaAppReviewDetailsGetInstanceParams, reqEditors ...RequestEditorFn) (*BetaAppReviewDetailsGetInstanceResponse, error)

	// BetaAppReviewDetailsUpdateInstance request with any body
	BetaAppReviewDetailsUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BetaAppReviewDetailsUpdateInstanceResponse, error)

	BetaAppReviewDetailsUpdateInstanceWithResponse(ctx context.Context, id string, body BetaAppReviewDetailsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*BetaAppReviewDetailsUpdateInstanceResponse, error)

	// BetaAppReviewDetailsAppGetToOneRelated request
	BetaAppReviewDetailsAppGetToOneRelatedWithResponse(ctx context.Context, id string, params *BetaAppReviewDetailsAppGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*BetaAppReviewDetailsAppGetToOneRelatedResponse, error)

	// BetaAppReviewSubmissionsGetCollection request
	BetaAppReviewSubmissionsGetCollectionWithResponse(ctx context.Context, params *BetaAppReviewSubmissionsGetCollectionParams, reqEditors ...RequestEditorFn) (*BetaAppReviewSubmissionsGetCollectionResponse, error)

	// BetaAppReviewSubmissionsCreateInstance request with any body
	BetaAppReviewSubmissionsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BetaAppReviewSubmissionsCreateInstanceResponse, error)

	BetaAppReviewSubmissionsCreateInstanceWithResponse(ctx context.Context, body BetaAppReviewSubmissionsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*BetaAppReviewSubmissionsCreateInstanceResponse, error)

	// BetaAppReviewSubmissionsGetInstance request
	BetaAppReviewSubmissionsGetInstanceWithResponse(ctx context.Context, id string, params *BetaAppReviewSubmissionsGetInstanceParams, reqEditors ...RequestEditorFn) (*BetaAppReviewSubmissionsGetInstanceResponse, error)

	// BetaAppReviewSubmissionsBuildGetToOneRelated request
	BetaAppReviewSubmissionsBuildGetToOneRelatedWithResponse(ctx context.Context, id string, params *BetaAppReviewSubmissionsBuildGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*BetaAppReviewSubmissionsBuildGetToOneRelatedResponse, error)

	// BetaBuildLocalizationsGetCollection request
	BetaBuildLocalizationsGetCollectionWithResponse(ctx context.Context, params *BetaBuildLocalizationsGetCollectionParams, reqEditors ...RequestEditorFn) (*BetaBuildLocalizationsGetCollectionResponse, error)

	// BetaBuildLocalizationsCreateInstance request with any body
	BetaBuildLocalizationsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BetaBuildLocalizationsCreateInstanceResponse, error)

	BetaBuildLocalizationsCreateInstanceWithResponse(ctx context.Context, body BetaBuildLocalizationsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*BetaBuildLocalizationsCreateInstanceResponse, error)

	// BetaBuildLocalizationsDeleteInstance request
	BetaBuildLocalizationsDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*BetaBuildLocalizationsDeleteInstanceResponse, error)

	// BetaBuildLocalizationsGetInstance request
	BetaBuildLocalizationsGetInstanceWithResponse(ctx context.Context, id string, params *BetaBuildLocalizationsGetInstanceParams, reqEditors ...RequestEditorFn) (*BetaBuildLocalizationsGetInstanceResponse, error)

	// BetaBuildLocalizationsUpdateInstance request with any body
	BetaBuildLocalizationsUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BetaBuildLocalizationsUpdateInstanceResponse, error)

	BetaBuildLocalizationsUpdateInstanceWithResponse(ctx context.Context, id string, body BetaBuildLocalizationsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*BetaBuildLocalizationsUpdateInstanceResponse, error)

	// BetaBuildLocalizationsBuildGetToOneRelated request
	BetaBuildLocalizationsBuildGetToOneRelatedWithResponse(ctx context.Context, id string, params *BetaBuildLocalizationsBuildGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*BetaBuildLocalizationsBuildGetToOneRelatedResponse, error)

	// BetaGroupsGetCollection request
	BetaGroupsGetCollectionWithResponse(ctx context.Context, params *BetaGroupsGetCollectionParams, reqEditors ...RequestEditorFn) (*BetaGroupsGetCollectionResponse, error)

	// BetaGroupsCreateInstance request with any body
	BetaGroupsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BetaGroupsCreateInstanceResponse, error)

	BetaGroupsCreateInstanceWithResponse(ctx context.Context, body BetaGroupsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*BetaGroupsCreateInstanceResponse, error)

	// BetaGroupsDeleteInstance request
	BetaGroupsDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*BetaGroupsDeleteInstanceResponse, error)

	// BetaGroupsGetInstance request
	BetaGroupsGetInstanceWithResponse(ctx context.Context, id string, params *BetaGroupsGetInstanceParams, reqEditors ...RequestEditorFn) (*BetaGroupsGetInstanceResponse, error)

	// BetaGroupsUpdateInstance request with any body
	BetaGroupsUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BetaGroupsUpdateInstanceResponse, error)

	BetaGroupsUpdateInstanceWithResponse(ctx context.Context, id string, body BetaGroupsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*BetaGroupsUpdateInstanceResponse, error)

	// BetaGroupsAppGetToOneRelated request
	BetaGroupsAppGetToOneRelatedWithResponse(ctx context.Context, id string, params *BetaGroupsAppGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*BetaGroupsAppGetToOneRelatedResponse, error)

	// BetaGroupsBetaTestersGetToManyRelated request
	BetaGroupsBetaTestersGetToManyRelatedWithResponse(ctx context.Context, id string, params *BetaGroupsBetaTestersGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*BetaGroupsBetaTestersGetToManyRelatedResponse, error)

	// BetaGroupsBuildsGetToManyRelated request
	BetaGroupsBuildsGetToManyRelatedWithResponse(ctx context.Context, id string, params *BetaGroupsBuildsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*BetaGroupsBuildsGetToManyRelatedResponse, error)

	// BetaGroupsBetaTestersDeleteToManyRelationship request with any body
	BetaGroupsBetaTestersDeleteToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BetaGroupsBetaTestersDeleteToManyRelationshipResponse, error)

	BetaGroupsBetaTestersDeleteToManyRelationshipWithResponse(ctx context.Context, id string, body BetaGroupsBetaTestersDeleteToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*BetaGroupsBetaTestersDeleteToManyRelationshipResponse, error)

	// BetaGroupsBetaTestersGetToManyRelationship request
	BetaGroupsBetaTestersGetToManyRelationshipWithResponse(ctx context.Context, id string, params *BetaGroupsBetaTestersGetToManyRelationshipParams, reqEditors ...RequestEditorFn) (*BetaGroupsBetaTestersGetToManyRelationshipResponse, error)

	// BetaGroupsBetaTestersCreateToManyRelationship request with any body
	BetaGroupsBetaTestersCreateToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BetaGroupsBetaTestersCreateToManyRelationshipResponse, error)

	BetaGroupsBetaTestersCreateToManyRelationshipWithResponse(ctx context.Context, id string, body BetaGroupsBetaTestersCreateToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*BetaGroupsBetaTestersCreateToManyRelationshipResponse, error)

	// BetaGroupsBuildsDeleteToManyRelationship request with any body
	BetaGroupsBuildsDeleteToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BetaGroupsBuildsDeleteToManyRelationshipResponse, error)

	BetaGroupsBuildsDeleteToManyRelationshipWithResponse(ctx context.Context, id string, body BetaGroupsBuildsDeleteToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*BetaGroupsBuildsDeleteToManyRelationshipResponse, error)

	// BetaGroupsBuildsGetToManyRelationship request
	BetaGroupsBuildsGetToManyRelationshipWithResponse(ctx context.Context, id string, params *BetaGroupsBuildsGetToManyRelationshipParams, reqEditors ...RequestEditorFn) (*BetaGroupsBuildsGetToManyRelationshipResponse, error)

	// BetaGroupsBuildsCreateToManyRelationship request with any body
	BetaGroupsBuildsCreateToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BetaGroupsBuildsCreateToManyRelationshipResponse, error)

	BetaGroupsBuildsCreateToManyRelationshipWithResponse(ctx context.Context, id string, body BetaGroupsBuildsCreateToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*BetaGroupsBuildsCreateToManyRelationshipResponse, error)

	// BetaLicenseAgreementsGetCollection request
	BetaLicenseAgreementsGetCollectionWithResponse(ctx context.Context, params *BetaLicenseAgreementsGetCollectionParams, reqEditors ...RequestEditorFn) (*BetaLicenseAgreementsGetCollectionResponse, error)

	// BetaLicenseAgreementsGetInstance request
	BetaLicenseAgreementsGetInstanceWithResponse(ctx context.Context, id string, params *BetaLicenseAgreementsGetInstanceParams, reqEditors ...RequestEditorFn) (*BetaLicenseAgreementsGetInstanceResponse, error)

	// BetaLicenseAgreementsUpdateInstance request with any body
	BetaLicenseAgreementsUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BetaLicenseAgreementsUpdateInstanceResponse, error)

	BetaLicenseAgreementsUpdateInstanceWithResponse(ctx context.Context, id string, body BetaLicenseAgreementsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*BetaLicenseAgreementsUpdateInstanceResponse, error)

	// BetaLicenseAgreementsAppGetToOneRelated request
	BetaLicenseAgreementsAppGetToOneRelatedWithResponse(ctx context.Context, id string, params *BetaLicenseAgreementsAppGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*BetaLicenseAgreementsAppGetToOneRelatedResponse, error)

	// BetaTesterInvitationsCreateInstance request with any body
	BetaTesterInvitationsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BetaTesterInvitationsCreateInstanceResponse, error)

	BetaTesterInvitationsCreateInstanceWithResponse(ctx context.Context, body BetaTesterInvitationsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*BetaTesterInvitationsCreateInstanceResponse, error)

	// BetaTestersGetCollection request
	BetaTestersGetCollectionWithResponse(ctx context.Context, params *BetaTestersGetCollectionParams, reqEditors ...RequestEditorFn) (*BetaTestersGetCollectionResponse, error)

	// BetaTestersCreateInstance request with any body
	BetaTestersCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BetaTestersCreateInstanceResponse, error)

	BetaTestersCreateInstanceWithResponse(ctx context.Context, body BetaTestersCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*BetaTestersCreateInstanceResponse, error)

	// BetaTestersDeleteInstance request
	BetaTestersDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*BetaTestersDeleteInstanceResponse, error)

	// BetaTestersGetInstance request
	BetaTestersGetInstanceWithResponse(ctx context.Context, id string, params *BetaTestersGetInstanceParams, reqEditors ...RequestEditorFn) (*BetaTestersGetInstanceResponse, error)

	// BetaTestersAppsGetToManyRelated request
	BetaTestersAppsGetToManyRelatedWithResponse(ctx context.Context, id string, params *BetaTestersAppsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*BetaTestersAppsGetToManyRelatedResponse, error)

	// BetaTestersBetaGroupsGetToManyRelated request
	BetaTestersBetaGroupsGetToManyRelatedWithResponse(ctx context.Context, id string, params *BetaTestersBetaGroupsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*BetaTestersBetaGroupsGetToManyRelatedResponse, error)

	// BetaTestersBuildsGetToManyRelated request
	BetaTestersBuildsGetToManyRelatedWithResponse(ctx context.Context, id string, params *BetaTestersBuildsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*BetaTestersBuildsGetToManyRelatedResponse, error)

	// BetaTestersAppsDeleteToManyRelationship request with any body
	BetaTestersAppsDeleteToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BetaTestersAppsDeleteToManyRelationshipResponse, error)

	BetaTestersAppsDeleteToManyRelationshipWithResponse(ctx context.Context, id string, body BetaTestersAppsDeleteToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*BetaTestersAppsDeleteToManyRelationshipResponse, error)

	// BetaTestersAppsGetToManyRelationship request
	BetaTestersAppsGetToManyRelationshipWithResponse(ctx context.Context, id string, params *BetaTestersAppsGetToManyRelationshipParams, reqEditors ...RequestEditorFn) (*BetaTestersAppsGetToManyRelationshipResponse, error)

	// BetaTestersBetaGroupsDeleteToManyRelationship request with any body
	BetaTestersBetaGroupsDeleteToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BetaTestersBetaGroupsDeleteToManyRelationshipResponse, error)

	BetaTestersBetaGroupsDeleteToManyRelationshipWithResponse(ctx context.Context, id string, body BetaTestersBetaGroupsDeleteToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*BetaTestersBetaGroupsDeleteToManyRelationshipResponse, error)

	// BetaTestersBetaGroupsGetToManyRelationship request
	BetaTestersBetaGroupsGetToManyRelationshipWithResponse(ctx context.Context, id string, params *BetaTestersBetaGroupsGetToManyRelationshipParams, reqEditors ...RequestEditorFn) (*BetaTestersBetaGroupsGetToManyRelationshipResponse, error)

	// BetaTestersBetaGroupsCreateToManyRelationship request with any body
	BetaTestersBetaGroupsCreateToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BetaTestersBetaGroupsCreateToManyRelationshipResponse, error)

	BetaTestersBetaGroupsCreateToManyRelationshipWithResponse(ctx context.Context, id string, body BetaTestersBetaGroupsCreateToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*BetaTestersBetaGroupsCreateToManyRelationshipResponse, error)

	// BetaTestersBuildsDeleteToManyRelationship request with any body
	BetaTestersBuildsDeleteToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BetaTestersBuildsDeleteToManyRelationshipResponse, error)

	BetaTestersBuildsDeleteToManyRelationshipWithResponse(ctx context.Context, id string, body BetaTestersBuildsDeleteToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*BetaTestersBuildsDeleteToManyRelationshipResponse, error)

	// BetaTestersBuildsGetToManyRelationship request
	BetaTestersBuildsGetToManyRelationshipWithResponse(ctx context.Context, id string, params *BetaTestersBuildsGetToManyRelationshipParams, reqEditors ...RequestEditorFn) (*BetaTestersBuildsGetToManyRelationshipResponse, error)

	// BetaTestersBuildsCreateToManyRelationship request with any body
	BetaTestersBuildsCreateToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BetaTestersBuildsCreateToManyRelationshipResponse, error)

	BetaTestersBuildsCreateToManyRelationshipWithResponse(ctx context.Context, id string, body BetaTestersBuildsCreateToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*BetaTestersBuildsCreateToManyRelationshipResponse, error)

	// BuildBetaDetailsGetCollection request
	BuildBetaDetailsGetCollectionWithResponse(ctx context.Context, params *BuildBetaDetailsGetCollectionParams, reqEditors ...RequestEditorFn) (*BuildBetaDetailsGetCollectionResponse, error)

	// BuildBetaDetailsGetInstance request
	BuildBetaDetailsGetInstanceWithResponse(ctx context.Context, id string, params *BuildBetaDetailsGetInstanceParams, reqEditors ...RequestEditorFn) (*BuildBetaDetailsGetInstanceResponse, error)

	// BuildBetaDetailsUpdateInstance request with any body
	BuildBetaDetailsUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BuildBetaDetailsUpdateInstanceResponse, error)

	BuildBetaDetailsUpdateInstanceWithResponse(ctx context.Context, id string, body BuildBetaDetailsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*BuildBetaDetailsUpdateInstanceResponse, error)

	// BuildBetaDetailsBuildGetToOneRelated request
	BuildBetaDetailsBuildGetToOneRelatedWithResponse(ctx context.Context, id string, params *BuildBetaDetailsBuildGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*BuildBetaDetailsBuildGetToOneRelatedResponse, error)

	// BuildBetaNotificationsCreateInstance request with any body
	BuildBetaNotificationsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BuildBetaNotificationsCreateInstanceResponse, error)

	BuildBetaNotificationsCreateInstanceWithResponse(ctx context.Context, body BuildBetaNotificationsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*BuildBetaNotificationsCreateInstanceResponse, error)

	// BuildsGetCollection request
	BuildsGetCollectionWithResponse(ctx context.Context, params *BuildsGetCollectionParams, reqEditors ...RequestEditorFn) (*BuildsGetCollectionResponse, error)

	// BuildsGetInstance request
	BuildsGetInstanceWithResponse(ctx context.Context, id string, params *BuildsGetInstanceParams, reqEditors ...RequestEditorFn) (*BuildsGetInstanceResponse, error)

	// BuildsUpdateInstance request with any body
	BuildsUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BuildsUpdateInstanceResponse, error)

	BuildsUpdateInstanceWithResponse(ctx context.Context, id string, body BuildsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*BuildsUpdateInstanceResponse, error)

	// BuildsAppGetToOneRelated request
	BuildsAppGetToOneRelatedWithResponse(ctx context.Context, id string, params *BuildsAppGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*BuildsAppGetToOneRelatedResponse, error)

	// BuildsAppEncryptionDeclarationGetToOneRelated request
	BuildsAppEncryptionDeclarationGetToOneRelatedWithResponse(ctx context.Context, id string, params *BuildsAppEncryptionDeclarationGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*BuildsAppEncryptionDeclarationGetToOneRelatedResponse, error)

	// BuildsAppStoreVersionGetToOneRelated request
	BuildsAppStoreVersionGetToOneRelatedWithResponse(ctx context.Context, id string, params *BuildsAppStoreVersionGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*BuildsAppStoreVersionGetToOneRelatedResponse, error)

	// BuildsBetaAppReviewSubmissionGetToOneRelated request
	BuildsBetaAppReviewSubmissionGetToOneRelatedWithResponse(ctx context.Context, id string, params *BuildsBetaAppReviewSubmissionGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*BuildsBetaAppReviewSubmissionGetToOneRelatedResponse, error)

	// BuildsBetaBuildLocalizationsGetToManyRelated request
	BuildsBetaBuildLocalizationsGetToManyRelatedWithResponse(ctx context.Context, id string, params *BuildsBetaBuildLocalizationsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*BuildsBetaBuildLocalizationsGetToManyRelatedResponse, error)

	// BuildsBuildBetaDetailGetToOneRelated request
	BuildsBuildBetaDetailGetToOneRelatedWithResponse(ctx context.Context, id string, params *BuildsBuildBetaDetailGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*BuildsBuildBetaDetailGetToOneRelatedResponse, error)

	// BuildsDiagnosticSignaturesGetToManyRelated request
	BuildsDiagnosticSignaturesGetToManyRelatedWithResponse(ctx context.Context, id string, params *BuildsDiagnosticSignaturesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*BuildsDiagnosticSignaturesGetToManyRelatedResponse, error)

	// BuildsIconsGetToManyRelated request
	BuildsIconsGetToManyRelatedWithResponse(ctx context.Context, id string, params *BuildsIconsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*BuildsIconsGetToManyRelatedResponse, error)

	// BuildsIndividualTestersGetToManyRelated request
	BuildsIndividualTestersGetToManyRelatedWithResponse(ctx context.Context, id string, params *BuildsIndividualTestersGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*BuildsIndividualTestersGetToManyRelatedResponse, error)

	// BuildsPerfPowerMetricsGetToManyRelated request
	BuildsPerfPowerMetricsGetToManyRelatedWithResponse(ctx context.Context, id string, params *BuildsPerfPowerMetricsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*BuildsPerfPowerMetricsGetToManyRelatedResponse, error)

	// BuildsPreReleaseVersionGetToOneRelated request
	BuildsPreReleaseVersionGetToOneRelatedWithResponse(ctx context.Context, id string, params *BuildsPreReleaseVersionGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*BuildsPreReleaseVersionGetToOneRelatedResponse, error)

	// BuildsAppEncryptionDeclarationGetToOneRelationship request
	BuildsAppEncryptionDeclarationGetToOneRelationshipWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*BuildsAppEncryptionDeclarationGetToOneRelationshipResponse, error)

	// BuildsAppEncryptionDeclarationUpdateToOneRelationship request with any body
	BuildsAppEncryptionDeclarationUpdateToOneRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BuildsAppEncryptionDeclarationUpdateToOneRelationshipResponse, error)

	BuildsAppEncryptionDeclarationUpdateToOneRelationshipWithResponse(ctx context.Context, id string, body BuildsAppEncryptionDeclarationUpdateToOneRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*BuildsAppEncryptionDeclarationUpdateToOneRelationshipResponse, error)

	// BuildsBetaGroupsDeleteToManyRelationship request with any body
	BuildsBetaGroupsDeleteToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BuildsBetaGroupsDeleteToManyRelationshipResponse, error)

	BuildsBetaGroupsDeleteToManyRelationshipWithResponse(ctx context.Context, id string, body BuildsBetaGroupsDeleteToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*BuildsBetaGroupsDeleteToManyRelationshipResponse, error)

	// BuildsBetaGroupsCreateToManyRelationship request with any body
	BuildsBetaGroupsCreateToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BuildsBetaGroupsCreateToManyRelationshipResponse, error)

	BuildsBetaGroupsCreateToManyRelationshipWithResponse(ctx context.Context, id string, body BuildsBetaGroupsCreateToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*BuildsBetaGroupsCreateToManyRelationshipResponse, error)

	// BuildsIndividualTestersDeleteToManyRelationship request with any body
	BuildsIndividualTestersDeleteToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BuildsIndividualTestersDeleteToManyRelationshipResponse, error)

	BuildsIndividualTestersDeleteToManyRelationshipWithResponse(ctx context.Context, id string, body BuildsIndividualTestersDeleteToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*BuildsIndividualTestersDeleteToManyRelationshipResponse, error)

	// BuildsIndividualTestersGetToManyRelationship request
	BuildsIndividualTestersGetToManyRelationshipWithResponse(ctx context.Context, id string, params *BuildsIndividualTestersGetToManyRelationshipParams, reqEditors ...RequestEditorFn) (*BuildsIndividualTestersGetToManyRelationshipResponse, error)

	// BuildsIndividualTestersCreateToManyRelationship request with any body
	BuildsIndividualTestersCreateToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BuildsIndividualTestersCreateToManyRelationshipResponse, error)

	BuildsIndividualTestersCreateToManyRelationshipWithResponse(ctx context.Context, id string, body BuildsIndividualTestersCreateToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*BuildsIndividualTestersCreateToManyRelationshipResponse, error)

	// BundleIdCapabilitiesCreateInstance request with any body
	BundleIdCapabilitiesCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleIdCapabilitiesCreateInstanceResponse, error)

	BundleIdCapabilitiesCreateInstanceWithResponse(ctx context.Context, body BundleIdCapabilitiesCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleIdCapabilitiesCreateInstanceResponse, error)

	// BundleIdCapabilitiesDeleteInstance request
	BundleIdCapabilitiesDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*BundleIdCapabilitiesDeleteInstanceResponse, error)

	// BundleIdCapabilitiesUpdateInstance request with any body
	BundleIdCapabilitiesUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleIdCapabilitiesUpdateInstanceResponse, error)

	BundleIdCapabilitiesUpdateInstanceWithResponse(ctx context.Context, id string, body BundleIdCapabilitiesUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleIdCapabilitiesUpdateInstanceResponse, error)

	// BundleIdsGetCollection request
	BundleIdsGetCollectionWithResponse(ctx context.Context, params *BundleIdsGetCollectionParams, reqEditors ...RequestEditorFn) (*BundleIdsGetCollectionResponse, error)

	// BundleIdsCreateInstance request with any body
	BundleIdsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleIdsCreateInstanceResponse, error)

	BundleIdsCreateInstanceWithResponse(ctx context.Context, body BundleIdsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleIdsCreateInstanceResponse, error)

	// BundleIdsDeleteInstance request
	BundleIdsDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*BundleIdsDeleteInstanceResponse, error)

	// BundleIdsGetInstance request
	BundleIdsGetInstanceWithResponse(ctx context.Context, id string, params *BundleIdsGetInstanceParams, reqEditors ...RequestEditorFn) (*BundleIdsGetInstanceResponse, error)

	// BundleIdsUpdateInstance request with any body
	BundleIdsUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleIdsUpdateInstanceResponse, error)

	BundleIdsUpdateInstanceWithResponse(ctx context.Context, id string, body BundleIdsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleIdsUpdateInstanceResponse, error)

	// BundleIdsAppGetToOneRelated request
	BundleIdsAppGetToOneRelatedWithResponse(ctx context.Context, id string, params *BundleIdsAppGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*BundleIdsAppGetToOneRelatedResponse, error)

	// BundleIdsBundleIdCapabilitiesGetToManyRelated request
	BundleIdsBundleIdCapabilitiesGetToManyRelatedWithResponse(ctx context.Context, id string, params *BundleIdsBundleIdCapabilitiesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*BundleIdsBundleIdCapabilitiesGetToManyRelatedResponse, error)

	// BundleIdsProfilesGetToManyRelated request
	BundleIdsProfilesGetToManyRelatedWithResponse(ctx context.Context, id string, params *BundleIdsProfilesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*BundleIdsProfilesGetToManyRelatedResponse, error)

	// CertificatesGetCollection request
	CertificatesGetCollectionWithResponse(ctx context.Context, params *CertificatesGetCollectionParams, reqEditors ...RequestEditorFn) (*CertificatesGetCollectionResponse, error)

	// CertificatesCreateInstance request with any body
	CertificatesCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CertificatesCreateInstanceResponse, error)

	CertificatesCreateInstanceWithResponse(ctx context.Context, body CertificatesCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*CertificatesCreateInstanceResponse, error)

	// CertificatesDeleteInstance request
	CertificatesDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CertificatesDeleteInstanceResponse, error)

	// CertificatesGetInstance request
	CertificatesGetInstanceWithResponse(ctx context.Context, id string, params *CertificatesGetInstanceParams, reqEditors ...RequestEditorFn) (*CertificatesGetInstanceResponse, error)

	// CiArtifactsGetInstance request
	CiArtifactsGetInstanceWithResponse(ctx context.Context, id string, params *CiArtifactsGetInstanceParams, reqEditors ...RequestEditorFn) (*CiArtifactsGetInstanceResponse, error)

	// CiBuildActionsGetInstance request
	CiBuildActionsGetInstanceWithResponse(ctx context.Context, id string, params *CiBuildActionsGetInstanceParams, reqEditors ...RequestEditorFn) (*CiBuildActionsGetInstanceResponse, error)

	// CiBuildActionsArtifactsGetToManyRelated request
	CiBuildActionsArtifactsGetToManyRelatedWithResponse(ctx context.Context, id string, params *CiBuildActionsArtifactsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*CiBuildActionsArtifactsGetToManyRelatedResponse, error)

	// CiBuildActionsBuildRunGetToOneRelated request
	CiBuildActionsBuildRunGetToOneRelatedWithResponse(ctx context.Context, id string, params *CiBuildActionsBuildRunGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*CiBuildActionsBuildRunGetToOneRelatedResponse, error)

	// CiBuildActionsIssuesGetToManyRelated request
	CiBuildActionsIssuesGetToManyRelatedWithResponse(ctx context.Context, id string, params *CiBuildActionsIssuesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*CiBuildActionsIssuesGetToManyRelatedResponse, error)

	// CiBuildActionsTestResultsGetToManyRelated request
	CiBuildActionsTestResultsGetToManyRelatedWithResponse(ctx context.Context, id string, params *CiBuildActionsTestResultsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*CiBuildActionsTestResultsGetToManyRelatedResponse, error)

	// CiBuildRunsCreateInstance request with any body
	CiBuildRunsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CiBuildRunsCreateInstanceResponse, error)

	CiBuildRunsCreateInstanceWithResponse(ctx context.Context, body CiBuildRunsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*CiBuildRunsCreateInstanceResponse, error)

	// CiBuildRunsGetInstance request
	CiBuildRunsGetInstanceWithResponse(ctx context.Context, id string, params *CiBuildRunsGetInstanceParams, reqEditors ...RequestEditorFn) (*CiBuildRunsGetInstanceResponse, error)

	// CiBuildRunsActionsGetToManyRelated request
	CiBuildRunsActionsGetToManyRelatedWithResponse(ctx context.Context, id string, params *CiBuildRunsActionsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*CiBuildRunsActionsGetToManyRelatedResponse, error)

	// CiBuildRunsBuildsGetToManyRelated request
	CiBuildRunsBuildsGetToManyRelatedWithResponse(ctx context.Context, id string, params *CiBuildRunsBuildsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*CiBuildRunsBuildsGetToManyRelatedResponse, error)

	// CiIssuesGetInstance request
	CiIssuesGetInstanceWithResponse(ctx context.Context, id string, params *CiIssuesGetInstanceParams, reqEditors ...RequestEditorFn) (*CiIssuesGetInstanceResponse, error)

	// CiMacOsVersionsGetCollection request
	CiMacOsVersionsGetCollectionWithResponse(ctx context.Context, params *CiMacOsVersionsGetCollectionParams, reqEditors ...RequestEditorFn) (*CiMacOsVersionsGetCollectionResponse, error)

	// CiMacOsVersionsGetInstance request
	CiMacOsVersionsGetInstanceWithResponse(ctx context.Context, id string, params *CiMacOsVersionsGetInstanceParams, reqEditors ...RequestEditorFn) (*CiMacOsVersionsGetInstanceResponse, error)

	// CiMacOsVersionsXcodeVersionsGetToManyRelated request
	CiMacOsVersionsXcodeVersionsGetToManyRelatedWithResponse(ctx context.Context, id string, params *CiMacOsVersionsXcodeVersionsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*CiMacOsVersionsXcodeVersionsGetToManyRelatedResponse, error)

	// CiProductsGetCollection request
	CiProductsGetCollectionWithResponse(ctx context.Context, params *CiProductsGetCollectionParams, reqEditors ...RequestEditorFn) (*CiProductsGetCollectionResponse, error)

	// CiProductsDeleteInstance request
	CiProductsDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CiProductsDeleteInstanceResponse, error)

	// CiProductsGetInstance request
	CiProductsGetInstanceWithResponse(ctx context.Context, id string, params *CiProductsGetInstanceParams, reqEditors ...RequestEditorFn) (*CiProductsGetInstanceResponse, error)

	// CiProductsAdditionalRepositoriesGetToManyRelated request
	CiProductsAdditionalRepositoriesGetToManyRelatedWithResponse(ctx context.Context, id string, params *CiProductsAdditionalRepositoriesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*CiProductsAdditionalRepositoriesGetToManyRelatedResponse, error)

	// CiProductsAppGetToOneRelated request
	CiProductsAppGetToOneRelatedWithResponse(ctx context.Context, id string, params *CiProductsAppGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*CiProductsAppGetToOneRelatedResponse, error)

	// CiProductsBuildRunsGetToManyRelated request
	CiProductsBuildRunsGetToManyRelatedWithResponse(ctx context.Context, id string, params *CiProductsBuildRunsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*CiProductsBuildRunsGetToManyRelatedResponse, error)

	// CiProductsPrimaryRepositoriesGetToManyRelated request
	CiProductsPrimaryRepositoriesGetToManyRelatedWithResponse(ctx context.Context, id string, params *CiProductsPrimaryRepositoriesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*CiProductsPrimaryRepositoriesGetToManyRelatedResponse, error)

	// CiProductsWorkflowsGetToManyRelated request
	CiProductsWorkflowsGetToManyRelatedWithResponse(ctx context.Context, id string, params *CiProductsWorkflowsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*CiProductsWorkflowsGetToManyRelatedResponse, error)

	// CiTestResultsGetInstance request
	CiTestResultsGetInstanceWithResponse(ctx context.Context, id string, params *CiTestResultsGetInstanceParams, reqEditors ...RequestEditorFn) (*CiTestResultsGetInstanceResponse, error)

	// CiWorkflowsCreateInstance request with any body
	CiWorkflowsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CiWorkflowsCreateInstanceResponse, error)

	CiWorkflowsCreateInstanceWithResponse(ctx context.Context, body CiWorkflowsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*CiWorkflowsCreateInstanceResponse, error)

	// CiWorkflowsDeleteInstance request
	CiWorkflowsDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CiWorkflowsDeleteInstanceResponse, error)

	// CiWorkflowsGetInstance request
	CiWorkflowsGetInstanceWithResponse(ctx context.Context, id string, params *CiWorkflowsGetInstanceParams, reqEditors ...RequestEditorFn) (*CiWorkflowsGetInstanceResponse, error)

	// CiWorkflowsUpdateInstance request with any body
	CiWorkflowsUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CiWorkflowsUpdateInstanceResponse, error)

	CiWorkflowsUpdateInstanceWithResponse(ctx context.Context, id string, body CiWorkflowsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*CiWorkflowsUpdateInstanceResponse, error)

	// CiWorkflowsBuildRunsGetToManyRelated request
	CiWorkflowsBuildRunsGetToManyRelatedWithResponse(ctx context.Context, id string, params *CiWorkflowsBuildRunsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*CiWorkflowsBuildRunsGetToManyRelatedResponse, error)

	// CiWorkflowsRepositoryGetToOneRelated request
	CiWorkflowsRepositoryGetToOneRelatedWithResponse(ctx context.Context, id string, params *CiWorkflowsRepositoryGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*CiWorkflowsRepositoryGetToOneRelatedResponse, error)

	// CiXcodeVersionsGetCollection request
	CiXcodeVersionsGetCollectionWithResponse(ctx context.Context, params *CiXcodeVersionsGetCollectionParams, reqEditors ...RequestEditorFn) (*CiXcodeVersionsGetCollectionResponse, error)

	// CiXcodeVersionsGetInstance request
	CiXcodeVersionsGetInstanceWithResponse(ctx context.Context, id string, params *CiXcodeVersionsGetInstanceParams, reqEditors ...RequestEditorFn) (*CiXcodeVersionsGetInstanceResponse, error)

	// CiXcodeVersionsMacOsVersionsGetToManyRelated request
	CiXcodeVersionsMacOsVersionsGetToManyRelatedWithResponse(ctx context.Context, id string, params *CiXcodeVersionsMacOsVersionsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*CiXcodeVersionsMacOsVersionsGetToManyRelatedResponse, error)

	// DevicesGetCollection request
	DevicesGetCollectionWithResponse(ctx context.Context, params *DevicesGetCollectionParams, reqEditors ...RequestEditorFn) (*DevicesGetCollectionResponse, error)

	// DevicesCreateInstance request with any body
	DevicesCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DevicesCreateInstanceResponse, error)

	DevicesCreateInstanceWithResponse(ctx context.Context, body DevicesCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*DevicesCreateInstanceResponse, error)

	// DevicesGetInstance request
	DevicesGetInstanceWithResponse(ctx context.Context, id string, params *DevicesGetInstanceParams, reqEditors ...RequestEditorFn) (*DevicesGetInstanceResponse, error)

	// DevicesUpdateInstance request with any body
	DevicesUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DevicesUpdateInstanceResponse, error)

	DevicesUpdateInstanceWithResponse(ctx context.Context, id string, body DevicesUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*DevicesUpdateInstanceResponse, error)

	// DiagnosticSignaturesLogsGetToManyRelated request
	DiagnosticSignaturesLogsGetToManyRelatedWithResponse(ctx context.Context, id string, params *DiagnosticSignaturesLogsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*DiagnosticSignaturesLogsGetToManyRelatedResponse, error)

	// EndUserLicenseAgreementsCreateInstance request with any body
	EndUserLicenseAgreementsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EndUserLicenseAgreementsCreateInstanceResponse, error)

	EndUserLicenseAgreementsCreateInstanceWithResponse(ctx context.Context, body EndUserLicenseAgreementsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*EndUserLicenseAgreementsCreateInstanceResponse, error)

	// EndUserLicenseAgreementsDeleteInstance request
	EndUserLicenseAgreementsDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*EndUserLicenseAgreementsDeleteInstanceResponse, error)

	// EndUserLicenseAgreementsGetInstance request
	EndUserLicenseAgreementsGetInstanceWithResponse(ctx context.Context, id string, params *EndUserLicenseAgreementsGetInstanceParams, reqEditors ...RequestEditorFn) (*EndUserLicenseAgreementsGetInstanceResponse, error)

	// EndUserLicenseAgreementsUpdateInstance request with any body
	EndUserLicenseAgreementsUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EndUserLicenseAgreementsUpdateInstanceResponse, error)

	EndUserLicenseAgreementsUpdateInstanceWithResponse(ctx context.Context, id string, body EndUserLicenseAgreementsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*EndUserLicenseAgreementsUpdateInstanceResponse, error)

	// EndUserLicenseAgreementsTerritoriesGetToManyRelated request
	EndUserLicenseAgreementsTerritoriesGetToManyRelatedWithResponse(ctx context.Context, id string, params *EndUserLicenseAgreementsTerritoriesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*EndUserLicenseAgreementsTerritoriesGetToManyRelatedResponse, error)

	// FinanceReportsGetCollection request
	FinanceReportsGetCollectionWithResponse(ctx context.Context, params *FinanceReportsGetCollectionParams, reqEditors ...RequestEditorFn) (*FinanceReportsGetCollectionResponse, error)

	// GameCenterEnabledVersionsCompatibleVersionsGetToManyRelated request
	GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedWithResponse(ctx context.Context, id string, params *GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedResponse, error)

	// GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationship request with any body
	GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipResponse, error)

	GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipWithResponse(ctx context.Context, id string, body GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipResponse, error)

	// GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationship request
	GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipWithResponse(ctx context.Context, id string, params *GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipParams, reqEditors ...RequestEditorFn) (*GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipResponse, error)

	// GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationship request with any body
	GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipResponse, error)

	GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipWithResponse(ctx context.Context, id string, body GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipResponse, error)

	// GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationship request with any body
	GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipResponse, error)

	GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipWithResponse(ctx context.Context, id string, body GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipResponse, error)

	// IdfaDeclarationsCreateInstance request with any body
	IdfaDeclarationsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IdfaDeclarationsCreateInstanceResponse, error)

	IdfaDeclarationsCreateInstanceWithResponse(ctx context.Context, body IdfaDeclarationsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*IdfaDeclarationsCreateInstanceResponse, error)

	// IdfaDeclarationsDeleteInstance request
	IdfaDeclarationsDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IdfaDeclarationsDeleteInstanceResponse, error)

	// IdfaDeclarationsUpdateInstance request with any body
	IdfaDeclarationsUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IdfaDeclarationsUpdateInstanceResponse, error)

	IdfaDeclarationsUpdateInstanceWithResponse(ctx context.Context, id string, body IdfaDeclarationsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*IdfaDeclarationsUpdateInstanceResponse, error)

	// InAppPurchasesGetInstance request
	InAppPurchasesGetInstanceWithResponse(ctx context.Context, id string, params *InAppPurchasesGetInstanceParams, reqEditors ...RequestEditorFn) (*InAppPurchasesGetInstanceResponse, error)

	// PreReleaseVersionsGetCollection request
	PreReleaseVersionsGetCollectionWithResponse(ctx context.Context, params *PreReleaseVersionsGetCollectionParams, reqEditors ...RequestEditorFn) (*PreReleaseVersionsGetCollectionResponse, error)

	// PreReleaseVersionsGetInstance request
	PreReleaseVersionsGetInstanceWithResponse(ctx context.Context, id string, params *PreReleaseVersionsGetInstanceParams, reqEditors ...RequestEditorFn) (*PreReleaseVersionsGetInstanceResponse, error)

	// PreReleaseVersionsAppGetToOneRelated request
	PreReleaseVersionsAppGetToOneRelatedWithResponse(ctx context.Context, id string, params *PreReleaseVersionsAppGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*PreReleaseVersionsAppGetToOneRelatedResponse, error)

	// PreReleaseVersionsBuildsGetToManyRelated request
	PreReleaseVersionsBuildsGetToManyRelatedWithResponse(ctx context.Context, id string, params *PreReleaseVersionsBuildsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*PreReleaseVersionsBuildsGetToManyRelatedResponse, error)

	// ProfilesGetCollection request
	ProfilesGetCollectionWithResponse(ctx context.Context, params *ProfilesGetCollectionParams, reqEditors ...RequestEditorFn) (*ProfilesGetCollectionResponse, error)

	// ProfilesCreateInstance request with any body
	ProfilesCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProfilesCreateInstanceResponse, error)

	ProfilesCreateInstanceWithResponse(ctx context.Context, body ProfilesCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*ProfilesCreateInstanceResponse, error)

	// ProfilesDeleteInstance request
	ProfilesDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ProfilesDeleteInstanceResponse, error)

	// ProfilesGetInstance request
	ProfilesGetInstanceWithResponse(ctx context.Context, id string, params *ProfilesGetInstanceParams, reqEditors ...RequestEditorFn) (*ProfilesGetInstanceResponse, error)

	// ProfilesBundleIdGetToOneRelated request
	ProfilesBundleIdGetToOneRelatedWithResponse(ctx context.Context, id string, params *ProfilesBundleIdGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*ProfilesBundleIdGetToOneRelatedResponse, error)

	// ProfilesCertificatesGetToManyRelated request
	ProfilesCertificatesGetToManyRelatedWithResponse(ctx context.Context, id string, params *ProfilesCertificatesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*ProfilesCertificatesGetToManyRelatedResponse, error)

	// ProfilesDevicesGetToManyRelated request
	ProfilesDevicesGetToManyRelatedWithResponse(ctx context.Context, id string, params *ProfilesDevicesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*ProfilesDevicesGetToManyRelatedResponse, error)

	// RoutingAppCoveragesCreateInstance request with any body
	RoutingAppCoveragesCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RoutingAppCoveragesCreateInstanceResponse, error)

	RoutingAppCoveragesCreateInstanceWithResponse(ctx context.Context, body RoutingAppCoveragesCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*RoutingAppCoveragesCreateInstanceResponse, error)

	// RoutingAppCoveragesDeleteInstance request
	RoutingAppCoveragesDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*RoutingAppCoveragesDeleteInstanceResponse, error)

	// RoutingAppCoveragesGetInstance request
	RoutingAppCoveragesGetInstanceWithResponse(ctx context.Context, id string, params *RoutingAppCoveragesGetInstanceParams, reqEditors ...RequestEditorFn) (*RoutingAppCoveragesGetInstanceResponse, error)

	// RoutingAppCoveragesUpdateInstance request with any body
	RoutingAppCoveragesUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RoutingAppCoveragesUpdateInstanceResponse, error)

	RoutingAppCoveragesUpdateInstanceWithResponse(ctx context.Context, id string, body RoutingAppCoveragesUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*RoutingAppCoveragesUpdateInstanceResponse, error)

	// SalesReportsGetCollection request
	SalesReportsGetCollectionWithResponse(ctx context.Context, params *SalesReportsGetCollectionParams, reqEditors ...RequestEditorFn) (*SalesReportsGetCollectionResponse, error)

	// ScmGitReferencesGetInstance request
	ScmGitReferencesGetInstanceWithResponse(ctx context.Context, id string, params *ScmGitReferencesGetInstanceParams, reqEditors ...RequestEditorFn) (*ScmGitReferencesGetInstanceResponse, error)

	// ScmProvidersGetCollection request
	ScmProvidersGetCollectionWithResponse(ctx context.Context, params *ScmProvidersGetCollectionParams, reqEditors ...RequestEditorFn) (*ScmProvidersGetCollectionResponse, error)

	// ScmProvidersGetInstance request
	ScmProvidersGetInstanceWithResponse(ctx context.Context, id string, params *ScmProvidersGetInstanceParams, reqEditors ...RequestEditorFn) (*ScmProvidersGetInstanceResponse, error)

	// ScmProvidersRepositoriesGetToManyRelated request
	ScmProvidersRepositoriesGetToManyRelatedWithResponse(ctx context.Context, id string, params *ScmProvidersRepositoriesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*ScmProvidersRepositoriesGetToManyRelatedResponse, error)

	// ScmPullRequestsGetInstance request
	ScmPullRequestsGetInstanceWithResponse(ctx context.Context, id string, params *ScmPullRequestsGetInstanceParams, reqEditors ...RequestEditorFn) (*ScmPullRequestsGetInstanceResponse, error)

	// ScmRepositoriesGetCollection request
	ScmRepositoriesGetCollectionWithResponse(ctx context.Context, params *ScmRepositoriesGetCollectionParams, reqEditors ...RequestEditorFn) (*ScmRepositoriesGetCollectionResponse, error)

	// ScmRepositoriesGetInstance request
	ScmRepositoriesGetInstanceWithResponse(ctx context.Context, id string, params *ScmRepositoriesGetInstanceParams, reqEditors ...RequestEditorFn) (*ScmRepositoriesGetInstanceResponse, error)

	// ScmRepositoriesGitReferencesGetToManyRelated request
	ScmRepositoriesGitReferencesGetToManyRelatedWithResponse(ctx context.Context, id string, params *ScmRepositoriesGitReferencesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*ScmRepositoriesGitReferencesGetToManyRelatedResponse, error)

	// ScmRepositoriesPullRequestsGetToManyRelated request
	ScmRepositoriesPullRequestsGetToManyRelatedWithResponse(ctx context.Context, id string, params *ScmRepositoriesPullRequestsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*ScmRepositoriesPullRequestsGetToManyRelatedResponse, error)

	// TerritoriesGetCollection request
	TerritoriesGetCollectionWithResponse(ctx context.Context, params *TerritoriesGetCollectionParams, reqEditors ...RequestEditorFn) (*TerritoriesGetCollectionResponse, error)

	// UserInvitationsGetCollection request
	UserInvitationsGetCollectionWithResponse(ctx context.Context, params *UserInvitationsGetCollectionParams, reqEditors ...RequestEditorFn) (*UserInvitationsGetCollectionResponse, error)

	// UserInvitationsCreateInstance request with any body
	UserInvitationsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserInvitationsCreateInstanceResponse, error)

	UserInvitationsCreateInstanceWithResponse(ctx context.Context, body UserInvitationsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*UserInvitationsCreateInstanceResponse, error)

	// UserInvitationsDeleteInstance request
	UserInvitationsDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*UserInvitationsDeleteInstanceResponse, error)

	// UserInvitationsGetInstance request
	UserInvitationsGetInstanceWithResponse(ctx context.Context, id string, params *UserInvitationsGetInstanceParams, reqEditors ...RequestEditorFn) (*UserInvitationsGetInstanceResponse, error)

	// UserInvitationsVisibleAppsGetToManyRelated request
	UserInvitationsVisibleAppsGetToManyRelatedWithResponse(ctx context.Context, id string, params *UserInvitationsVisibleAppsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*UserInvitationsVisibleAppsGetToManyRelatedResponse, error)

	// UsersGetCollection request
	UsersGetCollectionWithResponse(ctx context.Context, params *UsersGetCollectionParams, reqEditors ...RequestEditorFn) (*UsersGetCollectionResponse, error)

	// UsersDeleteInstance request
	UsersDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*UsersDeleteInstanceResponse, error)

	// UsersGetInstance request
	UsersGetInstanceWithResponse(ctx context.Context, id string, params *UsersGetInstanceParams, reqEditors ...RequestEditorFn) (*UsersGetInstanceResponse, error)

	// UsersUpdateInstance request with any body
	UsersUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUpdateInstanceResponse, error)

	UsersUpdateInstanceWithResponse(ctx context.Context, id string, body UsersUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUpdateInstanceResponse, error)

	// UsersVisibleAppsDeleteToManyRelationship request with any body
	UsersVisibleAppsDeleteToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersVisibleAppsDeleteToManyRelationshipResponse, error)

	UsersVisibleAppsDeleteToManyRelationshipWithResponse(ctx context.Context, id string, body UsersVisibleAppsDeleteToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersVisibleAppsDeleteToManyRelationshipResponse, error)

	// UsersVisibleAppsGetToManyRelationship request
	UsersVisibleAppsGetToManyRelationshipWithResponse(ctx context.Context, id string, params *UsersVisibleAppsGetToManyRelationshipParams, reqEditors ...RequestEditorFn) (*UsersVisibleAppsGetToManyRelationshipResponse, error)

	// UsersVisibleAppsReplaceToManyRelationship request with any body
	UsersVisibleAppsReplaceToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersVisibleAppsReplaceToManyRelationshipResponse, error)

	UsersVisibleAppsReplaceToManyRelationshipWithResponse(ctx context.Context, id string, body UsersVisibleAppsReplaceToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersVisibleAppsReplaceToManyRelationshipResponse, error)

	// UsersVisibleAppsCreateToManyRelationship request with any body
	UsersVisibleAppsCreateToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersVisibleAppsCreateToManyRelationshipResponse, error)

	UsersVisibleAppsCreateToManyRelationshipWithResponse(ctx context.Context, id string, body UsersVisibleAppsCreateToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersVisibleAppsCreateToManyRelationshipResponse, error)

	// UsersVisibleAppsGetToManyRelated request
	UsersVisibleAppsGetToManyRelatedWithResponse(ctx context.Context, id string, params *UsersVisibleAppsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*UsersVisibleAppsGetToManyRelatedResponse, error)
}

type AgeRatingDeclarationsUpdateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AgeRatingDeclarationResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AgeRatingDeclarationsUpdateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgeRatingDeclarationsUpdateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppCategoriesGetCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppCategoriesResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppCategoriesGetCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppCategoriesGetCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppCategoriesGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppCategoryResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppCategoriesGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppCategoriesGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppCategoriesParentGetToOneRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppCategoryResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppCategoriesParentGetToOneRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppCategoriesParentGetToOneRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppCategoriesSubcategoriesGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppCategoriesResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppCategoriesSubcategoriesGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppCategoriesSubcategoriesGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppEncryptionDeclarationsGetCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppEncryptionDeclarationsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppEncryptionDeclarationsGetCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppEncryptionDeclarationsGetCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppEncryptionDeclarationsGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppEncryptionDeclarationResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppEncryptionDeclarationsGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppEncryptionDeclarationsGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppEncryptionDeclarationsAppGetToOneRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppEncryptionDeclarationsAppGetToOneRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppEncryptionDeclarationsAppGetToOneRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppEncryptionDeclarationsBuildsCreateToManyRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppEncryptionDeclarationsBuildsCreateToManyRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppEncryptionDeclarationsBuildsCreateToManyRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppInfoLocalizationsCreateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AppInfoLocalizationResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppInfoLocalizationsCreateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppInfoLocalizationsCreateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppInfoLocalizationsDeleteInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppInfoLocalizationsDeleteInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppInfoLocalizationsDeleteInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppInfoLocalizationsGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppInfoLocalizationResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppInfoLocalizationsGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppInfoLocalizationsGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppInfoLocalizationsUpdateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppInfoLocalizationResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppInfoLocalizationsUpdateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppInfoLocalizationsUpdateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppInfosGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppInfoResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppInfosGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppInfosGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppInfosUpdateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppInfoResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppInfosUpdateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppInfosUpdateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppInfosAgeRatingDeclarationGetToOneRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AgeRatingDeclarationResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppInfosAgeRatingDeclarationGetToOneRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppInfosAgeRatingDeclarationGetToOneRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppInfosAppInfoLocalizationsGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppInfoLocalizationsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppInfosAppInfoLocalizationsGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppInfosAppInfoLocalizationsGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppInfosPrimaryCategoryGetToOneRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppCategoryResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppInfosPrimaryCategoryGetToOneRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppInfosPrimaryCategoryGetToOneRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppInfosPrimarySubcategoryOneGetToOneRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppCategoryResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppInfosPrimarySubcategoryOneGetToOneRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppInfosPrimarySubcategoryOneGetToOneRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppInfosPrimarySubcategoryTwoGetToOneRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppCategoryResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppInfosPrimarySubcategoryTwoGetToOneRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppInfosPrimarySubcategoryTwoGetToOneRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppInfosSecondaryCategoryGetToOneRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppCategoryResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppInfosSecondaryCategoryGetToOneRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppInfosSecondaryCategoryGetToOneRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppInfosSecondarySubcategoryOneGetToOneRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppCategoryResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppInfosSecondarySubcategoryOneGetToOneRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppInfosSecondarySubcategoryOneGetToOneRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppInfosSecondarySubcategoryTwoGetToOneRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppCategoryResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppInfosSecondarySubcategoryTwoGetToOneRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppInfosSecondarySubcategoryTwoGetToOneRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppPreOrdersCreateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AppPreOrderResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppPreOrdersCreateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppPreOrdersCreateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppPreOrdersDeleteInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppPreOrdersDeleteInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppPreOrdersDeleteInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppPreOrdersGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppPreOrderResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppPreOrdersGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppPreOrdersGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppPreOrdersUpdateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppPreOrderResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppPreOrdersUpdateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppPreOrdersUpdateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppPreviewSetsCreateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AppPreviewSetResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppPreviewSetsCreateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppPreviewSetsCreateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppPreviewSetsDeleteInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppPreviewSetsDeleteInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppPreviewSetsDeleteInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppPreviewSetsGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppPreviewSetResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppPreviewSetsGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppPreviewSetsGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppPreviewSetsAppPreviewsGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppPreviewsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppPreviewSetsAppPreviewsGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppPreviewSetsAppPreviewsGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppPreviewSetsAppPreviewsGetToManyRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppPreviewSetAppPreviewsLinkagesResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppPreviewSetsAppPreviewsGetToManyRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppPreviewSetsAppPreviewsGetToManyRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppPreviewSetsAppPreviewsReplaceToManyRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppPreviewSetsAppPreviewsReplaceToManyRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppPreviewSetsAppPreviewsReplaceToManyRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppPreviewsCreateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AppPreviewResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppPreviewsCreateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppPreviewsCreateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppPreviewsDeleteInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppPreviewsDeleteInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppPreviewsDeleteInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppPreviewsGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppPreviewResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppPreviewsGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppPreviewsGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppPreviewsUpdateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppPreviewResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppPreviewsUpdateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppPreviewsUpdateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppPricePointsGetCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppPricePointsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppPricePointsGetCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppPricePointsGetCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppPricePointsGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppPricePointResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppPricePointsGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppPricePointsGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppPricePointsTerritoryGetToOneRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TerritoryResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppPricePointsTerritoryGetToOneRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppPricePointsTerritoryGetToOneRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppPriceTiersGetCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppPriceTiersResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppPriceTiersGetCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppPriceTiersGetCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppPriceTiersGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppPriceTierResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppPriceTiersGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppPriceTiersGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppPriceTiersPricePointsGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppPricePointsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppPriceTiersPricePointsGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppPriceTiersPricePointsGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppPricesGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppPriceResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppPricesGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppPricesGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppScreenshotSetsCreateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AppScreenshotSetResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppScreenshotSetsCreateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppScreenshotSetsCreateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppScreenshotSetsDeleteInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppScreenshotSetsDeleteInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppScreenshotSetsDeleteInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppScreenshotSetsGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppScreenshotSetResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppScreenshotSetsGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppScreenshotSetsGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppScreenshotSetsAppScreenshotsGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppScreenshotsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppScreenshotSetsAppScreenshotsGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppScreenshotSetsAppScreenshotsGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppScreenshotSetsAppScreenshotsGetToManyRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppScreenshotSetAppScreenshotsLinkagesResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppScreenshotSetsAppScreenshotsGetToManyRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppScreenshotSetsAppScreenshotsGetToManyRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppScreenshotsCreateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AppScreenshotResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppScreenshotsCreateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppScreenshotsCreateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppScreenshotsDeleteInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppScreenshotsDeleteInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppScreenshotsDeleteInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppScreenshotsGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppScreenshotResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppScreenshotsGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppScreenshotsGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppScreenshotsUpdateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppScreenshotResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppScreenshotsUpdateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppScreenshotsUpdateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppStoreReviewAttachmentsCreateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AppStoreReviewAttachmentResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppStoreReviewAttachmentsCreateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppStoreReviewAttachmentsCreateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppStoreReviewAttachmentsDeleteInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppStoreReviewAttachmentsDeleteInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppStoreReviewAttachmentsDeleteInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppStoreReviewAttachmentsGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppStoreReviewAttachmentResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppStoreReviewAttachmentsGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppStoreReviewAttachmentsGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppStoreReviewAttachmentsUpdateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppStoreReviewAttachmentResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppStoreReviewAttachmentsUpdateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppStoreReviewAttachmentsUpdateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppStoreReviewDetailsCreateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AppStoreReviewDetailResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppStoreReviewDetailsCreateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppStoreReviewDetailsCreateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppStoreReviewDetailsGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppStoreReviewDetailResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppStoreReviewDetailsGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppStoreReviewDetailsGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppStoreReviewDetailsUpdateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppStoreReviewDetailResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppStoreReviewDetailsUpdateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppStoreReviewDetailsUpdateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppStoreReviewAttachmentsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppStoreVersionLocalizationsCreateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AppStoreVersionLocalizationResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppStoreVersionLocalizationsCreateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppStoreVersionLocalizationsCreateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppStoreVersionLocalizationsDeleteInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppStoreVersionLocalizationsDeleteInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppStoreVersionLocalizationsDeleteInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppStoreVersionLocalizationsGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppStoreVersionLocalizationResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppStoreVersionLocalizationsGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppStoreVersionLocalizationsGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppStoreVersionLocalizationsUpdateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppStoreVersionLocalizationResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppStoreVersionLocalizationsUpdateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppStoreVersionLocalizationsUpdateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppPreviewSetsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppScreenshotSetsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppStoreVersionPhasedReleasesCreateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AppStoreVersionPhasedReleaseResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppStoreVersionPhasedReleasesCreateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppStoreVersionPhasedReleasesCreateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppStoreVersionPhasedReleasesDeleteInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppStoreVersionPhasedReleasesDeleteInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppStoreVersionPhasedReleasesDeleteInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppStoreVersionPhasedReleasesUpdateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppStoreVersionPhasedReleaseResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppStoreVersionPhasedReleasesUpdateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppStoreVersionPhasedReleasesUpdateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppStoreVersionReleaseRequestsCreateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AppStoreVersionReleaseRequestResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppStoreVersionReleaseRequestsCreateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppStoreVersionReleaseRequestsCreateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppStoreVersionSubmissionsCreateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AppStoreVersionSubmissionResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppStoreVersionSubmissionsCreateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppStoreVersionSubmissionsCreateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppStoreVersionSubmissionsDeleteInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppStoreVersionSubmissionsDeleteInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppStoreVersionSubmissionsDeleteInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppStoreVersionsCreateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AppStoreVersionResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppStoreVersionsCreateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppStoreVersionsCreateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppStoreVersionsDeleteInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppStoreVersionsDeleteInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppStoreVersionsDeleteInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppStoreVersionsGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppStoreVersionResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppStoreVersionsGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppStoreVersionsGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppStoreVersionsUpdateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppStoreVersionResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppStoreVersionsUpdateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppStoreVersionsUpdateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppStoreVersionsAgeRatingDeclarationGetToOneRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AgeRatingDeclarationResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppStoreVersionsAgeRatingDeclarationGetToOneRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppStoreVersionsAgeRatingDeclarationGetToOneRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppStoreVersionsAppStoreReviewDetailGetToOneRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppStoreReviewDetailResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppStoreVersionsAppStoreReviewDetailGetToOneRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppStoreVersionsAppStoreReviewDetailGetToOneRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppStoreVersionLocalizationsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppStoreVersionPhasedReleaseResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppStoreVersionSubmissionResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppStoreVersionsBuildGetToOneRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BuildResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppStoreVersionsBuildGetToOneRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppStoreVersionsBuildGetToOneRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppStoreVersionsIdfaDeclarationGetToOneRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IdfaDeclarationResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppStoreVersionsIdfaDeclarationGetToOneRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppStoreVersionsIdfaDeclarationGetToOneRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppStoreVersionsBuildGetToOneRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppStoreVersionBuildLinkageResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppStoreVersionsBuildGetToOneRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppStoreVersionsBuildGetToOneRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppStoreVersionsBuildUpdateToOneRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppStoreVersionsBuildUpdateToOneRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppStoreVersionsBuildUpdateToOneRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppStoreVersionsRoutingAppCoverageGetToOneRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoutingAppCoverageResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppStoreVersionsRoutingAppCoverageGetToOneRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppStoreVersionsRoutingAppCoverageGetToOneRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppsGetCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppsGetCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppsGetCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppsGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppsGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppsGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppsUpdateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppsUpdateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppsUpdateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppsAppInfosGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppInfosResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppsAppInfosGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppsAppInfosGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppsAppStoreVersionsGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppStoreVersionsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppsAppStoreVersionsGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppsAppStoreVersionsGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppsAvailableTerritoriesGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TerritoriesResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppsAvailableTerritoriesGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppsAvailableTerritoriesGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppsBetaAppLocalizationsGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BetaAppLocalizationsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppsBetaAppLocalizationsGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppsBetaAppLocalizationsGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppsBetaAppReviewDetailGetToOneRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BetaAppReviewDetailResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppsBetaAppReviewDetailGetToOneRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppsBetaAppReviewDetailGetToOneRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppsBetaGroupsGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BetaGroupsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppsBetaGroupsGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppsBetaGroupsGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppsBetaLicenseAgreementGetToOneRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BetaLicenseAgreementResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppsBetaLicenseAgreementGetToOneRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppsBetaLicenseAgreementGetToOneRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppsBuildsGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BuildsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppsBuildsGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppsBuildsGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppsCiProductGetToOneRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CiProductResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppsCiProductGetToOneRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppsCiProductGetToOneRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppsEndUserLicenseAgreementGetToOneRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EndUserLicenseAgreementResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppsEndUserLicenseAgreementGetToOneRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppsEndUserLicenseAgreementGetToOneRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppsGameCenterEnabledVersionsGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GameCenterEnabledVersionsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppsGameCenterEnabledVersionsGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppsGameCenterEnabledVersionsGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppsInAppPurchasesGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InAppPurchasesResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppsInAppPurchasesGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppsInAppPurchasesGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppsPerfPowerMetricsGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PerfPowerMetricsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppsPerfPowerMetricsGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppsPerfPowerMetricsGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppsPreOrderGetToOneRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppPreOrderResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppsPreOrderGetToOneRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppsPreOrderGetToOneRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppsPreReleaseVersionsGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PreReleaseVersionsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppsPreReleaseVersionsGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppsPreReleaseVersionsGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppsPricesGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppPricesResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppsPricesGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppsPricesGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppsBetaTestersDeleteToManyRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppsBetaTestersDeleteToManyRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppsBetaTestersDeleteToManyRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaAppLocalizationsGetCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BetaAppLocalizationsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaAppLocalizationsGetCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaAppLocalizationsGetCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaAppLocalizationsCreateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BetaAppLocalizationResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaAppLocalizationsCreateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaAppLocalizationsCreateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaAppLocalizationsDeleteInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaAppLocalizationsDeleteInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaAppLocalizationsDeleteInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaAppLocalizationsGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BetaAppLocalizationResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaAppLocalizationsGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaAppLocalizationsGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaAppLocalizationsUpdateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BetaAppLocalizationResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaAppLocalizationsUpdateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaAppLocalizationsUpdateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaAppLocalizationsAppGetToOneRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaAppLocalizationsAppGetToOneRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaAppLocalizationsAppGetToOneRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaAppReviewDetailsGetCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BetaAppReviewDetailsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaAppReviewDetailsGetCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaAppReviewDetailsGetCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaAppReviewDetailsGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BetaAppReviewDetailResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaAppReviewDetailsGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaAppReviewDetailsGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaAppReviewDetailsUpdateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BetaAppReviewDetailResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaAppReviewDetailsUpdateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaAppReviewDetailsUpdateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaAppReviewDetailsAppGetToOneRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaAppReviewDetailsAppGetToOneRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaAppReviewDetailsAppGetToOneRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaAppReviewSubmissionsGetCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BetaAppReviewSubmissionsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaAppReviewSubmissionsGetCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaAppReviewSubmissionsGetCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaAppReviewSubmissionsCreateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BetaAppReviewSubmissionResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaAppReviewSubmissionsCreateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaAppReviewSubmissionsCreateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaAppReviewSubmissionsGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BetaAppReviewSubmissionResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaAppReviewSubmissionsGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaAppReviewSubmissionsGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaAppReviewSubmissionsBuildGetToOneRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BuildResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaAppReviewSubmissionsBuildGetToOneRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaAppReviewSubmissionsBuildGetToOneRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaBuildLocalizationsGetCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BetaBuildLocalizationsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaBuildLocalizationsGetCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaBuildLocalizationsGetCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaBuildLocalizationsCreateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BetaBuildLocalizationResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaBuildLocalizationsCreateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaBuildLocalizationsCreateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaBuildLocalizationsDeleteInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaBuildLocalizationsDeleteInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaBuildLocalizationsDeleteInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaBuildLocalizationsGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BetaBuildLocalizationResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaBuildLocalizationsGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaBuildLocalizationsGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaBuildLocalizationsUpdateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BetaBuildLocalizationResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaBuildLocalizationsUpdateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaBuildLocalizationsUpdateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaBuildLocalizationsBuildGetToOneRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BuildResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaBuildLocalizationsBuildGetToOneRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaBuildLocalizationsBuildGetToOneRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaGroupsGetCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BetaGroupsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaGroupsGetCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaGroupsGetCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaGroupsCreateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BetaGroupResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaGroupsCreateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaGroupsCreateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaGroupsDeleteInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaGroupsDeleteInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaGroupsDeleteInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaGroupsGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BetaGroupResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaGroupsGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaGroupsGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaGroupsUpdateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BetaGroupResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaGroupsUpdateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaGroupsUpdateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaGroupsAppGetToOneRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaGroupsAppGetToOneRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaGroupsAppGetToOneRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaGroupsBetaTestersGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BetaTestersResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaGroupsBetaTestersGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaGroupsBetaTestersGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaGroupsBuildsGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BuildsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaGroupsBuildsGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaGroupsBuildsGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaGroupsBetaTestersDeleteToManyRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaGroupsBetaTestersDeleteToManyRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaGroupsBetaTestersDeleteToManyRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaGroupsBetaTestersGetToManyRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BetaGroupBetaTestersLinkagesResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaGroupsBetaTestersGetToManyRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaGroupsBetaTestersGetToManyRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaGroupsBetaTestersCreateToManyRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaGroupsBetaTestersCreateToManyRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaGroupsBetaTestersCreateToManyRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaGroupsBuildsDeleteToManyRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaGroupsBuildsDeleteToManyRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaGroupsBuildsDeleteToManyRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaGroupsBuildsGetToManyRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BetaGroupBuildsLinkagesResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaGroupsBuildsGetToManyRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaGroupsBuildsGetToManyRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaGroupsBuildsCreateToManyRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaGroupsBuildsCreateToManyRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaGroupsBuildsCreateToManyRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaLicenseAgreementsGetCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BetaLicenseAgreementsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaLicenseAgreementsGetCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaLicenseAgreementsGetCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaLicenseAgreementsGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BetaLicenseAgreementResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaLicenseAgreementsGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaLicenseAgreementsGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaLicenseAgreementsUpdateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BetaLicenseAgreementResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaLicenseAgreementsUpdateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaLicenseAgreementsUpdateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaLicenseAgreementsAppGetToOneRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaLicenseAgreementsAppGetToOneRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaLicenseAgreementsAppGetToOneRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaTesterInvitationsCreateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BetaTesterInvitationResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaTesterInvitationsCreateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaTesterInvitationsCreateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaTestersGetCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BetaTestersResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaTestersGetCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaTestersGetCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaTestersCreateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BetaTesterResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaTestersCreateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaTestersCreateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaTestersDeleteInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaTestersDeleteInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaTestersDeleteInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaTestersGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BetaTesterResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaTestersGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaTestersGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaTestersAppsGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaTestersAppsGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaTestersAppsGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaTestersBetaGroupsGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BetaGroupsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaTestersBetaGroupsGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaTestersBetaGroupsGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaTestersBuildsGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BuildsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaTestersBuildsGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaTestersBuildsGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaTestersAppsDeleteToManyRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaTestersAppsDeleteToManyRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaTestersAppsDeleteToManyRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaTestersAppsGetToManyRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BetaTesterAppsLinkagesResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaTestersAppsGetToManyRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaTestersAppsGetToManyRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaTestersBetaGroupsDeleteToManyRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaTestersBetaGroupsDeleteToManyRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaTestersBetaGroupsDeleteToManyRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaTestersBetaGroupsGetToManyRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BetaTesterBetaGroupsLinkagesResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaTestersBetaGroupsGetToManyRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaTestersBetaGroupsGetToManyRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaTestersBetaGroupsCreateToManyRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaTestersBetaGroupsCreateToManyRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaTestersBetaGroupsCreateToManyRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaTestersBuildsDeleteToManyRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaTestersBuildsDeleteToManyRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaTestersBuildsDeleteToManyRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaTestersBuildsGetToManyRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BetaTesterBuildsLinkagesResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaTestersBuildsGetToManyRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaTestersBuildsGetToManyRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BetaTestersBuildsCreateToManyRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BetaTestersBuildsCreateToManyRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BetaTestersBuildsCreateToManyRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BuildBetaDetailsGetCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BuildBetaDetailsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BuildBetaDetailsGetCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BuildBetaDetailsGetCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BuildBetaDetailsGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BuildBetaDetailResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BuildBetaDetailsGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BuildBetaDetailsGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BuildBetaDetailsUpdateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BuildBetaDetailResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BuildBetaDetailsUpdateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BuildBetaDetailsUpdateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BuildBetaDetailsBuildGetToOneRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BuildResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BuildBetaDetailsBuildGetToOneRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BuildBetaDetailsBuildGetToOneRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BuildBetaNotificationsCreateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BuildBetaNotificationResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BuildBetaNotificationsCreateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BuildBetaNotificationsCreateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BuildsGetCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BuildsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BuildsGetCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BuildsGetCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BuildsGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BuildResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BuildsGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BuildsGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BuildsUpdateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BuildResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BuildsUpdateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BuildsUpdateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BuildsAppGetToOneRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BuildsAppGetToOneRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BuildsAppGetToOneRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BuildsAppEncryptionDeclarationGetToOneRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppEncryptionDeclarationResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BuildsAppEncryptionDeclarationGetToOneRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BuildsAppEncryptionDeclarationGetToOneRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BuildsAppStoreVersionGetToOneRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppStoreVersionResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BuildsAppStoreVersionGetToOneRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BuildsAppStoreVersionGetToOneRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BuildsBetaAppReviewSubmissionGetToOneRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BetaAppReviewSubmissionResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BuildsBetaAppReviewSubmissionGetToOneRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BuildsBetaAppReviewSubmissionGetToOneRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BuildsBetaBuildLocalizationsGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BetaBuildLocalizationsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BuildsBetaBuildLocalizationsGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BuildsBetaBuildLocalizationsGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BuildsBuildBetaDetailGetToOneRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BuildBetaDetailResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BuildsBuildBetaDetailGetToOneRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BuildsBuildBetaDetailGetToOneRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BuildsDiagnosticSignaturesGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DiagnosticSignaturesResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BuildsDiagnosticSignaturesGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BuildsDiagnosticSignaturesGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BuildsIconsGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BuildIconsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BuildsIconsGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BuildsIconsGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BuildsIndividualTestersGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BetaTestersResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BuildsIndividualTestersGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BuildsIndividualTestersGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BuildsPerfPowerMetricsGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PerfPowerMetricsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BuildsPerfPowerMetricsGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BuildsPerfPowerMetricsGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BuildsPreReleaseVersionGetToOneRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrereleaseVersionResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BuildsPreReleaseVersionGetToOneRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BuildsPreReleaseVersionGetToOneRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BuildsAppEncryptionDeclarationGetToOneRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BuildAppEncryptionDeclarationLinkageResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BuildsAppEncryptionDeclarationGetToOneRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BuildsAppEncryptionDeclarationGetToOneRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BuildsAppEncryptionDeclarationUpdateToOneRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BuildsAppEncryptionDeclarationUpdateToOneRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BuildsAppEncryptionDeclarationUpdateToOneRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BuildsBetaGroupsDeleteToManyRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BuildsBetaGroupsDeleteToManyRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BuildsBetaGroupsDeleteToManyRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BuildsBetaGroupsCreateToManyRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BuildsBetaGroupsCreateToManyRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BuildsBetaGroupsCreateToManyRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BuildsIndividualTestersDeleteToManyRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BuildsIndividualTestersDeleteToManyRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BuildsIndividualTestersDeleteToManyRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BuildsIndividualTestersGetToManyRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BuildIndividualTestersLinkagesResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BuildsIndividualTestersGetToManyRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BuildsIndividualTestersGetToManyRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BuildsIndividualTestersCreateToManyRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BuildsIndividualTestersCreateToManyRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BuildsIndividualTestersCreateToManyRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundleIdCapabilitiesCreateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BundleIdCapabilityResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BundleIdCapabilitiesCreateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundleIdCapabilitiesCreateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundleIdCapabilitiesDeleteInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BundleIdCapabilitiesDeleteInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundleIdCapabilitiesDeleteInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundleIdCapabilitiesUpdateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BundleIdCapabilityResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BundleIdCapabilitiesUpdateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundleIdCapabilitiesUpdateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundleIdsGetCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BundleIdsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BundleIdsGetCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundleIdsGetCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundleIdsCreateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BundleIdResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BundleIdsCreateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundleIdsCreateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundleIdsDeleteInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BundleIdsDeleteInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundleIdsDeleteInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundleIdsGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BundleIdResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BundleIdsGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundleIdsGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundleIdsUpdateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BundleIdResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BundleIdsUpdateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundleIdsUpdateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundleIdsAppGetToOneRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BundleIdsAppGetToOneRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundleIdsAppGetToOneRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundleIdsBundleIdCapabilitiesGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BundleIdCapabilitiesResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BundleIdsBundleIdCapabilitiesGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundleIdsBundleIdCapabilitiesGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundleIdsProfilesGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProfilesResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BundleIdsProfilesGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundleIdsProfilesGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CertificatesGetCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CertificatesResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CertificatesGetCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CertificatesGetCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CertificatesCreateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CertificateResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CertificatesCreateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CertificatesCreateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CertificatesDeleteInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CertificatesDeleteInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CertificatesDeleteInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CertificatesGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CertificateResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CertificatesGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CertificatesGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CiArtifactsGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CiArtifactResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CiArtifactsGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CiArtifactsGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CiBuildActionsGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CiBuildActionResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CiBuildActionsGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CiBuildActionsGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CiBuildActionsArtifactsGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CiArtifactsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CiBuildActionsArtifactsGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CiBuildActionsArtifactsGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CiBuildActionsBuildRunGetToOneRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CiBuildRunResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CiBuildActionsBuildRunGetToOneRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CiBuildActionsBuildRunGetToOneRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CiBuildActionsIssuesGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CiIssuesResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CiBuildActionsIssuesGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CiBuildActionsIssuesGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CiBuildActionsTestResultsGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CiTestResultsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CiBuildActionsTestResultsGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CiBuildActionsTestResultsGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CiBuildRunsCreateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CiBuildRunResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CiBuildRunsCreateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CiBuildRunsCreateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CiBuildRunsGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CiBuildRunResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CiBuildRunsGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CiBuildRunsGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CiBuildRunsActionsGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CiBuildActionsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CiBuildRunsActionsGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CiBuildRunsActionsGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CiBuildRunsBuildsGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BuildsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CiBuildRunsBuildsGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CiBuildRunsBuildsGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CiIssuesGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CiIssueResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CiIssuesGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CiIssuesGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CiMacOsVersionsGetCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CiMacOsVersionsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CiMacOsVersionsGetCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CiMacOsVersionsGetCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CiMacOsVersionsGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CiMacOsVersionResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CiMacOsVersionsGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CiMacOsVersionsGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CiMacOsVersionsXcodeVersionsGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CiXcodeVersionsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CiMacOsVersionsXcodeVersionsGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CiMacOsVersionsXcodeVersionsGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CiProductsGetCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CiProductsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CiProductsGetCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CiProductsGetCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CiProductsDeleteInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CiProductsDeleteInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CiProductsDeleteInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CiProductsGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CiProductResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CiProductsGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CiProductsGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CiProductsAdditionalRepositoriesGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScmRepositoriesResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CiProductsAdditionalRepositoriesGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CiProductsAdditionalRepositoriesGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CiProductsAppGetToOneRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CiProductsAppGetToOneRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CiProductsAppGetToOneRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CiProductsBuildRunsGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CiBuildRunsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CiProductsBuildRunsGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CiProductsBuildRunsGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CiProductsPrimaryRepositoriesGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScmRepositoriesResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CiProductsPrimaryRepositoriesGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CiProductsPrimaryRepositoriesGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CiProductsWorkflowsGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CiWorkflowsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CiProductsWorkflowsGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CiProductsWorkflowsGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CiTestResultsGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CiTestResultResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CiTestResultsGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CiTestResultsGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CiWorkflowsCreateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CiWorkflowResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CiWorkflowsCreateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CiWorkflowsCreateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CiWorkflowsDeleteInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CiWorkflowsDeleteInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CiWorkflowsDeleteInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CiWorkflowsGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CiWorkflowResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CiWorkflowsGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CiWorkflowsGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CiWorkflowsUpdateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CiWorkflowResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CiWorkflowsUpdateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CiWorkflowsUpdateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CiWorkflowsBuildRunsGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CiBuildRunsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CiWorkflowsBuildRunsGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CiWorkflowsBuildRunsGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CiWorkflowsRepositoryGetToOneRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScmRepositoryResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CiWorkflowsRepositoryGetToOneRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CiWorkflowsRepositoryGetToOneRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CiXcodeVersionsGetCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CiXcodeVersionsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CiXcodeVersionsGetCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CiXcodeVersionsGetCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CiXcodeVersionsGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CiXcodeVersionResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CiXcodeVersionsGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CiXcodeVersionsGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CiXcodeVersionsMacOsVersionsGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CiMacOsVersionsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CiXcodeVersionsMacOsVersionsGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CiXcodeVersionsMacOsVersionsGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevicesGetCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DevicesResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DevicesGetCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevicesGetCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevicesCreateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *DeviceResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DevicesCreateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevicesCreateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevicesGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DevicesGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevicesGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DevicesUpdateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DevicesUpdateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DevicesUpdateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DiagnosticSignaturesLogsGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DiagnosticLogsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DiagnosticSignaturesLogsGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DiagnosticSignaturesLogsGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EndUserLicenseAgreementsCreateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *EndUserLicenseAgreementResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r EndUserLicenseAgreementsCreateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EndUserLicenseAgreementsCreateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EndUserLicenseAgreementsDeleteInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r EndUserLicenseAgreementsDeleteInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EndUserLicenseAgreementsDeleteInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EndUserLicenseAgreementsGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EndUserLicenseAgreementResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r EndUserLicenseAgreementsGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EndUserLicenseAgreementsGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EndUserLicenseAgreementsUpdateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EndUserLicenseAgreementResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r EndUserLicenseAgreementsUpdateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EndUserLicenseAgreementsUpdateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EndUserLicenseAgreementsTerritoriesGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TerritoriesResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r EndUserLicenseAgreementsTerritoriesGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EndUserLicenseAgreementsTerritoriesGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FinanceReportsGetCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r FinanceReportsGetCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FinanceReportsGetCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GameCenterEnabledVersionsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GameCenterEnabledVersionCompatibleVersionsLinkagesResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IdfaDeclarationsCreateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *IdfaDeclarationResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r IdfaDeclarationsCreateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IdfaDeclarationsCreateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IdfaDeclarationsDeleteInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r IdfaDeclarationsDeleteInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IdfaDeclarationsDeleteInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IdfaDeclarationsUpdateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IdfaDeclarationResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r IdfaDeclarationsUpdateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IdfaDeclarationsUpdateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InAppPurchasesGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InAppPurchaseResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r InAppPurchasesGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InAppPurchasesGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PreReleaseVersionsGetCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PreReleaseVersionsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PreReleaseVersionsGetCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PreReleaseVersionsGetCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PreReleaseVersionsGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrereleaseVersionResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PreReleaseVersionsGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PreReleaseVersionsGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PreReleaseVersionsAppGetToOneRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PreReleaseVersionsAppGetToOneRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PreReleaseVersionsAppGetToOneRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PreReleaseVersionsBuildsGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BuildsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PreReleaseVersionsBuildsGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PreReleaseVersionsBuildsGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProfilesGetCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProfilesResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ProfilesGetCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProfilesGetCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProfilesCreateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ProfileResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ProfilesCreateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProfilesCreateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProfilesDeleteInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ProfilesDeleteInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProfilesDeleteInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProfilesGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProfileResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ProfilesGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProfilesGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProfilesBundleIdGetToOneRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BundleIdResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ProfilesBundleIdGetToOneRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProfilesBundleIdGetToOneRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProfilesCertificatesGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CertificatesResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ProfilesCertificatesGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProfilesCertificatesGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProfilesDevicesGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DevicesResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ProfilesDevicesGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProfilesDevicesGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RoutingAppCoveragesCreateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RoutingAppCoverageResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RoutingAppCoveragesCreateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RoutingAppCoveragesCreateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RoutingAppCoveragesDeleteInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RoutingAppCoveragesDeleteInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RoutingAppCoveragesDeleteInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RoutingAppCoveragesGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoutingAppCoverageResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RoutingAppCoveragesGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RoutingAppCoveragesGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RoutingAppCoveragesUpdateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoutingAppCoverageResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RoutingAppCoveragesUpdateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RoutingAppCoveragesUpdateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SalesReportsGetCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r SalesReportsGetCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SalesReportsGetCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScmGitReferencesGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScmGitReferenceResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ScmGitReferencesGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScmGitReferencesGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScmProvidersGetCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScmProvidersResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ScmProvidersGetCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScmProvidersGetCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScmProvidersGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScmProviderResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ScmProvidersGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScmProvidersGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScmProvidersRepositoriesGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScmRepositoriesResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ScmProvidersRepositoriesGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScmProvidersRepositoriesGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScmPullRequestsGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScmPullRequestResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ScmPullRequestsGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScmPullRequestsGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScmRepositoriesGetCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScmRepositoriesResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ScmRepositoriesGetCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScmRepositoriesGetCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScmRepositoriesGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScmRepositoryResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ScmRepositoriesGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScmRepositoriesGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScmRepositoriesGitReferencesGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScmGitReferencesResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ScmRepositoriesGitReferencesGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScmRepositoriesGitReferencesGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScmRepositoriesPullRequestsGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScmPullRequestsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ScmRepositoriesPullRequestsGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScmRepositoriesPullRequestsGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TerritoriesGetCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TerritoriesResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r TerritoriesGetCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TerritoriesGetCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserInvitationsGetCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserInvitationsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UserInvitationsGetCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserInvitationsGetCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserInvitationsCreateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UserInvitationResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UserInvitationsCreateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserInvitationsCreateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserInvitationsDeleteInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UserInvitationsDeleteInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserInvitationsDeleteInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserInvitationsGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserInvitationResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UserInvitationsGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserInvitationsGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserInvitationsVisibleAppsGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UserInvitationsVisibleAppsGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserInvitationsVisibleAppsGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersGetCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UsersResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UsersGetCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersGetCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersDeleteInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UsersDeleteInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersDeleteInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersGetInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UsersGetInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersGetInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersUpdateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UsersUpdateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersUpdateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersVisibleAppsDeleteToManyRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UsersVisibleAppsDeleteToManyRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersVisibleAppsDeleteToManyRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersVisibleAppsGetToManyRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserVisibleAppsLinkagesResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UsersVisibleAppsGetToManyRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersVisibleAppsGetToManyRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersVisibleAppsReplaceToManyRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UsersVisibleAppsReplaceToManyRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersVisibleAppsReplaceToManyRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersVisibleAppsCreateToManyRelationshipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UsersVisibleAppsCreateToManyRelationshipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersVisibleAppsCreateToManyRelationshipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersVisibleAppsGetToManyRelatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UsersVisibleAppsGetToManyRelatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersVisibleAppsGetToManyRelatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AgeRatingDeclarationsUpdateInstanceWithBodyWithResponse request with arbitrary body returning *AgeRatingDeclarationsUpdateInstanceResponse
func (c *ClientWithResponses) AgeRatingDeclarationsUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AgeRatingDeclarationsUpdateInstanceResponse, error) {
	rsp, err := c.AgeRatingDeclarationsUpdateInstanceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAgeRatingDeclarationsUpdateInstanceResponse(rsp)
}

func (c *ClientWithResponses) AgeRatingDeclarationsUpdateInstanceWithResponse(ctx context.Context, id string, body AgeRatingDeclarationsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AgeRatingDeclarationsUpdateInstanceResponse, error) {
	rsp, err := c.AgeRatingDeclarationsUpdateInstance(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAgeRatingDeclarationsUpdateInstanceResponse(rsp)
}

// AppCategoriesGetCollectionWithResponse request returning *AppCategoriesGetCollectionResponse
func (c *ClientWithResponses) AppCategoriesGetCollectionWithResponse(ctx context.Context, params *AppCategoriesGetCollectionParams, reqEditors ...RequestEditorFn) (*AppCategoriesGetCollectionResponse, error) {
	rsp, err := c.AppCategoriesGetCollection(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppCategoriesGetCollectionResponse(rsp)
}

// AppCategoriesGetInstanceWithResponse request returning *AppCategoriesGetInstanceResponse
func (c *ClientWithResponses) AppCategoriesGetInstanceWithResponse(ctx context.Context, id string, params *AppCategoriesGetInstanceParams, reqEditors ...RequestEditorFn) (*AppCategoriesGetInstanceResponse, error) {
	rsp, err := c.AppCategoriesGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppCategoriesGetInstanceResponse(rsp)
}

// AppCategoriesParentGetToOneRelatedWithResponse request returning *AppCategoriesParentGetToOneRelatedResponse
func (c *ClientWithResponses) AppCategoriesParentGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppCategoriesParentGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppCategoriesParentGetToOneRelatedResponse, error) {
	rsp, err := c.AppCategoriesParentGetToOneRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppCategoriesParentGetToOneRelatedResponse(rsp)
}

// AppCategoriesSubcategoriesGetToManyRelatedWithResponse request returning *AppCategoriesSubcategoriesGetToManyRelatedResponse
func (c *ClientWithResponses) AppCategoriesSubcategoriesGetToManyRelatedWithResponse(ctx context.Context, id string, params *AppCategoriesSubcategoriesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*AppCategoriesSubcategoriesGetToManyRelatedResponse, error) {
	rsp, err := c.AppCategoriesSubcategoriesGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppCategoriesSubcategoriesGetToManyRelatedResponse(rsp)
}

// AppEncryptionDeclarationsGetCollectionWithResponse request returning *AppEncryptionDeclarationsGetCollectionResponse
func (c *ClientWithResponses) AppEncryptionDeclarationsGetCollectionWithResponse(ctx context.Context, params *AppEncryptionDeclarationsGetCollectionParams, reqEditors ...RequestEditorFn) (*AppEncryptionDeclarationsGetCollectionResponse, error) {
	rsp, err := c.AppEncryptionDeclarationsGetCollection(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppEncryptionDeclarationsGetCollectionResponse(rsp)
}

// AppEncryptionDeclarationsGetInstanceWithResponse request returning *AppEncryptionDeclarationsGetInstanceResponse
func (c *ClientWithResponses) AppEncryptionDeclarationsGetInstanceWithResponse(ctx context.Context, id string, params *AppEncryptionDeclarationsGetInstanceParams, reqEditors ...RequestEditorFn) (*AppEncryptionDeclarationsGetInstanceResponse, error) {
	rsp, err := c.AppEncryptionDeclarationsGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppEncryptionDeclarationsGetInstanceResponse(rsp)
}

// AppEncryptionDeclarationsAppGetToOneRelatedWithResponse request returning *AppEncryptionDeclarationsAppGetToOneRelatedResponse
func (c *ClientWithResponses) AppEncryptionDeclarationsAppGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppEncryptionDeclarationsAppGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppEncryptionDeclarationsAppGetToOneRelatedResponse, error) {
	rsp, err := c.AppEncryptionDeclarationsAppGetToOneRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppEncryptionDeclarationsAppGetToOneRelatedResponse(rsp)
}

// AppEncryptionDeclarationsBuildsCreateToManyRelationshipWithBodyWithResponse request with arbitrary body returning *AppEncryptionDeclarationsBuildsCreateToManyRelationshipResponse
func (c *ClientWithResponses) AppEncryptionDeclarationsBuildsCreateToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppEncryptionDeclarationsBuildsCreateToManyRelationshipResponse, error) {
	rsp, err := c.AppEncryptionDeclarationsBuildsCreateToManyRelationshipWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppEncryptionDeclarationsBuildsCreateToManyRelationshipResponse(rsp)
}

func (c *ClientWithResponses) AppEncryptionDeclarationsBuildsCreateToManyRelationshipWithResponse(ctx context.Context, id string, body AppEncryptionDeclarationsBuildsCreateToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*AppEncryptionDeclarationsBuildsCreateToManyRelationshipResponse, error) {
	rsp, err := c.AppEncryptionDeclarationsBuildsCreateToManyRelationship(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppEncryptionDeclarationsBuildsCreateToManyRelationshipResponse(rsp)
}

// AppInfoLocalizationsCreateInstanceWithBodyWithResponse request with arbitrary body returning *AppInfoLocalizationsCreateInstanceResponse
func (c *ClientWithResponses) AppInfoLocalizationsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppInfoLocalizationsCreateInstanceResponse, error) {
	rsp, err := c.AppInfoLocalizationsCreateInstanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppInfoLocalizationsCreateInstanceResponse(rsp)
}

func (c *ClientWithResponses) AppInfoLocalizationsCreateInstanceWithResponse(ctx context.Context, body AppInfoLocalizationsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppInfoLocalizationsCreateInstanceResponse, error) {
	rsp, err := c.AppInfoLocalizationsCreateInstance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppInfoLocalizationsCreateInstanceResponse(rsp)
}

// AppInfoLocalizationsDeleteInstanceWithResponse request returning *AppInfoLocalizationsDeleteInstanceResponse
func (c *ClientWithResponses) AppInfoLocalizationsDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AppInfoLocalizationsDeleteInstanceResponse, error) {
	rsp, err := c.AppInfoLocalizationsDeleteInstance(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppInfoLocalizationsDeleteInstanceResponse(rsp)
}

// AppInfoLocalizationsGetInstanceWithResponse request returning *AppInfoLocalizationsGetInstanceResponse
func (c *ClientWithResponses) AppInfoLocalizationsGetInstanceWithResponse(ctx context.Context, id string, params *AppInfoLocalizationsGetInstanceParams, reqEditors ...RequestEditorFn) (*AppInfoLocalizationsGetInstanceResponse, error) {
	rsp, err := c.AppInfoLocalizationsGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppInfoLocalizationsGetInstanceResponse(rsp)
}

// AppInfoLocalizationsUpdateInstanceWithBodyWithResponse request with arbitrary body returning *AppInfoLocalizationsUpdateInstanceResponse
func (c *ClientWithResponses) AppInfoLocalizationsUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppInfoLocalizationsUpdateInstanceResponse, error) {
	rsp, err := c.AppInfoLocalizationsUpdateInstanceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppInfoLocalizationsUpdateInstanceResponse(rsp)
}

func (c *ClientWithResponses) AppInfoLocalizationsUpdateInstanceWithResponse(ctx context.Context, id string, body AppInfoLocalizationsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppInfoLocalizationsUpdateInstanceResponse, error) {
	rsp, err := c.AppInfoLocalizationsUpdateInstance(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppInfoLocalizationsUpdateInstanceResponse(rsp)
}

// AppInfosGetInstanceWithResponse request returning *AppInfosGetInstanceResponse
func (c *ClientWithResponses) AppInfosGetInstanceWithResponse(ctx context.Context, id string, params *AppInfosGetInstanceParams, reqEditors ...RequestEditorFn) (*AppInfosGetInstanceResponse, error) {
	rsp, err := c.AppInfosGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppInfosGetInstanceResponse(rsp)
}

// AppInfosUpdateInstanceWithBodyWithResponse request with arbitrary body returning *AppInfosUpdateInstanceResponse
func (c *ClientWithResponses) AppInfosUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppInfosUpdateInstanceResponse, error) {
	rsp, err := c.AppInfosUpdateInstanceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppInfosUpdateInstanceResponse(rsp)
}

func (c *ClientWithResponses) AppInfosUpdateInstanceWithResponse(ctx context.Context, id string, body AppInfosUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppInfosUpdateInstanceResponse, error) {
	rsp, err := c.AppInfosUpdateInstance(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppInfosUpdateInstanceResponse(rsp)
}

// AppInfosAgeRatingDeclarationGetToOneRelatedWithResponse request returning *AppInfosAgeRatingDeclarationGetToOneRelatedResponse
func (c *ClientWithResponses) AppInfosAgeRatingDeclarationGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppInfosAgeRatingDeclarationGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppInfosAgeRatingDeclarationGetToOneRelatedResponse, error) {
	rsp, err := c.AppInfosAgeRatingDeclarationGetToOneRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppInfosAgeRatingDeclarationGetToOneRelatedResponse(rsp)
}

// AppInfosAppInfoLocalizationsGetToManyRelatedWithResponse request returning *AppInfosAppInfoLocalizationsGetToManyRelatedResponse
func (c *ClientWithResponses) AppInfosAppInfoLocalizationsGetToManyRelatedWithResponse(ctx context.Context, id string, params *AppInfosAppInfoLocalizationsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*AppInfosAppInfoLocalizationsGetToManyRelatedResponse, error) {
	rsp, err := c.AppInfosAppInfoLocalizationsGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppInfosAppInfoLocalizationsGetToManyRelatedResponse(rsp)
}

// AppInfosPrimaryCategoryGetToOneRelatedWithResponse request returning *AppInfosPrimaryCategoryGetToOneRelatedResponse
func (c *ClientWithResponses) AppInfosPrimaryCategoryGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppInfosPrimaryCategoryGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppInfosPrimaryCategoryGetToOneRelatedResponse, error) {
	rsp, err := c.AppInfosPrimaryCategoryGetToOneRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppInfosPrimaryCategoryGetToOneRelatedResponse(rsp)
}

// AppInfosPrimarySubcategoryOneGetToOneRelatedWithResponse request returning *AppInfosPrimarySubcategoryOneGetToOneRelatedResponse
func (c *ClientWithResponses) AppInfosPrimarySubcategoryOneGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppInfosPrimarySubcategoryOneGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppInfosPrimarySubcategoryOneGetToOneRelatedResponse, error) {
	rsp, err := c.AppInfosPrimarySubcategoryOneGetToOneRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppInfosPrimarySubcategoryOneGetToOneRelatedResponse(rsp)
}

// AppInfosPrimarySubcategoryTwoGetToOneRelatedWithResponse request returning *AppInfosPrimarySubcategoryTwoGetToOneRelatedResponse
func (c *ClientWithResponses) AppInfosPrimarySubcategoryTwoGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppInfosPrimarySubcategoryTwoGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppInfosPrimarySubcategoryTwoGetToOneRelatedResponse, error) {
	rsp, err := c.AppInfosPrimarySubcategoryTwoGetToOneRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppInfosPrimarySubcategoryTwoGetToOneRelatedResponse(rsp)
}

// AppInfosSecondaryCategoryGetToOneRelatedWithResponse request returning *AppInfosSecondaryCategoryGetToOneRelatedResponse
func (c *ClientWithResponses) AppInfosSecondaryCategoryGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppInfosSecondaryCategoryGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppInfosSecondaryCategoryGetToOneRelatedResponse, error) {
	rsp, err := c.AppInfosSecondaryCategoryGetToOneRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppInfosSecondaryCategoryGetToOneRelatedResponse(rsp)
}

// AppInfosSecondarySubcategoryOneGetToOneRelatedWithResponse request returning *AppInfosSecondarySubcategoryOneGetToOneRelatedResponse
func (c *ClientWithResponses) AppInfosSecondarySubcategoryOneGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppInfosSecondarySubcategoryOneGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppInfosSecondarySubcategoryOneGetToOneRelatedResponse, error) {
	rsp, err := c.AppInfosSecondarySubcategoryOneGetToOneRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppInfosSecondarySubcategoryOneGetToOneRelatedResponse(rsp)
}

// AppInfosSecondarySubcategoryTwoGetToOneRelatedWithResponse request returning *AppInfosSecondarySubcategoryTwoGetToOneRelatedResponse
func (c *ClientWithResponses) AppInfosSecondarySubcategoryTwoGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppInfosSecondarySubcategoryTwoGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppInfosSecondarySubcategoryTwoGetToOneRelatedResponse, error) {
	rsp, err := c.AppInfosSecondarySubcategoryTwoGetToOneRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppInfosSecondarySubcategoryTwoGetToOneRelatedResponse(rsp)
}

// AppPreOrdersCreateInstanceWithBodyWithResponse request with arbitrary body returning *AppPreOrdersCreateInstanceResponse
func (c *ClientWithResponses) AppPreOrdersCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppPreOrdersCreateInstanceResponse, error) {
	rsp, err := c.AppPreOrdersCreateInstanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppPreOrdersCreateInstanceResponse(rsp)
}

func (c *ClientWithResponses) AppPreOrdersCreateInstanceWithResponse(ctx context.Context, body AppPreOrdersCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppPreOrdersCreateInstanceResponse, error) {
	rsp, err := c.AppPreOrdersCreateInstance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppPreOrdersCreateInstanceResponse(rsp)
}

// AppPreOrdersDeleteInstanceWithResponse request returning *AppPreOrdersDeleteInstanceResponse
func (c *ClientWithResponses) AppPreOrdersDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AppPreOrdersDeleteInstanceResponse, error) {
	rsp, err := c.AppPreOrdersDeleteInstance(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppPreOrdersDeleteInstanceResponse(rsp)
}

// AppPreOrdersGetInstanceWithResponse request returning *AppPreOrdersGetInstanceResponse
func (c *ClientWithResponses) AppPreOrdersGetInstanceWithResponse(ctx context.Context, id string, params *AppPreOrdersGetInstanceParams, reqEditors ...RequestEditorFn) (*AppPreOrdersGetInstanceResponse, error) {
	rsp, err := c.AppPreOrdersGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppPreOrdersGetInstanceResponse(rsp)
}

// AppPreOrdersUpdateInstanceWithBodyWithResponse request with arbitrary body returning *AppPreOrdersUpdateInstanceResponse
func (c *ClientWithResponses) AppPreOrdersUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppPreOrdersUpdateInstanceResponse, error) {
	rsp, err := c.AppPreOrdersUpdateInstanceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppPreOrdersUpdateInstanceResponse(rsp)
}

func (c *ClientWithResponses) AppPreOrdersUpdateInstanceWithResponse(ctx context.Context, id string, body AppPreOrdersUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppPreOrdersUpdateInstanceResponse, error) {
	rsp, err := c.AppPreOrdersUpdateInstance(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppPreOrdersUpdateInstanceResponse(rsp)
}

// AppPreviewSetsCreateInstanceWithBodyWithResponse request with arbitrary body returning *AppPreviewSetsCreateInstanceResponse
func (c *ClientWithResponses) AppPreviewSetsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppPreviewSetsCreateInstanceResponse, error) {
	rsp, err := c.AppPreviewSetsCreateInstanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppPreviewSetsCreateInstanceResponse(rsp)
}

func (c *ClientWithResponses) AppPreviewSetsCreateInstanceWithResponse(ctx context.Context, body AppPreviewSetsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppPreviewSetsCreateInstanceResponse, error) {
	rsp, err := c.AppPreviewSetsCreateInstance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppPreviewSetsCreateInstanceResponse(rsp)
}

// AppPreviewSetsDeleteInstanceWithResponse request returning *AppPreviewSetsDeleteInstanceResponse
func (c *ClientWithResponses) AppPreviewSetsDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AppPreviewSetsDeleteInstanceResponse, error) {
	rsp, err := c.AppPreviewSetsDeleteInstance(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppPreviewSetsDeleteInstanceResponse(rsp)
}

// AppPreviewSetsGetInstanceWithResponse request returning *AppPreviewSetsGetInstanceResponse
func (c *ClientWithResponses) AppPreviewSetsGetInstanceWithResponse(ctx context.Context, id string, params *AppPreviewSetsGetInstanceParams, reqEditors ...RequestEditorFn) (*AppPreviewSetsGetInstanceResponse, error) {
	rsp, err := c.AppPreviewSetsGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppPreviewSetsGetInstanceResponse(rsp)
}

// AppPreviewSetsAppPreviewsGetToManyRelatedWithResponse request returning *AppPreviewSetsAppPreviewsGetToManyRelatedResponse
func (c *ClientWithResponses) AppPreviewSetsAppPreviewsGetToManyRelatedWithResponse(ctx context.Context, id string, params *AppPreviewSetsAppPreviewsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*AppPreviewSetsAppPreviewsGetToManyRelatedResponse, error) {
	rsp, err := c.AppPreviewSetsAppPreviewsGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppPreviewSetsAppPreviewsGetToManyRelatedResponse(rsp)
}

// AppPreviewSetsAppPreviewsGetToManyRelationshipWithResponse request returning *AppPreviewSetsAppPreviewsGetToManyRelationshipResponse
func (c *ClientWithResponses) AppPreviewSetsAppPreviewsGetToManyRelationshipWithResponse(ctx context.Context, id string, params *AppPreviewSetsAppPreviewsGetToManyRelationshipParams, reqEditors ...RequestEditorFn) (*AppPreviewSetsAppPreviewsGetToManyRelationshipResponse, error) {
	rsp, err := c.AppPreviewSetsAppPreviewsGetToManyRelationship(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppPreviewSetsAppPreviewsGetToManyRelationshipResponse(rsp)
}

// AppPreviewSetsAppPreviewsReplaceToManyRelationshipWithBodyWithResponse request with arbitrary body returning *AppPreviewSetsAppPreviewsReplaceToManyRelationshipResponse
func (c *ClientWithResponses) AppPreviewSetsAppPreviewsReplaceToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppPreviewSetsAppPreviewsReplaceToManyRelationshipResponse, error) {
	rsp, err := c.AppPreviewSetsAppPreviewsReplaceToManyRelationshipWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppPreviewSetsAppPreviewsReplaceToManyRelationshipResponse(rsp)
}

func (c *ClientWithResponses) AppPreviewSetsAppPreviewsReplaceToManyRelationshipWithResponse(ctx context.Context, id string, body AppPreviewSetsAppPreviewsReplaceToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*AppPreviewSetsAppPreviewsReplaceToManyRelationshipResponse, error) {
	rsp, err := c.AppPreviewSetsAppPreviewsReplaceToManyRelationship(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppPreviewSetsAppPreviewsReplaceToManyRelationshipResponse(rsp)
}

// AppPreviewsCreateInstanceWithBodyWithResponse request with arbitrary body returning *AppPreviewsCreateInstanceResponse
func (c *ClientWithResponses) AppPreviewsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppPreviewsCreateInstanceResponse, error) {
	rsp, err := c.AppPreviewsCreateInstanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppPreviewsCreateInstanceResponse(rsp)
}

func (c *ClientWithResponses) AppPreviewsCreateInstanceWithResponse(ctx context.Context, body AppPreviewsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppPreviewsCreateInstanceResponse, error) {
	rsp, err := c.AppPreviewsCreateInstance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppPreviewsCreateInstanceResponse(rsp)
}

// AppPreviewsDeleteInstanceWithResponse request returning *AppPreviewsDeleteInstanceResponse
func (c *ClientWithResponses) AppPreviewsDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AppPreviewsDeleteInstanceResponse, error) {
	rsp, err := c.AppPreviewsDeleteInstance(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppPreviewsDeleteInstanceResponse(rsp)
}

// AppPreviewsGetInstanceWithResponse request returning *AppPreviewsGetInstanceResponse
func (c *ClientWithResponses) AppPreviewsGetInstanceWithResponse(ctx context.Context, id string, params *AppPreviewsGetInstanceParams, reqEditors ...RequestEditorFn) (*AppPreviewsGetInstanceResponse, error) {
	rsp, err := c.AppPreviewsGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppPreviewsGetInstanceResponse(rsp)
}

// AppPreviewsUpdateInstanceWithBodyWithResponse request with arbitrary body returning *AppPreviewsUpdateInstanceResponse
func (c *ClientWithResponses) AppPreviewsUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppPreviewsUpdateInstanceResponse, error) {
	rsp, err := c.AppPreviewsUpdateInstanceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppPreviewsUpdateInstanceResponse(rsp)
}

func (c *ClientWithResponses) AppPreviewsUpdateInstanceWithResponse(ctx context.Context, id string, body AppPreviewsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppPreviewsUpdateInstanceResponse, error) {
	rsp, err := c.AppPreviewsUpdateInstance(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppPreviewsUpdateInstanceResponse(rsp)
}

// AppPricePointsGetCollectionWithResponse request returning *AppPricePointsGetCollectionResponse
func (c *ClientWithResponses) AppPricePointsGetCollectionWithResponse(ctx context.Context, params *AppPricePointsGetCollectionParams, reqEditors ...RequestEditorFn) (*AppPricePointsGetCollectionResponse, error) {
	rsp, err := c.AppPricePointsGetCollection(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppPricePointsGetCollectionResponse(rsp)
}

// AppPricePointsGetInstanceWithResponse request returning *AppPricePointsGetInstanceResponse
func (c *ClientWithResponses) AppPricePointsGetInstanceWithResponse(ctx context.Context, id string, params *AppPricePointsGetInstanceParams, reqEditors ...RequestEditorFn) (*AppPricePointsGetInstanceResponse, error) {
	rsp, err := c.AppPricePointsGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppPricePointsGetInstanceResponse(rsp)
}

// AppPricePointsTerritoryGetToOneRelatedWithResponse request returning *AppPricePointsTerritoryGetToOneRelatedResponse
func (c *ClientWithResponses) AppPricePointsTerritoryGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppPricePointsTerritoryGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppPricePointsTerritoryGetToOneRelatedResponse, error) {
	rsp, err := c.AppPricePointsTerritoryGetToOneRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppPricePointsTerritoryGetToOneRelatedResponse(rsp)
}

// AppPriceTiersGetCollectionWithResponse request returning *AppPriceTiersGetCollectionResponse
func (c *ClientWithResponses) AppPriceTiersGetCollectionWithResponse(ctx context.Context, params *AppPriceTiersGetCollectionParams, reqEditors ...RequestEditorFn) (*AppPriceTiersGetCollectionResponse, error) {
	rsp, err := c.AppPriceTiersGetCollection(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppPriceTiersGetCollectionResponse(rsp)
}

// AppPriceTiersGetInstanceWithResponse request returning *AppPriceTiersGetInstanceResponse
func (c *ClientWithResponses) AppPriceTiersGetInstanceWithResponse(ctx context.Context, id string, params *AppPriceTiersGetInstanceParams, reqEditors ...RequestEditorFn) (*AppPriceTiersGetInstanceResponse, error) {
	rsp, err := c.AppPriceTiersGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppPriceTiersGetInstanceResponse(rsp)
}

// AppPriceTiersPricePointsGetToManyRelatedWithResponse request returning *AppPriceTiersPricePointsGetToManyRelatedResponse
func (c *ClientWithResponses) AppPriceTiersPricePointsGetToManyRelatedWithResponse(ctx context.Context, id string, params *AppPriceTiersPricePointsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*AppPriceTiersPricePointsGetToManyRelatedResponse, error) {
	rsp, err := c.AppPriceTiersPricePointsGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppPriceTiersPricePointsGetToManyRelatedResponse(rsp)
}

// AppPricesGetInstanceWithResponse request returning *AppPricesGetInstanceResponse
func (c *ClientWithResponses) AppPricesGetInstanceWithResponse(ctx context.Context, id string, params *AppPricesGetInstanceParams, reqEditors ...RequestEditorFn) (*AppPricesGetInstanceResponse, error) {
	rsp, err := c.AppPricesGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppPricesGetInstanceResponse(rsp)
}

// AppScreenshotSetsCreateInstanceWithBodyWithResponse request with arbitrary body returning *AppScreenshotSetsCreateInstanceResponse
func (c *ClientWithResponses) AppScreenshotSetsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppScreenshotSetsCreateInstanceResponse, error) {
	rsp, err := c.AppScreenshotSetsCreateInstanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppScreenshotSetsCreateInstanceResponse(rsp)
}

func (c *ClientWithResponses) AppScreenshotSetsCreateInstanceWithResponse(ctx context.Context, body AppScreenshotSetsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppScreenshotSetsCreateInstanceResponse, error) {
	rsp, err := c.AppScreenshotSetsCreateInstance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppScreenshotSetsCreateInstanceResponse(rsp)
}

// AppScreenshotSetsDeleteInstanceWithResponse request returning *AppScreenshotSetsDeleteInstanceResponse
func (c *ClientWithResponses) AppScreenshotSetsDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AppScreenshotSetsDeleteInstanceResponse, error) {
	rsp, err := c.AppScreenshotSetsDeleteInstance(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppScreenshotSetsDeleteInstanceResponse(rsp)
}

// AppScreenshotSetsGetInstanceWithResponse request returning *AppScreenshotSetsGetInstanceResponse
func (c *ClientWithResponses) AppScreenshotSetsGetInstanceWithResponse(ctx context.Context, id string, params *AppScreenshotSetsGetInstanceParams, reqEditors ...RequestEditorFn) (*AppScreenshotSetsGetInstanceResponse, error) {
	rsp, err := c.AppScreenshotSetsGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppScreenshotSetsGetInstanceResponse(rsp)
}

// AppScreenshotSetsAppScreenshotsGetToManyRelatedWithResponse request returning *AppScreenshotSetsAppScreenshotsGetToManyRelatedResponse
func (c *ClientWithResponses) AppScreenshotSetsAppScreenshotsGetToManyRelatedWithResponse(ctx context.Context, id string, params *AppScreenshotSetsAppScreenshotsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*AppScreenshotSetsAppScreenshotsGetToManyRelatedResponse, error) {
	rsp, err := c.AppScreenshotSetsAppScreenshotsGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppScreenshotSetsAppScreenshotsGetToManyRelatedResponse(rsp)
}

// AppScreenshotSetsAppScreenshotsGetToManyRelationshipWithResponse request returning *AppScreenshotSetsAppScreenshotsGetToManyRelationshipResponse
func (c *ClientWithResponses) AppScreenshotSetsAppScreenshotsGetToManyRelationshipWithResponse(ctx context.Context, id string, params *AppScreenshotSetsAppScreenshotsGetToManyRelationshipParams, reqEditors ...RequestEditorFn) (*AppScreenshotSetsAppScreenshotsGetToManyRelationshipResponse, error) {
	rsp, err := c.AppScreenshotSetsAppScreenshotsGetToManyRelationship(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppScreenshotSetsAppScreenshotsGetToManyRelationshipResponse(rsp)
}

// AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipWithBodyWithResponse request with arbitrary body returning *AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipResponse
func (c *ClientWithResponses) AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipResponse, error) {
	rsp, err := c.AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppScreenshotSetsAppScreenshotsReplaceToManyRelationshipResponse(rsp)
}

func (c *ClientWithResponses) AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipWithResponse(ctx context.Context, id string, body AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipResponse, error) {
	rsp, err := c.AppScreenshotSetsAppScreenshotsReplaceToManyRelationship(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppScreenshotSetsAppScreenshotsReplaceToManyRelationshipResponse(rsp)
}

// AppScreenshotsCreateInstanceWithBodyWithResponse request with arbitrary body returning *AppScreenshotsCreateInstanceResponse
func (c *ClientWithResponses) AppScreenshotsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppScreenshotsCreateInstanceResponse, error) {
	rsp, err := c.AppScreenshotsCreateInstanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppScreenshotsCreateInstanceResponse(rsp)
}

func (c *ClientWithResponses) AppScreenshotsCreateInstanceWithResponse(ctx context.Context, body AppScreenshotsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppScreenshotsCreateInstanceResponse, error) {
	rsp, err := c.AppScreenshotsCreateInstance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppScreenshotsCreateInstanceResponse(rsp)
}

// AppScreenshotsDeleteInstanceWithResponse request returning *AppScreenshotsDeleteInstanceResponse
func (c *ClientWithResponses) AppScreenshotsDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AppScreenshotsDeleteInstanceResponse, error) {
	rsp, err := c.AppScreenshotsDeleteInstance(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppScreenshotsDeleteInstanceResponse(rsp)
}

// AppScreenshotsGetInstanceWithResponse request returning *AppScreenshotsGetInstanceResponse
func (c *ClientWithResponses) AppScreenshotsGetInstanceWithResponse(ctx context.Context, id string, params *AppScreenshotsGetInstanceParams, reqEditors ...RequestEditorFn) (*AppScreenshotsGetInstanceResponse, error) {
	rsp, err := c.AppScreenshotsGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppScreenshotsGetInstanceResponse(rsp)
}

// AppScreenshotsUpdateInstanceWithBodyWithResponse request with arbitrary body returning *AppScreenshotsUpdateInstanceResponse
func (c *ClientWithResponses) AppScreenshotsUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppScreenshotsUpdateInstanceResponse, error) {
	rsp, err := c.AppScreenshotsUpdateInstanceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppScreenshotsUpdateInstanceResponse(rsp)
}

func (c *ClientWithResponses) AppScreenshotsUpdateInstanceWithResponse(ctx context.Context, id string, body AppScreenshotsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppScreenshotsUpdateInstanceResponse, error) {
	rsp, err := c.AppScreenshotsUpdateInstance(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppScreenshotsUpdateInstanceResponse(rsp)
}

// AppStoreReviewAttachmentsCreateInstanceWithBodyWithResponse request with arbitrary body returning *AppStoreReviewAttachmentsCreateInstanceResponse
func (c *ClientWithResponses) AppStoreReviewAttachmentsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppStoreReviewAttachmentsCreateInstanceResponse, error) {
	rsp, err := c.AppStoreReviewAttachmentsCreateInstanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreReviewAttachmentsCreateInstanceResponse(rsp)
}

func (c *ClientWithResponses) AppStoreReviewAttachmentsCreateInstanceWithResponse(ctx context.Context, body AppStoreReviewAttachmentsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppStoreReviewAttachmentsCreateInstanceResponse, error) {
	rsp, err := c.AppStoreReviewAttachmentsCreateInstance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreReviewAttachmentsCreateInstanceResponse(rsp)
}

// AppStoreReviewAttachmentsDeleteInstanceWithResponse request returning *AppStoreReviewAttachmentsDeleteInstanceResponse
func (c *ClientWithResponses) AppStoreReviewAttachmentsDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AppStoreReviewAttachmentsDeleteInstanceResponse, error) {
	rsp, err := c.AppStoreReviewAttachmentsDeleteInstance(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreReviewAttachmentsDeleteInstanceResponse(rsp)
}

// AppStoreReviewAttachmentsGetInstanceWithResponse request returning *AppStoreReviewAttachmentsGetInstanceResponse
func (c *ClientWithResponses) AppStoreReviewAttachmentsGetInstanceWithResponse(ctx context.Context, id string, params *AppStoreReviewAttachmentsGetInstanceParams, reqEditors ...RequestEditorFn) (*AppStoreReviewAttachmentsGetInstanceResponse, error) {
	rsp, err := c.AppStoreReviewAttachmentsGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreReviewAttachmentsGetInstanceResponse(rsp)
}

// AppStoreReviewAttachmentsUpdateInstanceWithBodyWithResponse request with arbitrary body returning *AppStoreReviewAttachmentsUpdateInstanceResponse
func (c *ClientWithResponses) AppStoreReviewAttachmentsUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppStoreReviewAttachmentsUpdateInstanceResponse, error) {
	rsp, err := c.AppStoreReviewAttachmentsUpdateInstanceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreReviewAttachmentsUpdateInstanceResponse(rsp)
}

func (c *ClientWithResponses) AppStoreReviewAttachmentsUpdateInstanceWithResponse(ctx context.Context, id string, body AppStoreReviewAttachmentsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppStoreReviewAttachmentsUpdateInstanceResponse, error) {
	rsp, err := c.AppStoreReviewAttachmentsUpdateInstance(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreReviewAttachmentsUpdateInstanceResponse(rsp)
}

// AppStoreReviewDetailsCreateInstanceWithBodyWithResponse request with arbitrary body returning *AppStoreReviewDetailsCreateInstanceResponse
func (c *ClientWithResponses) AppStoreReviewDetailsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppStoreReviewDetailsCreateInstanceResponse, error) {
	rsp, err := c.AppStoreReviewDetailsCreateInstanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreReviewDetailsCreateInstanceResponse(rsp)
}

func (c *ClientWithResponses) AppStoreReviewDetailsCreateInstanceWithResponse(ctx context.Context, body AppStoreReviewDetailsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppStoreReviewDetailsCreateInstanceResponse, error) {
	rsp, err := c.AppStoreReviewDetailsCreateInstance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreReviewDetailsCreateInstanceResponse(rsp)
}

// AppStoreReviewDetailsGetInstanceWithResponse request returning *AppStoreReviewDetailsGetInstanceResponse
func (c *ClientWithResponses) AppStoreReviewDetailsGetInstanceWithResponse(ctx context.Context, id string, params *AppStoreReviewDetailsGetInstanceParams, reqEditors ...RequestEditorFn) (*AppStoreReviewDetailsGetInstanceResponse, error) {
	rsp, err := c.AppStoreReviewDetailsGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreReviewDetailsGetInstanceResponse(rsp)
}

// AppStoreReviewDetailsUpdateInstanceWithBodyWithResponse request with arbitrary body returning *AppStoreReviewDetailsUpdateInstanceResponse
func (c *ClientWithResponses) AppStoreReviewDetailsUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppStoreReviewDetailsUpdateInstanceResponse, error) {
	rsp, err := c.AppStoreReviewDetailsUpdateInstanceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreReviewDetailsUpdateInstanceResponse(rsp)
}

func (c *ClientWithResponses) AppStoreReviewDetailsUpdateInstanceWithResponse(ctx context.Context, id string, body AppStoreReviewDetailsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppStoreReviewDetailsUpdateInstanceResponse, error) {
	rsp, err := c.AppStoreReviewDetailsUpdateInstance(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreReviewDetailsUpdateInstanceResponse(rsp)
}

// AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedWithResponse request returning *AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedResponse
func (c *ClientWithResponses) AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedWithResponse(ctx context.Context, id string, params *AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedResponse, error) {
	rsp, err := c.AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedResponse(rsp)
}

// AppStoreVersionLocalizationsCreateInstanceWithBodyWithResponse request with arbitrary body returning *AppStoreVersionLocalizationsCreateInstanceResponse
func (c *ClientWithResponses) AppStoreVersionLocalizationsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppStoreVersionLocalizationsCreateInstanceResponse, error) {
	rsp, err := c.AppStoreVersionLocalizationsCreateInstanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreVersionLocalizationsCreateInstanceResponse(rsp)
}

func (c *ClientWithResponses) AppStoreVersionLocalizationsCreateInstanceWithResponse(ctx context.Context, body AppStoreVersionLocalizationsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppStoreVersionLocalizationsCreateInstanceResponse, error) {
	rsp, err := c.AppStoreVersionLocalizationsCreateInstance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreVersionLocalizationsCreateInstanceResponse(rsp)
}

// AppStoreVersionLocalizationsDeleteInstanceWithResponse request returning *AppStoreVersionLocalizationsDeleteInstanceResponse
func (c *ClientWithResponses) AppStoreVersionLocalizationsDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AppStoreVersionLocalizationsDeleteInstanceResponse, error) {
	rsp, err := c.AppStoreVersionLocalizationsDeleteInstance(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreVersionLocalizationsDeleteInstanceResponse(rsp)
}

// AppStoreVersionLocalizationsGetInstanceWithResponse request returning *AppStoreVersionLocalizationsGetInstanceResponse
func (c *ClientWithResponses) AppStoreVersionLocalizationsGetInstanceWithResponse(ctx context.Context, id string, params *AppStoreVersionLocalizationsGetInstanceParams, reqEditors ...RequestEditorFn) (*AppStoreVersionLocalizationsGetInstanceResponse, error) {
	rsp, err := c.AppStoreVersionLocalizationsGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreVersionLocalizationsGetInstanceResponse(rsp)
}

// AppStoreVersionLocalizationsUpdateInstanceWithBodyWithResponse request with arbitrary body returning *AppStoreVersionLocalizationsUpdateInstanceResponse
func (c *ClientWithResponses) AppStoreVersionLocalizationsUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppStoreVersionLocalizationsUpdateInstanceResponse, error) {
	rsp, err := c.AppStoreVersionLocalizationsUpdateInstanceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreVersionLocalizationsUpdateInstanceResponse(rsp)
}

func (c *ClientWithResponses) AppStoreVersionLocalizationsUpdateInstanceWithResponse(ctx context.Context, id string, body AppStoreVersionLocalizationsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppStoreVersionLocalizationsUpdateInstanceResponse, error) {
	rsp, err := c.AppStoreVersionLocalizationsUpdateInstance(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreVersionLocalizationsUpdateInstanceResponse(rsp)
}

// AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedWithResponse request returning *AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedResponse
func (c *ClientWithResponses) AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedWithResponse(ctx context.Context, id string, params *AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedResponse, error) {
	rsp, err := c.AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedResponse(rsp)
}

// AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedWithResponse request returning *AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedResponse
func (c *ClientWithResponses) AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedWithResponse(ctx context.Context, id string, params *AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedResponse, error) {
	rsp, err := c.AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedResponse(rsp)
}

// AppStoreVersionPhasedReleasesCreateInstanceWithBodyWithResponse request with arbitrary body returning *AppStoreVersionPhasedReleasesCreateInstanceResponse
func (c *ClientWithResponses) AppStoreVersionPhasedReleasesCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppStoreVersionPhasedReleasesCreateInstanceResponse, error) {
	rsp, err := c.AppStoreVersionPhasedReleasesCreateInstanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreVersionPhasedReleasesCreateInstanceResponse(rsp)
}

func (c *ClientWithResponses) AppStoreVersionPhasedReleasesCreateInstanceWithResponse(ctx context.Context, body AppStoreVersionPhasedReleasesCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppStoreVersionPhasedReleasesCreateInstanceResponse, error) {
	rsp, err := c.AppStoreVersionPhasedReleasesCreateInstance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreVersionPhasedReleasesCreateInstanceResponse(rsp)
}

// AppStoreVersionPhasedReleasesDeleteInstanceWithResponse request returning *AppStoreVersionPhasedReleasesDeleteInstanceResponse
func (c *ClientWithResponses) AppStoreVersionPhasedReleasesDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AppStoreVersionPhasedReleasesDeleteInstanceResponse, error) {
	rsp, err := c.AppStoreVersionPhasedReleasesDeleteInstance(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreVersionPhasedReleasesDeleteInstanceResponse(rsp)
}

// AppStoreVersionPhasedReleasesUpdateInstanceWithBodyWithResponse request with arbitrary body returning *AppStoreVersionPhasedReleasesUpdateInstanceResponse
func (c *ClientWithResponses) AppStoreVersionPhasedReleasesUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppStoreVersionPhasedReleasesUpdateInstanceResponse, error) {
	rsp, err := c.AppStoreVersionPhasedReleasesUpdateInstanceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreVersionPhasedReleasesUpdateInstanceResponse(rsp)
}

func (c *ClientWithResponses) AppStoreVersionPhasedReleasesUpdateInstanceWithResponse(ctx context.Context, id string, body AppStoreVersionPhasedReleasesUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppStoreVersionPhasedReleasesUpdateInstanceResponse, error) {
	rsp, err := c.AppStoreVersionPhasedReleasesUpdateInstance(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreVersionPhasedReleasesUpdateInstanceResponse(rsp)
}

// AppStoreVersionReleaseRequestsCreateInstanceWithBodyWithResponse request with arbitrary body returning *AppStoreVersionReleaseRequestsCreateInstanceResponse
func (c *ClientWithResponses) AppStoreVersionReleaseRequestsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppStoreVersionReleaseRequestsCreateInstanceResponse, error) {
	rsp, err := c.AppStoreVersionReleaseRequestsCreateInstanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreVersionReleaseRequestsCreateInstanceResponse(rsp)
}

func (c *ClientWithResponses) AppStoreVersionReleaseRequestsCreateInstanceWithResponse(ctx context.Context, body AppStoreVersionReleaseRequestsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppStoreVersionReleaseRequestsCreateInstanceResponse, error) {
	rsp, err := c.AppStoreVersionReleaseRequestsCreateInstance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreVersionReleaseRequestsCreateInstanceResponse(rsp)
}

// AppStoreVersionSubmissionsCreateInstanceWithBodyWithResponse request with arbitrary body returning *AppStoreVersionSubmissionsCreateInstanceResponse
func (c *ClientWithResponses) AppStoreVersionSubmissionsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppStoreVersionSubmissionsCreateInstanceResponse, error) {
	rsp, err := c.AppStoreVersionSubmissionsCreateInstanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreVersionSubmissionsCreateInstanceResponse(rsp)
}

func (c *ClientWithResponses) AppStoreVersionSubmissionsCreateInstanceWithResponse(ctx context.Context, body AppStoreVersionSubmissionsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppStoreVersionSubmissionsCreateInstanceResponse, error) {
	rsp, err := c.AppStoreVersionSubmissionsCreateInstance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreVersionSubmissionsCreateInstanceResponse(rsp)
}

// AppStoreVersionSubmissionsDeleteInstanceWithResponse request returning *AppStoreVersionSubmissionsDeleteInstanceResponse
func (c *ClientWithResponses) AppStoreVersionSubmissionsDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AppStoreVersionSubmissionsDeleteInstanceResponse, error) {
	rsp, err := c.AppStoreVersionSubmissionsDeleteInstance(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreVersionSubmissionsDeleteInstanceResponse(rsp)
}

// AppStoreVersionsCreateInstanceWithBodyWithResponse request with arbitrary body returning *AppStoreVersionsCreateInstanceResponse
func (c *ClientWithResponses) AppStoreVersionsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppStoreVersionsCreateInstanceResponse, error) {
	rsp, err := c.AppStoreVersionsCreateInstanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreVersionsCreateInstanceResponse(rsp)
}

func (c *ClientWithResponses) AppStoreVersionsCreateInstanceWithResponse(ctx context.Context, body AppStoreVersionsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppStoreVersionsCreateInstanceResponse, error) {
	rsp, err := c.AppStoreVersionsCreateInstance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreVersionsCreateInstanceResponse(rsp)
}

// AppStoreVersionsDeleteInstanceWithResponse request returning *AppStoreVersionsDeleteInstanceResponse
func (c *ClientWithResponses) AppStoreVersionsDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AppStoreVersionsDeleteInstanceResponse, error) {
	rsp, err := c.AppStoreVersionsDeleteInstance(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreVersionsDeleteInstanceResponse(rsp)
}

// AppStoreVersionsGetInstanceWithResponse request returning *AppStoreVersionsGetInstanceResponse
func (c *ClientWithResponses) AppStoreVersionsGetInstanceWithResponse(ctx context.Context, id string, params *AppStoreVersionsGetInstanceParams, reqEditors ...RequestEditorFn) (*AppStoreVersionsGetInstanceResponse, error) {
	rsp, err := c.AppStoreVersionsGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreVersionsGetInstanceResponse(rsp)
}

// AppStoreVersionsUpdateInstanceWithBodyWithResponse request with arbitrary body returning *AppStoreVersionsUpdateInstanceResponse
func (c *ClientWithResponses) AppStoreVersionsUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppStoreVersionsUpdateInstanceResponse, error) {
	rsp, err := c.AppStoreVersionsUpdateInstanceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreVersionsUpdateInstanceResponse(rsp)
}

func (c *ClientWithResponses) AppStoreVersionsUpdateInstanceWithResponse(ctx context.Context, id string, body AppStoreVersionsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppStoreVersionsUpdateInstanceResponse, error) {
	rsp, err := c.AppStoreVersionsUpdateInstance(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreVersionsUpdateInstanceResponse(rsp)
}

// AppStoreVersionsAgeRatingDeclarationGetToOneRelatedWithResponse request returning *AppStoreVersionsAgeRatingDeclarationGetToOneRelatedResponse
func (c *ClientWithResponses) AppStoreVersionsAgeRatingDeclarationGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppStoreVersionsAgeRatingDeclarationGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppStoreVersionsAgeRatingDeclarationGetToOneRelatedResponse, error) {
	rsp, err := c.AppStoreVersionsAgeRatingDeclarationGetToOneRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreVersionsAgeRatingDeclarationGetToOneRelatedResponse(rsp)
}

// AppStoreVersionsAppStoreReviewDetailGetToOneRelatedWithResponse request returning *AppStoreVersionsAppStoreReviewDetailGetToOneRelatedResponse
func (c *ClientWithResponses) AppStoreVersionsAppStoreReviewDetailGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppStoreVersionsAppStoreReviewDetailGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppStoreVersionsAppStoreReviewDetailGetToOneRelatedResponse, error) {
	rsp, err := c.AppStoreVersionsAppStoreReviewDetailGetToOneRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreVersionsAppStoreReviewDetailGetToOneRelatedResponse(rsp)
}

// AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedWithResponse request returning *AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedResponse
func (c *ClientWithResponses) AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedWithResponse(ctx context.Context, id string, params *AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedResponse, error) {
	rsp, err := c.AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedResponse(rsp)
}

// AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedWithResponse request returning *AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedResponse
func (c *ClientWithResponses) AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedResponse, error) {
	rsp, err := c.AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedResponse(rsp)
}

// AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedWithResponse request returning *AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedResponse
func (c *ClientWithResponses) AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedResponse, error) {
	rsp, err := c.AppStoreVersionsAppStoreVersionSubmissionGetToOneRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedResponse(rsp)
}

// AppStoreVersionsBuildGetToOneRelatedWithResponse request returning *AppStoreVersionsBuildGetToOneRelatedResponse
func (c *ClientWithResponses) AppStoreVersionsBuildGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppStoreVersionsBuildGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppStoreVersionsBuildGetToOneRelatedResponse, error) {
	rsp, err := c.AppStoreVersionsBuildGetToOneRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreVersionsBuildGetToOneRelatedResponse(rsp)
}

// AppStoreVersionsIdfaDeclarationGetToOneRelatedWithResponse request returning *AppStoreVersionsIdfaDeclarationGetToOneRelatedResponse
func (c *ClientWithResponses) AppStoreVersionsIdfaDeclarationGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppStoreVersionsIdfaDeclarationGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppStoreVersionsIdfaDeclarationGetToOneRelatedResponse, error) {
	rsp, err := c.AppStoreVersionsIdfaDeclarationGetToOneRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreVersionsIdfaDeclarationGetToOneRelatedResponse(rsp)
}

// AppStoreVersionsBuildGetToOneRelationshipWithResponse request returning *AppStoreVersionsBuildGetToOneRelationshipResponse
func (c *ClientWithResponses) AppStoreVersionsBuildGetToOneRelationshipWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AppStoreVersionsBuildGetToOneRelationshipResponse, error) {
	rsp, err := c.AppStoreVersionsBuildGetToOneRelationship(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreVersionsBuildGetToOneRelationshipResponse(rsp)
}

// AppStoreVersionsBuildUpdateToOneRelationshipWithBodyWithResponse request with arbitrary body returning *AppStoreVersionsBuildUpdateToOneRelationshipResponse
func (c *ClientWithResponses) AppStoreVersionsBuildUpdateToOneRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppStoreVersionsBuildUpdateToOneRelationshipResponse, error) {
	rsp, err := c.AppStoreVersionsBuildUpdateToOneRelationshipWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreVersionsBuildUpdateToOneRelationshipResponse(rsp)
}

func (c *ClientWithResponses) AppStoreVersionsBuildUpdateToOneRelationshipWithResponse(ctx context.Context, id string, body AppStoreVersionsBuildUpdateToOneRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*AppStoreVersionsBuildUpdateToOneRelationshipResponse, error) {
	rsp, err := c.AppStoreVersionsBuildUpdateToOneRelationship(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreVersionsBuildUpdateToOneRelationshipResponse(rsp)
}

// AppStoreVersionsRoutingAppCoverageGetToOneRelatedWithResponse request returning *AppStoreVersionsRoutingAppCoverageGetToOneRelatedResponse
func (c *ClientWithResponses) AppStoreVersionsRoutingAppCoverageGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppStoreVersionsRoutingAppCoverageGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppStoreVersionsRoutingAppCoverageGetToOneRelatedResponse, error) {
	rsp, err := c.AppStoreVersionsRoutingAppCoverageGetToOneRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStoreVersionsRoutingAppCoverageGetToOneRelatedResponse(rsp)
}

// AppsGetCollectionWithResponse request returning *AppsGetCollectionResponse
func (c *ClientWithResponses) AppsGetCollectionWithResponse(ctx context.Context, params *AppsGetCollectionParams, reqEditors ...RequestEditorFn) (*AppsGetCollectionResponse, error) {
	rsp, err := c.AppsGetCollection(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsGetCollectionResponse(rsp)
}

// AppsGetInstanceWithResponse request returning *AppsGetInstanceResponse
func (c *ClientWithResponses) AppsGetInstanceWithResponse(ctx context.Context, id string, params *AppsGetInstanceParams, reqEditors ...RequestEditorFn) (*AppsGetInstanceResponse, error) {
	rsp, err := c.AppsGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsGetInstanceResponse(rsp)
}

// AppsUpdateInstanceWithBodyWithResponse request with arbitrary body returning *AppsUpdateInstanceResponse
func (c *ClientWithResponses) AppsUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppsUpdateInstanceResponse, error) {
	rsp, err := c.AppsUpdateInstanceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsUpdateInstanceResponse(rsp)
}

func (c *ClientWithResponses) AppsUpdateInstanceWithResponse(ctx context.Context, id string, body AppsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*AppsUpdateInstanceResponse, error) {
	rsp, err := c.AppsUpdateInstance(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsUpdateInstanceResponse(rsp)
}

// AppsAppInfosGetToManyRelatedWithResponse request returning *AppsAppInfosGetToManyRelatedResponse
func (c *ClientWithResponses) AppsAppInfosGetToManyRelatedWithResponse(ctx context.Context, id string, params *AppsAppInfosGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*AppsAppInfosGetToManyRelatedResponse, error) {
	rsp, err := c.AppsAppInfosGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsAppInfosGetToManyRelatedResponse(rsp)
}

// AppsAppStoreVersionsGetToManyRelatedWithResponse request returning *AppsAppStoreVersionsGetToManyRelatedResponse
func (c *ClientWithResponses) AppsAppStoreVersionsGetToManyRelatedWithResponse(ctx context.Context, id string, params *AppsAppStoreVersionsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*AppsAppStoreVersionsGetToManyRelatedResponse, error) {
	rsp, err := c.AppsAppStoreVersionsGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsAppStoreVersionsGetToManyRelatedResponse(rsp)
}

// AppsAvailableTerritoriesGetToManyRelatedWithResponse request returning *AppsAvailableTerritoriesGetToManyRelatedResponse
func (c *ClientWithResponses) AppsAvailableTerritoriesGetToManyRelatedWithResponse(ctx context.Context, id string, params *AppsAvailableTerritoriesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*AppsAvailableTerritoriesGetToManyRelatedResponse, error) {
	rsp, err := c.AppsAvailableTerritoriesGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsAvailableTerritoriesGetToManyRelatedResponse(rsp)
}

// AppsBetaAppLocalizationsGetToManyRelatedWithResponse request returning *AppsBetaAppLocalizationsGetToManyRelatedResponse
func (c *ClientWithResponses) AppsBetaAppLocalizationsGetToManyRelatedWithResponse(ctx context.Context, id string, params *AppsBetaAppLocalizationsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*AppsBetaAppLocalizationsGetToManyRelatedResponse, error) {
	rsp, err := c.AppsBetaAppLocalizationsGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsBetaAppLocalizationsGetToManyRelatedResponse(rsp)
}

// AppsBetaAppReviewDetailGetToOneRelatedWithResponse request returning *AppsBetaAppReviewDetailGetToOneRelatedResponse
func (c *ClientWithResponses) AppsBetaAppReviewDetailGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppsBetaAppReviewDetailGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppsBetaAppReviewDetailGetToOneRelatedResponse, error) {
	rsp, err := c.AppsBetaAppReviewDetailGetToOneRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsBetaAppReviewDetailGetToOneRelatedResponse(rsp)
}

// AppsBetaGroupsGetToManyRelatedWithResponse request returning *AppsBetaGroupsGetToManyRelatedResponse
func (c *ClientWithResponses) AppsBetaGroupsGetToManyRelatedWithResponse(ctx context.Context, id string, params *AppsBetaGroupsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*AppsBetaGroupsGetToManyRelatedResponse, error) {
	rsp, err := c.AppsBetaGroupsGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsBetaGroupsGetToManyRelatedResponse(rsp)
}

// AppsBetaLicenseAgreementGetToOneRelatedWithResponse request returning *AppsBetaLicenseAgreementGetToOneRelatedResponse
func (c *ClientWithResponses) AppsBetaLicenseAgreementGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppsBetaLicenseAgreementGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppsBetaLicenseAgreementGetToOneRelatedResponse, error) {
	rsp, err := c.AppsBetaLicenseAgreementGetToOneRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsBetaLicenseAgreementGetToOneRelatedResponse(rsp)
}

// AppsBuildsGetToManyRelatedWithResponse request returning *AppsBuildsGetToManyRelatedResponse
func (c *ClientWithResponses) AppsBuildsGetToManyRelatedWithResponse(ctx context.Context, id string, params *AppsBuildsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*AppsBuildsGetToManyRelatedResponse, error) {
	rsp, err := c.AppsBuildsGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsBuildsGetToManyRelatedResponse(rsp)
}

// AppsCiProductGetToOneRelatedWithResponse request returning *AppsCiProductGetToOneRelatedResponse
func (c *ClientWithResponses) AppsCiProductGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppsCiProductGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppsCiProductGetToOneRelatedResponse, error) {
	rsp, err := c.AppsCiProductGetToOneRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsCiProductGetToOneRelatedResponse(rsp)
}

// AppsEndUserLicenseAgreementGetToOneRelatedWithResponse request returning *AppsEndUserLicenseAgreementGetToOneRelatedResponse
func (c *ClientWithResponses) AppsEndUserLicenseAgreementGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppsEndUserLicenseAgreementGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppsEndUserLicenseAgreementGetToOneRelatedResponse, error) {
	rsp, err := c.AppsEndUserLicenseAgreementGetToOneRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsEndUserLicenseAgreementGetToOneRelatedResponse(rsp)
}

// AppsGameCenterEnabledVersionsGetToManyRelatedWithResponse request returning *AppsGameCenterEnabledVersionsGetToManyRelatedResponse
func (c *ClientWithResponses) AppsGameCenterEnabledVersionsGetToManyRelatedWithResponse(ctx context.Context, id string, params *AppsGameCenterEnabledVersionsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*AppsGameCenterEnabledVersionsGetToManyRelatedResponse, error) {
	rsp, err := c.AppsGameCenterEnabledVersionsGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsGameCenterEnabledVersionsGetToManyRelatedResponse(rsp)
}

// AppsInAppPurchasesGetToManyRelatedWithResponse request returning *AppsInAppPurchasesGetToManyRelatedResponse
func (c *ClientWithResponses) AppsInAppPurchasesGetToManyRelatedWithResponse(ctx context.Context, id string, params *AppsInAppPurchasesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*AppsInAppPurchasesGetToManyRelatedResponse, error) {
	rsp, err := c.AppsInAppPurchasesGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsInAppPurchasesGetToManyRelatedResponse(rsp)
}

// AppsPerfPowerMetricsGetToManyRelatedWithResponse request returning *AppsPerfPowerMetricsGetToManyRelatedResponse
func (c *ClientWithResponses) AppsPerfPowerMetricsGetToManyRelatedWithResponse(ctx context.Context, id string, params *AppsPerfPowerMetricsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*AppsPerfPowerMetricsGetToManyRelatedResponse, error) {
	rsp, err := c.AppsPerfPowerMetricsGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsPerfPowerMetricsGetToManyRelatedResponse(rsp)
}

// AppsPreOrderGetToOneRelatedWithResponse request returning *AppsPreOrderGetToOneRelatedResponse
func (c *ClientWithResponses) AppsPreOrderGetToOneRelatedWithResponse(ctx context.Context, id string, params *AppsPreOrderGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*AppsPreOrderGetToOneRelatedResponse, error) {
	rsp, err := c.AppsPreOrderGetToOneRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsPreOrderGetToOneRelatedResponse(rsp)
}

// AppsPreReleaseVersionsGetToManyRelatedWithResponse request returning *AppsPreReleaseVersionsGetToManyRelatedResponse
func (c *ClientWithResponses) AppsPreReleaseVersionsGetToManyRelatedWithResponse(ctx context.Context, id string, params *AppsPreReleaseVersionsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*AppsPreReleaseVersionsGetToManyRelatedResponse, error) {
	rsp, err := c.AppsPreReleaseVersionsGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsPreReleaseVersionsGetToManyRelatedResponse(rsp)
}

// AppsPricesGetToManyRelatedWithResponse request returning *AppsPricesGetToManyRelatedResponse
func (c *ClientWithResponses) AppsPricesGetToManyRelatedWithResponse(ctx context.Context, id string, params *AppsPricesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*AppsPricesGetToManyRelatedResponse, error) {
	rsp, err := c.AppsPricesGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsPricesGetToManyRelatedResponse(rsp)
}

// AppsBetaTestersDeleteToManyRelationshipWithBodyWithResponse request with arbitrary body returning *AppsBetaTestersDeleteToManyRelationshipResponse
func (c *ClientWithResponses) AppsBetaTestersDeleteToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppsBetaTestersDeleteToManyRelationshipResponse, error) {
	rsp, err := c.AppsBetaTestersDeleteToManyRelationshipWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsBetaTestersDeleteToManyRelationshipResponse(rsp)
}

func (c *ClientWithResponses) AppsBetaTestersDeleteToManyRelationshipWithResponse(ctx context.Context, id string, body AppsBetaTestersDeleteToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*AppsBetaTestersDeleteToManyRelationshipResponse, error) {
	rsp, err := c.AppsBetaTestersDeleteToManyRelationship(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsBetaTestersDeleteToManyRelationshipResponse(rsp)
}

// BetaAppLocalizationsGetCollectionWithResponse request returning *BetaAppLocalizationsGetCollectionResponse
func (c *ClientWithResponses) BetaAppLocalizationsGetCollectionWithResponse(ctx context.Context, params *BetaAppLocalizationsGetCollectionParams, reqEditors ...RequestEditorFn) (*BetaAppLocalizationsGetCollectionResponse, error) {
	rsp, err := c.BetaAppLocalizationsGetCollection(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaAppLocalizationsGetCollectionResponse(rsp)
}

// BetaAppLocalizationsCreateInstanceWithBodyWithResponse request with arbitrary body returning *BetaAppLocalizationsCreateInstanceResponse
func (c *ClientWithResponses) BetaAppLocalizationsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BetaAppLocalizationsCreateInstanceResponse, error) {
	rsp, err := c.BetaAppLocalizationsCreateInstanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaAppLocalizationsCreateInstanceResponse(rsp)
}

func (c *ClientWithResponses) BetaAppLocalizationsCreateInstanceWithResponse(ctx context.Context, body BetaAppLocalizationsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*BetaAppLocalizationsCreateInstanceResponse, error) {
	rsp, err := c.BetaAppLocalizationsCreateInstance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaAppLocalizationsCreateInstanceResponse(rsp)
}

// BetaAppLocalizationsDeleteInstanceWithResponse request returning *BetaAppLocalizationsDeleteInstanceResponse
func (c *ClientWithResponses) BetaAppLocalizationsDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*BetaAppLocalizationsDeleteInstanceResponse, error) {
	rsp, err := c.BetaAppLocalizationsDeleteInstance(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaAppLocalizationsDeleteInstanceResponse(rsp)
}

// BetaAppLocalizationsGetInstanceWithResponse request returning *BetaAppLocalizationsGetInstanceResponse
func (c *ClientWithResponses) BetaAppLocalizationsGetInstanceWithResponse(ctx context.Context, id string, params *BetaAppLocalizationsGetInstanceParams, reqEditors ...RequestEditorFn) (*BetaAppLocalizationsGetInstanceResponse, error) {
	rsp, err := c.BetaAppLocalizationsGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaAppLocalizationsGetInstanceResponse(rsp)
}

// BetaAppLocalizationsUpdateInstanceWithBodyWithResponse request with arbitrary body returning *BetaAppLocalizationsUpdateInstanceResponse
func (c *ClientWithResponses) BetaAppLocalizationsUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BetaAppLocalizationsUpdateInstanceResponse, error) {
	rsp, err := c.BetaAppLocalizationsUpdateInstanceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaAppLocalizationsUpdateInstanceResponse(rsp)
}

func (c *ClientWithResponses) BetaAppLocalizationsUpdateInstanceWithResponse(ctx context.Context, id string, body BetaAppLocalizationsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*BetaAppLocalizationsUpdateInstanceResponse, error) {
	rsp, err := c.BetaAppLocalizationsUpdateInstance(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaAppLocalizationsUpdateInstanceResponse(rsp)
}

// BetaAppLocalizationsAppGetToOneRelatedWithResponse request returning *BetaAppLocalizationsAppGetToOneRelatedResponse
func (c *ClientWithResponses) BetaAppLocalizationsAppGetToOneRelatedWithResponse(ctx context.Context, id string, params *BetaAppLocalizationsAppGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*BetaAppLocalizationsAppGetToOneRelatedResponse, error) {
	rsp, err := c.BetaAppLocalizationsAppGetToOneRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaAppLocalizationsAppGetToOneRelatedResponse(rsp)
}

// BetaAppReviewDetailsGetCollectionWithResponse request returning *BetaAppReviewDetailsGetCollectionResponse
func (c *ClientWithResponses) BetaAppReviewDetailsGetCollectionWithResponse(ctx context.Context, params *BetaAppReviewDetailsGetCollectionParams, reqEditors ...RequestEditorFn) (*BetaAppReviewDetailsGetCollectionResponse, error) {
	rsp, err := c.BetaAppReviewDetailsGetCollection(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaAppReviewDetailsGetCollectionResponse(rsp)
}

// BetaAppReviewDetailsGetInstanceWithResponse request returning *BetaAppReviewDetailsGetInstanceResponse
func (c *ClientWithResponses) BetaAppReviewDetailsGetInstanceWithResponse(ctx context.Context, id string, params *BetaAppReviewDetailsGetInstanceParams, reqEditors ...RequestEditorFn) (*BetaAppReviewDetailsGetInstanceResponse, error) {
	rsp, err := c.BetaAppReviewDetailsGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaAppReviewDetailsGetInstanceResponse(rsp)
}

// BetaAppReviewDetailsUpdateInstanceWithBodyWithResponse request with arbitrary body returning *BetaAppReviewDetailsUpdateInstanceResponse
func (c *ClientWithResponses) BetaAppReviewDetailsUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BetaAppReviewDetailsUpdateInstanceResponse, error) {
	rsp, err := c.BetaAppReviewDetailsUpdateInstanceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaAppReviewDetailsUpdateInstanceResponse(rsp)
}

func (c *ClientWithResponses) BetaAppReviewDetailsUpdateInstanceWithResponse(ctx context.Context, id string, body BetaAppReviewDetailsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*BetaAppReviewDetailsUpdateInstanceResponse, error) {
	rsp, err := c.BetaAppReviewDetailsUpdateInstance(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaAppReviewDetailsUpdateInstanceResponse(rsp)
}

// BetaAppReviewDetailsAppGetToOneRelatedWithResponse request returning *BetaAppReviewDetailsAppGetToOneRelatedResponse
func (c *ClientWithResponses) BetaAppReviewDetailsAppGetToOneRelatedWithResponse(ctx context.Context, id string, params *BetaAppReviewDetailsAppGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*BetaAppReviewDetailsAppGetToOneRelatedResponse, error) {
	rsp, err := c.BetaAppReviewDetailsAppGetToOneRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaAppReviewDetailsAppGetToOneRelatedResponse(rsp)
}

// BetaAppReviewSubmissionsGetCollectionWithResponse request returning *BetaAppReviewSubmissionsGetCollectionResponse
func (c *ClientWithResponses) BetaAppReviewSubmissionsGetCollectionWithResponse(ctx context.Context, params *BetaAppReviewSubmissionsGetCollectionParams, reqEditors ...RequestEditorFn) (*BetaAppReviewSubmissionsGetCollectionResponse, error) {
	rsp, err := c.BetaAppReviewSubmissionsGetCollection(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaAppReviewSubmissionsGetCollectionResponse(rsp)
}

// BetaAppReviewSubmissionsCreateInstanceWithBodyWithResponse request with arbitrary body returning *BetaAppReviewSubmissionsCreateInstanceResponse
func (c *ClientWithResponses) BetaAppReviewSubmissionsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BetaAppReviewSubmissionsCreateInstanceResponse, error) {
	rsp, err := c.BetaAppReviewSubmissionsCreateInstanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaAppReviewSubmissionsCreateInstanceResponse(rsp)
}

func (c *ClientWithResponses) BetaAppReviewSubmissionsCreateInstanceWithResponse(ctx context.Context, body BetaAppReviewSubmissionsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*BetaAppReviewSubmissionsCreateInstanceResponse, error) {
	rsp, err := c.BetaAppReviewSubmissionsCreateInstance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaAppReviewSubmissionsCreateInstanceResponse(rsp)
}

// BetaAppReviewSubmissionsGetInstanceWithResponse request returning *BetaAppReviewSubmissionsGetInstanceResponse
func (c *ClientWithResponses) BetaAppReviewSubmissionsGetInstanceWithResponse(ctx context.Context, id string, params *BetaAppReviewSubmissionsGetInstanceParams, reqEditors ...RequestEditorFn) (*BetaAppReviewSubmissionsGetInstanceResponse, error) {
	rsp, err := c.BetaAppReviewSubmissionsGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaAppReviewSubmissionsGetInstanceResponse(rsp)
}

// BetaAppReviewSubmissionsBuildGetToOneRelatedWithResponse request returning *BetaAppReviewSubmissionsBuildGetToOneRelatedResponse
func (c *ClientWithResponses) BetaAppReviewSubmissionsBuildGetToOneRelatedWithResponse(ctx context.Context, id string, params *BetaAppReviewSubmissionsBuildGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*BetaAppReviewSubmissionsBuildGetToOneRelatedResponse, error) {
	rsp, err := c.BetaAppReviewSubmissionsBuildGetToOneRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaAppReviewSubmissionsBuildGetToOneRelatedResponse(rsp)
}

// BetaBuildLocalizationsGetCollectionWithResponse request returning *BetaBuildLocalizationsGetCollectionResponse
func (c *ClientWithResponses) BetaBuildLocalizationsGetCollectionWithResponse(ctx context.Context, params *BetaBuildLocalizationsGetCollectionParams, reqEditors ...RequestEditorFn) (*BetaBuildLocalizationsGetCollectionResponse, error) {
	rsp, err := c.BetaBuildLocalizationsGetCollection(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaBuildLocalizationsGetCollectionResponse(rsp)
}

// BetaBuildLocalizationsCreateInstanceWithBodyWithResponse request with arbitrary body returning *BetaBuildLocalizationsCreateInstanceResponse
func (c *ClientWithResponses) BetaBuildLocalizationsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BetaBuildLocalizationsCreateInstanceResponse, error) {
	rsp, err := c.BetaBuildLocalizationsCreateInstanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaBuildLocalizationsCreateInstanceResponse(rsp)
}

func (c *ClientWithResponses) BetaBuildLocalizationsCreateInstanceWithResponse(ctx context.Context, body BetaBuildLocalizationsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*BetaBuildLocalizationsCreateInstanceResponse, error) {
	rsp, err := c.BetaBuildLocalizationsCreateInstance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaBuildLocalizationsCreateInstanceResponse(rsp)
}

// BetaBuildLocalizationsDeleteInstanceWithResponse request returning *BetaBuildLocalizationsDeleteInstanceResponse
func (c *ClientWithResponses) BetaBuildLocalizationsDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*BetaBuildLocalizationsDeleteInstanceResponse, error) {
	rsp, err := c.BetaBuildLocalizationsDeleteInstance(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaBuildLocalizationsDeleteInstanceResponse(rsp)
}

// BetaBuildLocalizationsGetInstanceWithResponse request returning *BetaBuildLocalizationsGetInstanceResponse
func (c *ClientWithResponses) BetaBuildLocalizationsGetInstanceWithResponse(ctx context.Context, id string, params *BetaBuildLocalizationsGetInstanceParams, reqEditors ...RequestEditorFn) (*BetaBuildLocalizationsGetInstanceResponse, error) {
	rsp, err := c.BetaBuildLocalizationsGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaBuildLocalizationsGetInstanceResponse(rsp)
}

// BetaBuildLocalizationsUpdateInstanceWithBodyWithResponse request with arbitrary body returning *BetaBuildLocalizationsUpdateInstanceResponse
func (c *ClientWithResponses) BetaBuildLocalizationsUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BetaBuildLocalizationsUpdateInstanceResponse, error) {
	rsp, err := c.BetaBuildLocalizationsUpdateInstanceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaBuildLocalizationsUpdateInstanceResponse(rsp)
}

func (c *ClientWithResponses) BetaBuildLocalizationsUpdateInstanceWithResponse(ctx context.Context, id string, body BetaBuildLocalizationsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*BetaBuildLocalizationsUpdateInstanceResponse, error) {
	rsp, err := c.BetaBuildLocalizationsUpdateInstance(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaBuildLocalizationsUpdateInstanceResponse(rsp)
}

// BetaBuildLocalizationsBuildGetToOneRelatedWithResponse request returning *BetaBuildLocalizationsBuildGetToOneRelatedResponse
func (c *ClientWithResponses) BetaBuildLocalizationsBuildGetToOneRelatedWithResponse(ctx context.Context, id string, params *BetaBuildLocalizationsBuildGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*BetaBuildLocalizationsBuildGetToOneRelatedResponse, error) {
	rsp, err := c.BetaBuildLocalizationsBuildGetToOneRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaBuildLocalizationsBuildGetToOneRelatedResponse(rsp)
}

// BetaGroupsGetCollectionWithResponse request returning *BetaGroupsGetCollectionResponse
func (c *ClientWithResponses) BetaGroupsGetCollectionWithResponse(ctx context.Context, params *BetaGroupsGetCollectionParams, reqEditors ...RequestEditorFn) (*BetaGroupsGetCollectionResponse, error) {
	rsp, err := c.BetaGroupsGetCollection(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaGroupsGetCollectionResponse(rsp)
}

// BetaGroupsCreateInstanceWithBodyWithResponse request with arbitrary body returning *BetaGroupsCreateInstanceResponse
func (c *ClientWithResponses) BetaGroupsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BetaGroupsCreateInstanceResponse, error) {
	rsp, err := c.BetaGroupsCreateInstanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaGroupsCreateInstanceResponse(rsp)
}

func (c *ClientWithResponses) BetaGroupsCreateInstanceWithResponse(ctx context.Context, body BetaGroupsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*BetaGroupsCreateInstanceResponse, error) {
	rsp, err := c.BetaGroupsCreateInstance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaGroupsCreateInstanceResponse(rsp)
}

// BetaGroupsDeleteInstanceWithResponse request returning *BetaGroupsDeleteInstanceResponse
func (c *ClientWithResponses) BetaGroupsDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*BetaGroupsDeleteInstanceResponse, error) {
	rsp, err := c.BetaGroupsDeleteInstance(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaGroupsDeleteInstanceResponse(rsp)
}

// BetaGroupsGetInstanceWithResponse request returning *BetaGroupsGetInstanceResponse
func (c *ClientWithResponses) BetaGroupsGetInstanceWithResponse(ctx context.Context, id string, params *BetaGroupsGetInstanceParams, reqEditors ...RequestEditorFn) (*BetaGroupsGetInstanceResponse, error) {
	rsp, err := c.BetaGroupsGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaGroupsGetInstanceResponse(rsp)
}

// BetaGroupsUpdateInstanceWithBodyWithResponse request with arbitrary body returning *BetaGroupsUpdateInstanceResponse
func (c *ClientWithResponses) BetaGroupsUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BetaGroupsUpdateInstanceResponse, error) {
	rsp, err := c.BetaGroupsUpdateInstanceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaGroupsUpdateInstanceResponse(rsp)
}

func (c *ClientWithResponses) BetaGroupsUpdateInstanceWithResponse(ctx context.Context, id string, body BetaGroupsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*BetaGroupsUpdateInstanceResponse, error) {
	rsp, err := c.BetaGroupsUpdateInstance(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaGroupsUpdateInstanceResponse(rsp)
}

// BetaGroupsAppGetToOneRelatedWithResponse request returning *BetaGroupsAppGetToOneRelatedResponse
func (c *ClientWithResponses) BetaGroupsAppGetToOneRelatedWithResponse(ctx context.Context, id string, params *BetaGroupsAppGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*BetaGroupsAppGetToOneRelatedResponse, error) {
	rsp, err := c.BetaGroupsAppGetToOneRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaGroupsAppGetToOneRelatedResponse(rsp)
}

// BetaGroupsBetaTestersGetToManyRelatedWithResponse request returning *BetaGroupsBetaTestersGetToManyRelatedResponse
func (c *ClientWithResponses) BetaGroupsBetaTestersGetToManyRelatedWithResponse(ctx context.Context, id string, params *BetaGroupsBetaTestersGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*BetaGroupsBetaTestersGetToManyRelatedResponse, error) {
	rsp, err := c.BetaGroupsBetaTestersGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaGroupsBetaTestersGetToManyRelatedResponse(rsp)
}

// BetaGroupsBuildsGetToManyRelatedWithResponse request returning *BetaGroupsBuildsGetToManyRelatedResponse
func (c *ClientWithResponses) BetaGroupsBuildsGetToManyRelatedWithResponse(ctx context.Context, id string, params *BetaGroupsBuildsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*BetaGroupsBuildsGetToManyRelatedResponse, error) {
	rsp, err := c.BetaGroupsBuildsGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaGroupsBuildsGetToManyRelatedResponse(rsp)
}

// BetaGroupsBetaTestersDeleteToManyRelationshipWithBodyWithResponse request with arbitrary body returning *BetaGroupsBetaTestersDeleteToManyRelationshipResponse
func (c *ClientWithResponses) BetaGroupsBetaTestersDeleteToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BetaGroupsBetaTestersDeleteToManyRelationshipResponse, error) {
	rsp, err := c.BetaGroupsBetaTestersDeleteToManyRelationshipWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaGroupsBetaTestersDeleteToManyRelationshipResponse(rsp)
}

func (c *ClientWithResponses) BetaGroupsBetaTestersDeleteToManyRelationshipWithResponse(ctx context.Context, id string, body BetaGroupsBetaTestersDeleteToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*BetaGroupsBetaTestersDeleteToManyRelationshipResponse, error) {
	rsp, err := c.BetaGroupsBetaTestersDeleteToManyRelationship(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaGroupsBetaTestersDeleteToManyRelationshipResponse(rsp)
}

// BetaGroupsBetaTestersGetToManyRelationshipWithResponse request returning *BetaGroupsBetaTestersGetToManyRelationshipResponse
func (c *ClientWithResponses) BetaGroupsBetaTestersGetToManyRelationshipWithResponse(ctx context.Context, id string, params *BetaGroupsBetaTestersGetToManyRelationshipParams, reqEditors ...RequestEditorFn) (*BetaGroupsBetaTestersGetToManyRelationshipResponse, error) {
	rsp, err := c.BetaGroupsBetaTestersGetToManyRelationship(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaGroupsBetaTestersGetToManyRelationshipResponse(rsp)
}

// BetaGroupsBetaTestersCreateToManyRelationshipWithBodyWithResponse request with arbitrary body returning *BetaGroupsBetaTestersCreateToManyRelationshipResponse
func (c *ClientWithResponses) BetaGroupsBetaTestersCreateToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BetaGroupsBetaTestersCreateToManyRelationshipResponse, error) {
	rsp, err := c.BetaGroupsBetaTestersCreateToManyRelationshipWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaGroupsBetaTestersCreateToManyRelationshipResponse(rsp)
}

func (c *ClientWithResponses) BetaGroupsBetaTestersCreateToManyRelationshipWithResponse(ctx context.Context, id string, body BetaGroupsBetaTestersCreateToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*BetaGroupsBetaTestersCreateToManyRelationshipResponse, error) {
	rsp, err := c.BetaGroupsBetaTestersCreateToManyRelationship(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaGroupsBetaTestersCreateToManyRelationshipResponse(rsp)
}

// BetaGroupsBuildsDeleteToManyRelationshipWithBodyWithResponse request with arbitrary body returning *BetaGroupsBuildsDeleteToManyRelationshipResponse
func (c *ClientWithResponses) BetaGroupsBuildsDeleteToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BetaGroupsBuildsDeleteToManyRelationshipResponse, error) {
	rsp, err := c.BetaGroupsBuildsDeleteToManyRelationshipWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaGroupsBuildsDeleteToManyRelationshipResponse(rsp)
}

func (c *ClientWithResponses) BetaGroupsBuildsDeleteToManyRelationshipWithResponse(ctx context.Context, id string, body BetaGroupsBuildsDeleteToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*BetaGroupsBuildsDeleteToManyRelationshipResponse, error) {
	rsp, err := c.BetaGroupsBuildsDeleteToManyRelationship(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaGroupsBuildsDeleteToManyRelationshipResponse(rsp)
}

// BetaGroupsBuildsGetToManyRelationshipWithResponse request returning *BetaGroupsBuildsGetToManyRelationshipResponse
func (c *ClientWithResponses) BetaGroupsBuildsGetToManyRelationshipWithResponse(ctx context.Context, id string, params *BetaGroupsBuildsGetToManyRelationshipParams, reqEditors ...RequestEditorFn) (*BetaGroupsBuildsGetToManyRelationshipResponse, error) {
	rsp, err := c.BetaGroupsBuildsGetToManyRelationship(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaGroupsBuildsGetToManyRelationshipResponse(rsp)
}

// BetaGroupsBuildsCreateToManyRelationshipWithBodyWithResponse request with arbitrary body returning *BetaGroupsBuildsCreateToManyRelationshipResponse
func (c *ClientWithResponses) BetaGroupsBuildsCreateToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BetaGroupsBuildsCreateToManyRelationshipResponse, error) {
	rsp, err := c.BetaGroupsBuildsCreateToManyRelationshipWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaGroupsBuildsCreateToManyRelationshipResponse(rsp)
}

func (c *ClientWithResponses) BetaGroupsBuildsCreateToManyRelationshipWithResponse(ctx context.Context, id string, body BetaGroupsBuildsCreateToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*BetaGroupsBuildsCreateToManyRelationshipResponse, error) {
	rsp, err := c.BetaGroupsBuildsCreateToManyRelationship(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaGroupsBuildsCreateToManyRelationshipResponse(rsp)
}

// BetaLicenseAgreementsGetCollectionWithResponse request returning *BetaLicenseAgreementsGetCollectionResponse
func (c *ClientWithResponses) BetaLicenseAgreementsGetCollectionWithResponse(ctx context.Context, params *BetaLicenseAgreementsGetCollectionParams, reqEditors ...RequestEditorFn) (*BetaLicenseAgreementsGetCollectionResponse, error) {
	rsp, err := c.BetaLicenseAgreementsGetCollection(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaLicenseAgreementsGetCollectionResponse(rsp)
}

// BetaLicenseAgreementsGetInstanceWithResponse request returning *BetaLicenseAgreementsGetInstanceResponse
func (c *ClientWithResponses) BetaLicenseAgreementsGetInstanceWithResponse(ctx context.Context, id string, params *BetaLicenseAgreementsGetInstanceParams, reqEditors ...RequestEditorFn) (*BetaLicenseAgreementsGetInstanceResponse, error) {
	rsp, err := c.BetaLicenseAgreementsGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaLicenseAgreementsGetInstanceResponse(rsp)
}

// BetaLicenseAgreementsUpdateInstanceWithBodyWithResponse request with arbitrary body returning *BetaLicenseAgreementsUpdateInstanceResponse
func (c *ClientWithResponses) BetaLicenseAgreementsUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BetaLicenseAgreementsUpdateInstanceResponse, error) {
	rsp, err := c.BetaLicenseAgreementsUpdateInstanceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaLicenseAgreementsUpdateInstanceResponse(rsp)
}

func (c *ClientWithResponses) BetaLicenseAgreementsUpdateInstanceWithResponse(ctx context.Context, id string, body BetaLicenseAgreementsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*BetaLicenseAgreementsUpdateInstanceResponse, error) {
	rsp, err := c.BetaLicenseAgreementsUpdateInstance(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaLicenseAgreementsUpdateInstanceResponse(rsp)
}

// BetaLicenseAgreementsAppGetToOneRelatedWithResponse request returning *BetaLicenseAgreementsAppGetToOneRelatedResponse
func (c *ClientWithResponses) BetaLicenseAgreementsAppGetToOneRelatedWithResponse(ctx context.Context, id string, params *BetaLicenseAgreementsAppGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*BetaLicenseAgreementsAppGetToOneRelatedResponse, error) {
	rsp, err := c.BetaLicenseAgreementsAppGetToOneRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaLicenseAgreementsAppGetToOneRelatedResponse(rsp)
}

// BetaTesterInvitationsCreateInstanceWithBodyWithResponse request with arbitrary body returning *BetaTesterInvitationsCreateInstanceResponse
func (c *ClientWithResponses) BetaTesterInvitationsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BetaTesterInvitationsCreateInstanceResponse, error) {
	rsp, err := c.BetaTesterInvitationsCreateInstanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaTesterInvitationsCreateInstanceResponse(rsp)
}

func (c *ClientWithResponses) BetaTesterInvitationsCreateInstanceWithResponse(ctx context.Context, body BetaTesterInvitationsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*BetaTesterInvitationsCreateInstanceResponse, error) {
	rsp, err := c.BetaTesterInvitationsCreateInstance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaTesterInvitationsCreateInstanceResponse(rsp)
}

// BetaTestersGetCollectionWithResponse request returning *BetaTestersGetCollectionResponse
func (c *ClientWithResponses) BetaTestersGetCollectionWithResponse(ctx context.Context, params *BetaTestersGetCollectionParams, reqEditors ...RequestEditorFn) (*BetaTestersGetCollectionResponse, error) {
	rsp, err := c.BetaTestersGetCollection(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaTestersGetCollectionResponse(rsp)
}

// BetaTestersCreateInstanceWithBodyWithResponse request with arbitrary body returning *BetaTestersCreateInstanceResponse
func (c *ClientWithResponses) BetaTestersCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BetaTestersCreateInstanceResponse, error) {
	rsp, err := c.BetaTestersCreateInstanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaTestersCreateInstanceResponse(rsp)
}

func (c *ClientWithResponses) BetaTestersCreateInstanceWithResponse(ctx context.Context, body BetaTestersCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*BetaTestersCreateInstanceResponse, error) {
	rsp, err := c.BetaTestersCreateInstance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaTestersCreateInstanceResponse(rsp)
}

// BetaTestersDeleteInstanceWithResponse request returning *BetaTestersDeleteInstanceResponse
func (c *ClientWithResponses) BetaTestersDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*BetaTestersDeleteInstanceResponse, error) {
	rsp, err := c.BetaTestersDeleteInstance(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaTestersDeleteInstanceResponse(rsp)
}

// BetaTestersGetInstanceWithResponse request returning *BetaTestersGetInstanceResponse
func (c *ClientWithResponses) BetaTestersGetInstanceWithResponse(ctx context.Context, id string, params *BetaTestersGetInstanceParams, reqEditors ...RequestEditorFn) (*BetaTestersGetInstanceResponse, error) {
	rsp, err := c.BetaTestersGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaTestersGetInstanceResponse(rsp)
}

// BetaTestersAppsGetToManyRelatedWithResponse request returning *BetaTestersAppsGetToManyRelatedResponse
func (c *ClientWithResponses) BetaTestersAppsGetToManyRelatedWithResponse(ctx context.Context, id string, params *BetaTestersAppsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*BetaTestersAppsGetToManyRelatedResponse, error) {
	rsp, err := c.BetaTestersAppsGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaTestersAppsGetToManyRelatedResponse(rsp)
}

// BetaTestersBetaGroupsGetToManyRelatedWithResponse request returning *BetaTestersBetaGroupsGetToManyRelatedResponse
func (c *ClientWithResponses) BetaTestersBetaGroupsGetToManyRelatedWithResponse(ctx context.Context, id string, params *BetaTestersBetaGroupsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*BetaTestersBetaGroupsGetToManyRelatedResponse, error) {
	rsp, err := c.BetaTestersBetaGroupsGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaTestersBetaGroupsGetToManyRelatedResponse(rsp)
}

// BetaTestersBuildsGetToManyRelatedWithResponse request returning *BetaTestersBuildsGetToManyRelatedResponse
func (c *ClientWithResponses) BetaTestersBuildsGetToManyRelatedWithResponse(ctx context.Context, id string, params *BetaTestersBuildsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*BetaTestersBuildsGetToManyRelatedResponse, error) {
	rsp, err := c.BetaTestersBuildsGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaTestersBuildsGetToManyRelatedResponse(rsp)
}

// BetaTestersAppsDeleteToManyRelationshipWithBodyWithResponse request with arbitrary body returning *BetaTestersAppsDeleteToManyRelationshipResponse
func (c *ClientWithResponses) BetaTestersAppsDeleteToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BetaTestersAppsDeleteToManyRelationshipResponse, error) {
	rsp, err := c.BetaTestersAppsDeleteToManyRelationshipWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaTestersAppsDeleteToManyRelationshipResponse(rsp)
}

func (c *ClientWithResponses) BetaTestersAppsDeleteToManyRelationshipWithResponse(ctx context.Context, id string, body BetaTestersAppsDeleteToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*BetaTestersAppsDeleteToManyRelationshipResponse, error) {
	rsp, err := c.BetaTestersAppsDeleteToManyRelationship(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaTestersAppsDeleteToManyRelationshipResponse(rsp)
}

// BetaTestersAppsGetToManyRelationshipWithResponse request returning *BetaTestersAppsGetToManyRelationshipResponse
func (c *ClientWithResponses) BetaTestersAppsGetToManyRelationshipWithResponse(ctx context.Context, id string, params *BetaTestersAppsGetToManyRelationshipParams, reqEditors ...RequestEditorFn) (*BetaTestersAppsGetToManyRelationshipResponse, error) {
	rsp, err := c.BetaTestersAppsGetToManyRelationship(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaTestersAppsGetToManyRelationshipResponse(rsp)
}

// BetaTestersBetaGroupsDeleteToManyRelationshipWithBodyWithResponse request with arbitrary body returning *BetaTestersBetaGroupsDeleteToManyRelationshipResponse
func (c *ClientWithResponses) BetaTestersBetaGroupsDeleteToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BetaTestersBetaGroupsDeleteToManyRelationshipResponse, error) {
	rsp, err := c.BetaTestersBetaGroupsDeleteToManyRelationshipWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaTestersBetaGroupsDeleteToManyRelationshipResponse(rsp)
}

func (c *ClientWithResponses) BetaTestersBetaGroupsDeleteToManyRelationshipWithResponse(ctx context.Context, id string, body BetaTestersBetaGroupsDeleteToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*BetaTestersBetaGroupsDeleteToManyRelationshipResponse, error) {
	rsp, err := c.BetaTestersBetaGroupsDeleteToManyRelationship(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaTestersBetaGroupsDeleteToManyRelationshipResponse(rsp)
}

// BetaTestersBetaGroupsGetToManyRelationshipWithResponse request returning *BetaTestersBetaGroupsGetToManyRelationshipResponse
func (c *ClientWithResponses) BetaTestersBetaGroupsGetToManyRelationshipWithResponse(ctx context.Context, id string, params *BetaTestersBetaGroupsGetToManyRelationshipParams, reqEditors ...RequestEditorFn) (*BetaTestersBetaGroupsGetToManyRelationshipResponse, error) {
	rsp, err := c.BetaTestersBetaGroupsGetToManyRelationship(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaTestersBetaGroupsGetToManyRelationshipResponse(rsp)
}

// BetaTestersBetaGroupsCreateToManyRelationshipWithBodyWithResponse request with arbitrary body returning *BetaTestersBetaGroupsCreateToManyRelationshipResponse
func (c *ClientWithResponses) BetaTestersBetaGroupsCreateToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BetaTestersBetaGroupsCreateToManyRelationshipResponse, error) {
	rsp, err := c.BetaTestersBetaGroupsCreateToManyRelationshipWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaTestersBetaGroupsCreateToManyRelationshipResponse(rsp)
}

func (c *ClientWithResponses) BetaTestersBetaGroupsCreateToManyRelationshipWithResponse(ctx context.Context, id string, body BetaTestersBetaGroupsCreateToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*BetaTestersBetaGroupsCreateToManyRelationshipResponse, error) {
	rsp, err := c.BetaTestersBetaGroupsCreateToManyRelationship(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaTestersBetaGroupsCreateToManyRelationshipResponse(rsp)
}

// BetaTestersBuildsDeleteToManyRelationshipWithBodyWithResponse request with arbitrary body returning *BetaTestersBuildsDeleteToManyRelationshipResponse
func (c *ClientWithResponses) BetaTestersBuildsDeleteToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BetaTestersBuildsDeleteToManyRelationshipResponse, error) {
	rsp, err := c.BetaTestersBuildsDeleteToManyRelationshipWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaTestersBuildsDeleteToManyRelationshipResponse(rsp)
}

func (c *ClientWithResponses) BetaTestersBuildsDeleteToManyRelationshipWithResponse(ctx context.Context, id string, body BetaTestersBuildsDeleteToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*BetaTestersBuildsDeleteToManyRelationshipResponse, error) {
	rsp, err := c.BetaTestersBuildsDeleteToManyRelationship(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaTestersBuildsDeleteToManyRelationshipResponse(rsp)
}

// BetaTestersBuildsGetToManyRelationshipWithResponse request returning *BetaTestersBuildsGetToManyRelationshipResponse
func (c *ClientWithResponses) BetaTestersBuildsGetToManyRelationshipWithResponse(ctx context.Context, id string, params *BetaTestersBuildsGetToManyRelationshipParams, reqEditors ...RequestEditorFn) (*BetaTestersBuildsGetToManyRelationshipResponse, error) {
	rsp, err := c.BetaTestersBuildsGetToManyRelationship(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaTestersBuildsGetToManyRelationshipResponse(rsp)
}

// BetaTestersBuildsCreateToManyRelationshipWithBodyWithResponse request with arbitrary body returning *BetaTestersBuildsCreateToManyRelationshipResponse
func (c *ClientWithResponses) BetaTestersBuildsCreateToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BetaTestersBuildsCreateToManyRelationshipResponse, error) {
	rsp, err := c.BetaTestersBuildsCreateToManyRelationshipWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaTestersBuildsCreateToManyRelationshipResponse(rsp)
}

func (c *ClientWithResponses) BetaTestersBuildsCreateToManyRelationshipWithResponse(ctx context.Context, id string, body BetaTestersBuildsCreateToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*BetaTestersBuildsCreateToManyRelationshipResponse, error) {
	rsp, err := c.BetaTestersBuildsCreateToManyRelationship(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBetaTestersBuildsCreateToManyRelationshipResponse(rsp)
}

// BuildBetaDetailsGetCollectionWithResponse request returning *BuildBetaDetailsGetCollectionResponse
func (c *ClientWithResponses) BuildBetaDetailsGetCollectionWithResponse(ctx context.Context, params *BuildBetaDetailsGetCollectionParams, reqEditors ...RequestEditorFn) (*BuildBetaDetailsGetCollectionResponse, error) {
	rsp, err := c.BuildBetaDetailsGetCollection(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBuildBetaDetailsGetCollectionResponse(rsp)
}

// BuildBetaDetailsGetInstanceWithResponse request returning *BuildBetaDetailsGetInstanceResponse
func (c *ClientWithResponses) BuildBetaDetailsGetInstanceWithResponse(ctx context.Context, id string, params *BuildBetaDetailsGetInstanceParams, reqEditors ...RequestEditorFn) (*BuildBetaDetailsGetInstanceResponse, error) {
	rsp, err := c.BuildBetaDetailsGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBuildBetaDetailsGetInstanceResponse(rsp)
}

// BuildBetaDetailsUpdateInstanceWithBodyWithResponse request with arbitrary body returning *BuildBetaDetailsUpdateInstanceResponse
func (c *ClientWithResponses) BuildBetaDetailsUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BuildBetaDetailsUpdateInstanceResponse, error) {
	rsp, err := c.BuildBetaDetailsUpdateInstanceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBuildBetaDetailsUpdateInstanceResponse(rsp)
}

func (c *ClientWithResponses) BuildBetaDetailsUpdateInstanceWithResponse(ctx context.Context, id string, body BuildBetaDetailsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*BuildBetaDetailsUpdateInstanceResponse, error) {
	rsp, err := c.BuildBetaDetailsUpdateInstance(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBuildBetaDetailsUpdateInstanceResponse(rsp)
}

// BuildBetaDetailsBuildGetToOneRelatedWithResponse request returning *BuildBetaDetailsBuildGetToOneRelatedResponse
func (c *ClientWithResponses) BuildBetaDetailsBuildGetToOneRelatedWithResponse(ctx context.Context, id string, params *BuildBetaDetailsBuildGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*BuildBetaDetailsBuildGetToOneRelatedResponse, error) {
	rsp, err := c.BuildBetaDetailsBuildGetToOneRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBuildBetaDetailsBuildGetToOneRelatedResponse(rsp)
}

// BuildBetaNotificationsCreateInstanceWithBodyWithResponse request with arbitrary body returning *BuildBetaNotificationsCreateInstanceResponse
func (c *ClientWithResponses) BuildBetaNotificationsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BuildBetaNotificationsCreateInstanceResponse, error) {
	rsp, err := c.BuildBetaNotificationsCreateInstanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBuildBetaNotificationsCreateInstanceResponse(rsp)
}

func (c *ClientWithResponses) BuildBetaNotificationsCreateInstanceWithResponse(ctx context.Context, body BuildBetaNotificationsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*BuildBetaNotificationsCreateInstanceResponse, error) {
	rsp, err := c.BuildBetaNotificationsCreateInstance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBuildBetaNotificationsCreateInstanceResponse(rsp)
}

// BuildsGetCollectionWithResponse request returning *BuildsGetCollectionResponse
func (c *ClientWithResponses) BuildsGetCollectionWithResponse(ctx context.Context, params *BuildsGetCollectionParams, reqEditors ...RequestEditorFn) (*BuildsGetCollectionResponse, error) {
	rsp, err := c.BuildsGetCollection(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBuildsGetCollectionResponse(rsp)
}

// BuildsGetInstanceWithResponse request returning *BuildsGetInstanceResponse
func (c *ClientWithResponses) BuildsGetInstanceWithResponse(ctx context.Context, id string, params *BuildsGetInstanceParams, reqEditors ...RequestEditorFn) (*BuildsGetInstanceResponse, error) {
	rsp, err := c.BuildsGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBuildsGetInstanceResponse(rsp)
}

// BuildsUpdateInstanceWithBodyWithResponse request with arbitrary body returning *BuildsUpdateInstanceResponse
func (c *ClientWithResponses) BuildsUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BuildsUpdateInstanceResponse, error) {
	rsp, err := c.BuildsUpdateInstanceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBuildsUpdateInstanceResponse(rsp)
}

func (c *ClientWithResponses) BuildsUpdateInstanceWithResponse(ctx context.Context, id string, body BuildsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*BuildsUpdateInstanceResponse, error) {
	rsp, err := c.BuildsUpdateInstance(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBuildsUpdateInstanceResponse(rsp)
}

// BuildsAppGetToOneRelatedWithResponse request returning *BuildsAppGetToOneRelatedResponse
func (c *ClientWithResponses) BuildsAppGetToOneRelatedWithResponse(ctx context.Context, id string, params *BuildsAppGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*BuildsAppGetToOneRelatedResponse, error) {
	rsp, err := c.BuildsAppGetToOneRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBuildsAppGetToOneRelatedResponse(rsp)
}

// BuildsAppEncryptionDeclarationGetToOneRelatedWithResponse request returning *BuildsAppEncryptionDeclarationGetToOneRelatedResponse
func (c *ClientWithResponses) BuildsAppEncryptionDeclarationGetToOneRelatedWithResponse(ctx context.Context, id string, params *BuildsAppEncryptionDeclarationGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*BuildsAppEncryptionDeclarationGetToOneRelatedResponse, error) {
	rsp, err := c.BuildsAppEncryptionDeclarationGetToOneRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBuildsAppEncryptionDeclarationGetToOneRelatedResponse(rsp)
}

// BuildsAppStoreVersionGetToOneRelatedWithResponse request returning *BuildsAppStoreVersionGetToOneRelatedResponse
func (c *ClientWithResponses) BuildsAppStoreVersionGetToOneRelatedWithResponse(ctx context.Context, id string, params *BuildsAppStoreVersionGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*BuildsAppStoreVersionGetToOneRelatedResponse, error) {
	rsp, err := c.BuildsAppStoreVersionGetToOneRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBuildsAppStoreVersionGetToOneRelatedResponse(rsp)
}

// BuildsBetaAppReviewSubmissionGetToOneRelatedWithResponse request returning *BuildsBetaAppReviewSubmissionGetToOneRelatedResponse
func (c *ClientWithResponses) BuildsBetaAppReviewSubmissionGetToOneRelatedWithResponse(ctx context.Context, id string, params *BuildsBetaAppReviewSubmissionGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*BuildsBetaAppReviewSubmissionGetToOneRelatedResponse, error) {
	rsp, err := c.BuildsBetaAppReviewSubmissionGetToOneRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBuildsBetaAppReviewSubmissionGetToOneRelatedResponse(rsp)
}

// BuildsBetaBuildLocalizationsGetToManyRelatedWithResponse request returning *BuildsBetaBuildLocalizationsGetToManyRelatedResponse
func (c *ClientWithResponses) BuildsBetaBuildLocalizationsGetToManyRelatedWithResponse(ctx context.Context, id string, params *BuildsBetaBuildLocalizationsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*BuildsBetaBuildLocalizationsGetToManyRelatedResponse, error) {
	rsp, err := c.BuildsBetaBuildLocalizationsGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBuildsBetaBuildLocalizationsGetToManyRelatedResponse(rsp)
}

// BuildsBuildBetaDetailGetToOneRelatedWithResponse request returning *BuildsBuildBetaDetailGetToOneRelatedResponse
func (c *ClientWithResponses) BuildsBuildBetaDetailGetToOneRelatedWithResponse(ctx context.Context, id string, params *BuildsBuildBetaDetailGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*BuildsBuildBetaDetailGetToOneRelatedResponse, error) {
	rsp, err := c.BuildsBuildBetaDetailGetToOneRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBuildsBuildBetaDetailGetToOneRelatedResponse(rsp)
}

// BuildsDiagnosticSignaturesGetToManyRelatedWithResponse request returning *BuildsDiagnosticSignaturesGetToManyRelatedResponse
func (c *ClientWithResponses) BuildsDiagnosticSignaturesGetToManyRelatedWithResponse(ctx context.Context, id string, params *BuildsDiagnosticSignaturesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*BuildsDiagnosticSignaturesGetToManyRelatedResponse, error) {
	rsp, err := c.BuildsDiagnosticSignaturesGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBuildsDiagnosticSignaturesGetToManyRelatedResponse(rsp)
}

// BuildsIconsGetToManyRelatedWithResponse request returning *BuildsIconsGetToManyRelatedResponse
func (c *ClientWithResponses) BuildsIconsGetToManyRelatedWithResponse(ctx context.Context, id string, params *BuildsIconsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*BuildsIconsGetToManyRelatedResponse, error) {
	rsp, err := c.BuildsIconsGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBuildsIconsGetToManyRelatedResponse(rsp)
}

// BuildsIndividualTestersGetToManyRelatedWithResponse request returning *BuildsIndividualTestersGetToManyRelatedResponse
func (c *ClientWithResponses) BuildsIndividualTestersGetToManyRelatedWithResponse(ctx context.Context, id string, params *BuildsIndividualTestersGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*BuildsIndividualTestersGetToManyRelatedResponse, error) {
	rsp, err := c.BuildsIndividualTestersGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBuildsIndividualTestersGetToManyRelatedResponse(rsp)
}

// BuildsPerfPowerMetricsGetToManyRelatedWithResponse request returning *BuildsPerfPowerMetricsGetToManyRelatedResponse
func (c *ClientWithResponses) BuildsPerfPowerMetricsGetToManyRelatedWithResponse(ctx context.Context, id string, params *BuildsPerfPowerMetricsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*BuildsPerfPowerMetricsGetToManyRelatedResponse, error) {
	rsp, err := c.BuildsPerfPowerMetricsGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBuildsPerfPowerMetricsGetToManyRelatedResponse(rsp)
}

// BuildsPreReleaseVersionGetToOneRelatedWithResponse request returning *BuildsPreReleaseVersionGetToOneRelatedResponse
func (c *ClientWithResponses) BuildsPreReleaseVersionGetToOneRelatedWithResponse(ctx context.Context, id string, params *BuildsPreReleaseVersionGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*BuildsPreReleaseVersionGetToOneRelatedResponse, error) {
	rsp, err := c.BuildsPreReleaseVersionGetToOneRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBuildsPreReleaseVersionGetToOneRelatedResponse(rsp)
}

// BuildsAppEncryptionDeclarationGetToOneRelationshipWithResponse request returning *BuildsAppEncryptionDeclarationGetToOneRelationshipResponse
func (c *ClientWithResponses) BuildsAppEncryptionDeclarationGetToOneRelationshipWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*BuildsAppEncryptionDeclarationGetToOneRelationshipResponse, error) {
	rsp, err := c.BuildsAppEncryptionDeclarationGetToOneRelationship(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBuildsAppEncryptionDeclarationGetToOneRelationshipResponse(rsp)
}

// BuildsAppEncryptionDeclarationUpdateToOneRelationshipWithBodyWithResponse request with arbitrary body returning *BuildsAppEncryptionDeclarationUpdateToOneRelationshipResponse
func (c *ClientWithResponses) BuildsAppEncryptionDeclarationUpdateToOneRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BuildsAppEncryptionDeclarationUpdateToOneRelationshipResponse, error) {
	rsp, err := c.BuildsAppEncryptionDeclarationUpdateToOneRelationshipWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBuildsAppEncryptionDeclarationUpdateToOneRelationshipResponse(rsp)
}

func (c *ClientWithResponses) BuildsAppEncryptionDeclarationUpdateToOneRelationshipWithResponse(ctx context.Context, id string, body BuildsAppEncryptionDeclarationUpdateToOneRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*BuildsAppEncryptionDeclarationUpdateToOneRelationshipResponse, error) {
	rsp, err := c.BuildsAppEncryptionDeclarationUpdateToOneRelationship(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBuildsAppEncryptionDeclarationUpdateToOneRelationshipResponse(rsp)
}

// BuildsBetaGroupsDeleteToManyRelationshipWithBodyWithResponse request with arbitrary body returning *BuildsBetaGroupsDeleteToManyRelationshipResponse
func (c *ClientWithResponses) BuildsBetaGroupsDeleteToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BuildsBetaGroupsDeleteToManyRelationshipResponse, error) {
	rsp, err := c.BuildsBetaGroupsDeleteToManyRelationshipWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBuildsBetaGroupsDeleteToManyRelationshipResponse(rsp)
}

func (c *ClientWithResponses) BuildsBetaGroupsDeleteToManyRelationshipWithResponse(ctx context.Context, id string, body BuildsBetaGroupsDeleteToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*BuildsBetaGroupsDeleteToManyRelationshipResponse, error) {
	rsp, err := c.BuildsBetaGroupsDeleteToManyRelationship(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBuildsBetaGroupsDeleteToManyRelationshipResponse(rsp)
}

// BuildsBetaGroupsCreateToManyRelationshipWithBodyWithResponse request with arbitrary body returning *BuildsBetaGroupsCreateToManyRelationshipResponse
func (c *ClientWithResponses) BuildsBetaGroupsCreateToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BuildsBetaGroupsCreateToManyRelationshipResponse, error) {
	rsp, err := c.BuildsBetaGroupsCreateToManyRelationshipWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBuildsBetaGroupsCreateToManyRelationshipResponse(rsp)
}

func (c *ClientWithResponses) BuildsBetaGroupsCreateToManyRelationshipWithResponse(ctx context.Context, id string, body BuildsBetaGroupsCreateToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*BuildsBetaGroupsCreateToManyRelationshipResponse, error) {
	rsp, err := c.BuildsBetaGroupsCreateToManyRelationship(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBuildsBetaGroupsCreateToManyRelationshipResponse(rsp)
}

// BuildsIndividualTestersDeleteToManyRelationshipWithBodyWithResponse request with arbitrary body returning *BuildsIndividualTestersDeleteToManyRelationshipResponse
func (c *ClientWithResponses) BuildsIndividualTestersDeleteToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BuildsIndividualTestersDeleteToManyRelationshipResponse, error) {
	rsp, err := c.BuildsIndividualTestersDeleteToManyRelationshipWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBuildsIndividualTestersDeleteToManyRelationshipResponse(rsp)
}

func (c *ClientWithResponses) BuildsIndividualTestersDeleteToManyRelationshipWithResponse(ctx context.Context, id string, body BuildsIndividualTestersDeleteToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*BuildsIndividualTestersDeleteToManyRelationshipResponse, error) {
	rsp, err := c.BuildsIndividualTestersDeleteToManyRelationship(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBuildsIndividualTestersDeleteToManyRelationshipResponse(rsp)
}

// BuildsIndividualTestersGetToManyRelationshipWithResponse request returning *BuildsIndividualTestersGetToManyRelationshipResponse
func (c *ClientWithResponses) BuildsIndividualTestersGetToManyRelationshipWithResponse(ctx context.Context, id string, params *BuildsIndividualTestersGetToManyRelationshipParams, reqEditors ...RequestEditorFn) (*BuildsIndividualTestersGetToManyRelationshipResponse, error) {
	rsp, err := c.BuildsIndividualTestersGetToManyRelationship(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBuildsIndividualTestersGetToManyRelationshipResponse(rsp)
}

// BuildsIndividualTestersCreateToManyRelationshipWithBodyWithResponse request with arbitrary body returning *BuildsIndividualTestersCreateToManyRelationshipResponse
func (c *ClientWithResponses) BuildsIndividualTestersCreateToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BuildsIndividualTestersCreateToManyRelationshipResponse, error) {
	rsp, err := c.BuildsIndividualTestersCreateToManyRelationshipWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBuildsIndividualTestersCreateToManyRelationshipResponse(rsp)
}

func (c *ClientWithResponses) BuildsIndividualTestersCreateToManyRelationshipWithResponse(ctx context.Context, id string, body BuildsIndividualTestersCreateToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*BuildsIndividualTestersCreateToManyRelationshipResponse, error) {
	rsp, err := c.BuildsIndividualTestersCreateToManyRelationship(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBuildsIndividualTestersCreateToManyRelationshipResponse(rsp)
}

// BundleIdCapabilitiesCreateInstanceWithBodyWithResponse request with arbitrary body returning *BundleIdCapabilitiesCreateInstanceResponse
func (c *ClientWithResponses) BundleIdCapabilitiesCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleIdCapabilitiesCreateInstanceResponse, error) {
	rsp, err := c.BundleIdCapabilitiesCreateInstanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleIdCapabilitiesCreateInstanceResponse(rsp)
}

func (c *ClientWithResponses) BundleIdCapabilitiesCreateInstanceWithResponse(ctx context.Context, body BundleIdCapabilitiesCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleIdCapabilitiesCreateInstanceResponse, error) {
	rsp, err := c.BundleIdCapabilitiesCreateInstance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleIdCapabilitiesCreateInstanceResponse(rsp)
}

// BundleIdCapabilitiesDeleteInstanceWithResponse request returning *BundleIdCapabilitiesDeleteInstanceResponse
func (c *ClientWithResponses) BundleIdCapabilitiesDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*BundleIdCapabilitiesDeleteInstanceResponse, error) {
	rsp, err := c.BundleIdCapabilitiesDeleteInstance(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleIdCapabilitiesDeleteInstanceResponse(rsp)
}

// BundleIdCapabilitiesUpdateInstanceWithBodyWithResponse request with arbitrary body returning *BundleIdCapabilitiesUpdateInstanceResponse
func (c *ClientWithResponses) BundleIdCapabilitiesUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleIdCapabilitiesUpdateInstanceResponse, error) {
	rsp, err := c.BundleIdCapabilitiesUpdateInstanceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleIdCapabilitiesUpdateInstanceResponse(rsp)
}

func (c *ClientWithResponses) BundleIdCapabilitiesUpdateInstanceWithResponse(ctx context.Context, id string, body BundleIdCapabilitiesUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleIdCapabilitiesUpdateInstanceResponse, error) {
	rsp, err := c.BundleIdCapabilitiesUpdateInstance(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleIdCapabilitiesUpdateInstanceResponse(rsp)
}

// BundleIdsGetCollectionWithResponse request returning *BundleIdsGetCollectionResponse
func (c *ClientWithResponses) BundleIdsGetCollectionWithResponse(ctx context.Context, params *BundleIdsGetCollectionParams, reqEditors ...RequestEditorFn) (*BundleIdsGetCollectionResponse, error) {
	rsp, err := c.BundleIdsGetCollection(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleIdsGetCollectionResponse(rsp)
}

// BundleIdsCreateInstanceWithBodyWithResponse request with arbitrary body returning *BundleIdsCreateInstanceResponse
func (c *ClientWithResponses) BundleIdsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleIdsCreateInstanceResponse, error) {
	rsp, err := c.BundleIdsCreateInstanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleIdsCreateInstanceResponse(rsp)
}

func (c *ClientWithResponses) BundleIdsCreateInstanceWithResponse(ctx context.Context, body BundleIdsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleIdsCreateInstanceResponse, error) {
	rsp, err := c.BundleIdsCreateInstance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleIdsCreateInstanceResponse(rsp)
}

// BundleIdsDeleteInstanceWithResponse request returning *BundleIdsDeleteInstanceResponse
func (c *ClientWithResponses) BundleIdsDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*BundleIdsDeleteInstanceResponse, error) {
	rsp, err := c.BundleIdsDeleteInstance(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleIdsDeleteInstanceResponse(rsp)
}

// BundleIdsGetInstanceWithResponse request returning *BundleIdsGetInstanceResponse
func (c *ClientWithResponses) BundleIdsGetInstanceWithResponse(ctx context.Context, id string, params *BundleIdsGetInstanceParams, reqEditors ...RequestEditorFn) (*BundleIdsGetInstanceResponse, error) {
	rsp, err := c.BundleIdsGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleIdsGetInstanceResponse(rsp)
}

// BundleIdsUpdateInstanceWithBodyWithResponse request with arbitrary body returning *BundleIdsUpdateInstanceResponse
func (c *ClientWithResponses) BundleIdsUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundleIdsUpdateInstanceResponse, error) {
	rsp, err := c.BundleIdsUpdateInstanceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleIdsUpdateInstanceResponse(rsp)
}

func (c *ClientWithResponses) BundleIdsUpdateInstanceWithResponse(ctx context.Context, id string, body BundleIdsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*BundleIdsUpdateInstanceResponse, error) {
	rsp, err := c.BundleIdsUpdateInstance(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleIdsUpdateInstanceResponse(rsp)
}

// BundleIdsAppGetToOneRelatedWithResponse request returning *BundleIdsAppGetToOneRelatedResponse
func (c *ClientWithResponses) BundleIdsAppGetToOneRelatedWithResponse(ctx context.Context, id string, params *BundleIdsAppGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*BundleIdsAppGetToOneRelatedResponse, error) {
	rsp, err := c.BundleIdsAppGetToOneRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleIdsAppGetToOneRelatedResponse(rsp)
}

// BundleIdsBundleIdCapabilitiesGetToManyRelatedWithResponse request returning *BundleIdsBundleIdCapabilitiesGetToManyRelatedResponse
func (c *ClientWithResponses) BundleIdsBundleIdCapabilitiesGetToManyRelatedWithResponse(ctx context.Context, id string, params *BundleIdsBundleIdCapabilitiesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*BundleIdsBundleIdCapabilitiesGetToManyRelatedResponse, error) {
	rsp, err := c.BundleIdsBundleIdCapabilitiesGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleIdsBundleIdCapabilitiesGetToManyRelatedResponse(rsp)
}

// BundleIdsProfilesGetToManyRelatedWithResponse request returning *BundleIdsProfilesGetToManyRelatedResponse
func (c *ClientWithResponses) BundleIdsProfilesGetToManyRelatedWithResponse(ctx context.Context, id string, params *BundleIdsProfilesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*BundleIdsProfilesGetToManyRelatedResponse, error) {
	rsp, err := c.BundleIdsProfilesGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundleIdsProfilesGetToManyRelatedResponse(rsp)
}

// CertificatesGetCollectionWithResponse request returning *CertificatesGetCollectionResponse
func (c *ClientWithResponses) CertificatesGetCollectionWithResponse(ctx context.Context, params *CertificatesGetCollectionParams, reqEditors ...RequestEditorFn) (*CertificatesGetCollectionResponse, error) {
	rsp, err := c.CertificatesGetCollection(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCertificatesGetCollectionResponse(rsp)
}

// CertificatesCreateInstanceWithBodyWithResponse request with arbitrary body returning *CertificatesCreateInstanceResponse
func (c *ClientWithResponses) CertificatesCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CertificatesCreateInstanceResponse, error) {
	rsp, err := c.CertificatesCreateInstanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCertificatesCreateInstanceResponse(rsp)
}

func (c *ClientWithResponses) CertificatesCreateInstanceWithResponse(ctx context.Context, body CertificatesCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*CertificatesCreateInstanceResponse, error) {
	rsp, err := c.CertificatesCreateInstance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCertificatesCreateInstanceResponse(rsp)
}

// CertificatesDeleteInstanceWithResponse request returning *CertificatesDeleteInstanceResponse
func (c *ClientWithResponses) CertificatesDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CertificatesDeleteInstanceResponse, error) {
	rsp, err := c.CertificatesDeleteInstance(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCertificatesDeleteInstanceResponse(rsp)
}

// CertificatesGetInstanceWithResponse request returning *CertificatesGetInstanceResponse
func (c *ClientWithResponses) CertificatesGetInstanceWithResponse(ctx context.Context, id string, params *CertificatesGetInstanceParams, reqEditors ...RequestEditorFn) (*CertificatesGetInstanceResponse, error) {
	rsp, err := c.CertificatesGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCertificatesGetInstanceResponse(rsp)
}

// CiArtifactsGetInstanceWithResponse request returning *CiArtifactsGetInstanceResponse
func (c *ClientWithResponses) CiArtifactsGetInstanceWithResponse(ctx context.Context, id string, params *CiArtifactsGetInstanceParams, reqEditors ...RequestEditorFn) (*CiArtifactsGetInstanceResponse, error) {
	rsp, err := c.CiArtifactsGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCiArtifactsGetInstanceResponse(rsp)
}

// CiBuildActionsGetInstanceWithResponse request returning *CiBuildActionsGetInstanceResponse
func (c *ClientWithResponses) CiBuildActionsGetInstanceWithResponse(ctx context.Context, id string, params *CiBuildActionsGetInstanceParams, reqEditors ...RequestEditorFn) (*CiBuildActionsGetInstanceResponse, error) {
	rsp, err := c.CiBuildActionsGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCiBuildActionsGetInstanceResponse(rsp)
}

// CiBuildActionsArtifactsGetToManyRelatedWithResponse request returning *CiBuildActionsArtifactsGetToManyRelatedResponse
func (c *ClientWithResponses) CiBuildActionsArtifactsGetToManyRelatedWithResponse(ctx context.Context, id string, params *CiBuildActionsArtifactsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*CiBuildActionsArtifactsGetToManyRelatedResponse, error) {
	rsp, err := c.CiBuildActionsArtifactsGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCiBuildActionsArtifactsGetToManyRelatedResponse(rsp)
}

// CiBuildActionsBuildRunGetToOneRelatedWithResponse request returning *CiBuildActionsBuildRunGetToOneRelatedResponse
func (c *ClientWithResponses) CiBuildActionsBuildRunGetToOneRelatedWithResponse(ctx context.Context, id string, params *CiBuildActionsBuildRunGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*CiBuildActionsBuildRunGetToOneRelatedResponse, error) {
	rsp, err := c.CiBuildActionsBuildRunGetToOneRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCiBuildActionsBuildRunGetToOneRelatedResponse(rsp)
}

// CiBuildActionsIssuesGetToManyRelatedWithResponse request returning *CiBuildActionsIssuesGetToManyRelatedResponse
func (c *ClientWithResponses) CiBuildActionsIssuesGetToManyRelatedWithResponse(ctx context.Context, id string, params *CiBuildActionsIssuesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*CiBuildActionsIssuesGetToManyRelatedResponse, error) {
	rsp, err := c.CiBuildActionsIssuesGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCiBuildActionsIssuesGetToManyRelatedResponse(rsp)
}

// CiBuildActionsTestResultsGetToManyRelatedWithResponse request returning *CiBuildActionsTestResultsGetToManyRelatedResponse
func (c *ClientWithResponses) CiBuildActionsTestResultsGetToManyRelatedWithResponse(ctx context.Context, id string, params *CiBuildActionsTestResultsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*CiBuildActionsTestResultsGetToManyRelatedResponse, error) {
	rsp, err := c.CiBuildActionsTestResultsGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCiBuildActionsTestResultsGetToManyRelatedResponse(rsp)
}

// CiBuildRunsCreateInstanceWithBodyWithResponse request with arbitrary body returning *CiBuildRunsCreateInstanceResponse
func (c *ClientWithResponses) CiBuildRunsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CiBuildRunsCreateInstanceResponse, error) {
	rsp, err := c.CiBuildRunsCreateInstanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCiBuildRunsCreateInstanceResponse(rsp)
}

func (c *ClientWithResponses) CiBuildRunsCreateInstanceWithResponse(ctx context.Context, body CiBuildRunsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*CiBuildRunsCreateInstanceResponse, error) {
	rsp, err := c.CiBuildRunsCreateInstance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCiBuildRunsCreateInstanceResponse(rsp)
}

// CiBuildRunsGetInstanceWithResponse request returning *CiBuildRunsGetInstanceResponse
func (c *ClientWithResponses) CiBuildRunsGetInstanceWithResponse(ctx context.Context, id string, params *CiBuildRunsGetInstanceParams, reqEditors ...RequestEditorFn) (*CiBuildRunsGetInstanceResponse, error) {
	rsp, err := c.CiBuildRunsGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCiBuildRunsGetInstanceResponse(rsp)
}

// CiBuildRunsActionsGetToManyRelatedWithResponse request returning *CiBuildRunsActionsGetToManyRelatedResponse
func (c *ClientWithResponses) CiBuildRunsActionsGetToManyRelatedWithResponse(ctx context.Context, id string, params *CiBuildRunsActionsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*CiBuildRunsActionsGetToManyRelatedResponse, error) {
	rsp, err := c.CiBuildRunsActionsGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCiBuildRunsActionsGetToManyRelatedResponse(rsp)
}

// CiBuildRunsBuildsGetToManyRelatedWithResponse request returning *CiBuildRunsBuildsGetToManyRelatedResponse
func (c *ClientWithResponses) CiBuildRunsBuildsGetToManyRelatedWithResponse(ctx context.Context, id string, params *CiBuildRunsBuildsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*CiBuildRunsBuildsGetToManyRelatedResponse, error) {
	rsp, err := c.CiBuildRunsBuildsGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCiBuildRunsBuildsGetToManyRelatedResponse(rsp)
}

// CiIssuesGetInstanceWithResponse request returning *CiIssuesGetInstanceResponse
func (c *ClientWithResponses) CiIssuesGetInstanceWithResponse(ctx context.Context, id string, params *CiIssuesGetInstanceParams, reqEditors ...RequestEditorFn) (*CiIssuesGetInstanceResponse, error) {
	rsp, err := c.CiIssuesGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCiIssuesGetInstanceResponse(rsp)
}

// CiMacOsVersionsGetCollectionWithResponse request returning *CiMacOsVersionsGetCollectionResponse
func (c *ClientWithResponses) CiMacOsVersionsGetCollectionWithResponse(ctx context.Context, params *CiMacOsVersionsGetCollectionParams, reqEditors ...RequestEditorFn) (*CiMacOsVersionsGetCollectionResponse, error) {
	rsp, err := c.CiMacOsVersionsGetCollection(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCiMacOsVersionsGetCollectionResponse(rsp)
}

// CiMacOsVersionsGetInstanceWithResponse request returning *CiMacOsVersionsGetInstanceResponse
func (c *ClientWithResponses) CiMacOsVersionsGetInstanceWithResponse(ctx context.Context, id string, params *CiMacOsVersionsGetInstanceParams, reqEditors ...RequestEditorFn) (*CiMacOsVersionsGetInstanceResponse, error) {
	rsp, err := c.CiMacOsVersionsGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCiMacOsVersionsGetInstanceResponse(rsp)
}

// CiMacOsVersionsXcodeVersionsGetToManyRelatedWithResponse request returning *CiMacOsVersionsXcodeVersionsGetToManyRelatedResponse
func (c *ClientWithResponses) CiMacOsVersionsXcodeVersionsGetToManyRelatedWithResponse(ctx context.Context, id string, params *CiMacOsVersionsXcodeVersionsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*CiMacOsVersionsXcodeVersionsGetToManyRelatedResponse, error) {
	rsp, err := c.CiMacOsVersionsXcodeVersionsGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCiMacOsVersionsXcodeVersionsGetToManyRelatedResponse(rsp)
}

// CiProductsGetCollectionWithResponse request returning *CiProductsGetCollectionResponse
func (c *ClientWithResponses) CiProductsGetCollectionWithResponse(ctx context.Context, params *CiProductsGetCollectionParams, reqEditors ...RequestEditorFn) (*CiProductsGetCollectionResponse, error) {
	rsp, err := c.CiProductsGetCollection(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCiProductsGetCollectionResponse(rsp)
}

// CiProductsDeleteInstanceWithResponse request returning *CiProductsDeleteInstanceResponse
func (c *ClientWithResponses) CiProductsDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CiProductsDeleteInstanceResponse, error) {
	rsp, err := c.CiProductsDeleteInstance(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCiProductsDeleteInstanceResponse(rsp)
}

// CiProductsGetInstanceWithResponse request returning *CiProductsGetInstanceResponse
func (c *ClientWithResponses) CiProductsGetInstanceWithResponse(ctx context.Context, id string, params *CiProductsGetInstanceParams, reqEditors ...RequestEditorFn) (*CiProductsGetInstanceResponse, error) {
	rsp, err := c.CiProductsGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCiProductsGetInstanceResponse(rsp)
}

// CiProductsAdditionalRepositoriesGetToManyRelatedWithResponse request returning *CiProductsAdditionalRepositoriesGetToManyRelatedResponse
func (c *ClientWithResponses) CiProductsAdditionalRepositoriesGetToManyRelatedWithResponse(ctx context.Context, id string, params *CiProductsAdditionalRepositoriesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*CiProductsAdditionalRepositoriesGetToManyRelatedResponse, error) {
	rsp, err := c.CiProductsAdditionalRepositoriesGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCiProductsAdditionalRepositoriesGetToManyRelatedResponse(rsp)
}

// CiProductsAppGetToOneRelatedWithResponse request returning *CiProductsAppGetToOneRelatedResponse
func (c *ClientWithResponses) CiProductsAppGetToOneRelatedWithResponse(ctx context.Context, id string, params *CiProductsAppGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*CiProductsAppGetToOneRelatedResponse, error) {
	rsp, err := c.CiProductsAppGetToOneRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCiProductsAppGetToOneRelatedResponse(rsp)
}

// CiProductsBuildRunsGetToManyRelatedWithResponse request returning *CiProductsBuildRunsGetToManyRelatedResponse
func (c *ClientWithResponses) CiProductsBuildRunsGetToManyRelatedWithResponse(ctx context.Context, id string, params *CiProductsBuildRunsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*CiProductsBuildRunsGetToManyRelatedResponse, error) {
	rsp, err := c.CiProductsBuildRunsGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCiProductsBuildRunsGetToManyRelatedResponse(rsp)
}

// CiProductsPrimaryRepositoriesGetToManyRelatedWithResponse request returning *CiProductsPrimaryRepositoriesGetToManyRelatedResponse
func (c *ClientWithResponses) CiProductsPrimaryRepositoriesGetToManyRelatedWithResponse(ctx context.Context, id string, params *CiProductsPrimaryRepositoriesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*CiProductsPrimaryRepositoriesGetToManyRelatedResponse, error) {
	rsp, err := c.CiProductsPrimaryRepositoriesGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCiProductsPrimaryRepositoriesGetToManyRelatedResponse(rsp)
}

// CiProductsWorkflowsGetToManyRelatedWithResponse request returning *CiProductsWorkflowsGetToManyRelatedResponse
func (c *ClientWithResponses) CiProductsWorkflowsGetToManyRelatedWithResponse(ctx context.Context, id string, params *CiProductsWorkflowsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*CiProductsWorkflowsGetToManyRelatedResponse, error) {
	rsp, err := c.CiProductsWorkflowsGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCiProductsWorkflowsGetToManyRelatedResponse(rsp)
}

// CiTestResultsGetInstanceWithResponse request returning *CiTestResultsGetInstanceResponse
func (c *ClientWithResponses) CiTestResultsGetInstanceWithResponse(ctx context.Context, id string, params *CiTestResultsGetInstanceParams, reqEditors ...RequestEditorFn) (*CiTestResultsGetInstanceResponse, error) {
	rsp, err := c.CiTestResultsGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCiTestResultsGetInstanceResponse(rsp)
}

// CiWorkflowsCreateInstanceWithBodyWithResponse request with arbitrary body returning *CiWorkflowsCreateInstanceResponse
func (c *ClientWithResponses) CiWorkflowsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CiWorkflowsCreateInstanceResponse, error) {
	rsp, err := c.CiWorkflowsCreateInstanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCiWorkflowsCreateInstanceResponse(rsp)
}

func (c *ClientWithResponses) CiWorkflowsCreateInstanceWithResponse(ctx context.Context, body CiWorkflowsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*CiWorkflowsCreateInstanceResponse, error) {
	rsp, err := c.CiWorkflowsCreateInstance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCiWorkflowsCreateInstanceResponse(rsp)
}

// CiWorkflowsDeleteInstanceWithResponse request returning *CiWorkflowsDeleteInstanceResponse
func (c *ClientWithResponses) CiWorkflowsDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CiWorkflowsDeleteInstanceResponse, error) {
	rsp, err := c.CiWorkflowsDeleteInstance(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCiWorkflowsDeleteInstanceResponse(rsp)
}

// CiWorkflowsGetInstanceWithResponse request returning *CiWorkflowsGetInstanceResponse
func (c *ClientWithResponses) CiWorkflowsGetInstanceWithResponse(ctx context.Context, id string, params *CiWorkflowsGetInstanceParams, reqEditors ...RequestEditorFn) (*CiWorkflowsGetInstanceResponse, error) {
	rsp, err := c.CiWorkflowsGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCiWorkflowsGetInstanceResponse(rsp)
}

// CiWorkflowsUpdateInstanceWithBodyWithResponse request with arbitrary body returning *CiWorkflowsUpdateInstanceResponse
func (c *ClientWithResponses) CiWorkflowsUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CiWorkflowsUpdateInstanceResponse, error) {
	rsp, err := c.CiWorkflowsUpdateInstanceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCiWorkflowsUpdateInstanceResponse(rsp)
}

func (c *ClientWithResponses) CiWorkflowsUpdateInstanceWithResponse(ctx context.Context, id string, body CiWorkflowsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*CiWorkflowsUpdateInstanceResponse, error) {
	rsp, err := c.CiWorkflowsUpdateInstance(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCiWorkflowsUpdateInstanceResponse(rsp)
}

// CiWorkflowsBuildRunsGetToManyRelatedWithResponse request returning *CiWorkflowsBuildRunsGetToManyRelatedResponse
func (c *ClientWithResponses) CiWorkflowsBuildRunsGetToManyRelatedWithResponse(ctx context.Context, id string, params *CiWorkflowsBuildRunsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*CiWorkflowsBuildRunsGetToManyRelatedResponse, error) {
	rsp, err := c.CiWorkflowsBuildRunsGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCiWorkflowsBuildRunsGetToManyRelatedResponse(rsp)
}

// CiWorkflowsRepositoryGetToOneRelatedWithResponse request returning *CiWorkflowsRepositoryGetToOneRelatedResponse
func (c *ClientWithResponses) CiWorkflowsRepositoryGetToOneRelatedWithResponse(ctx context.Context, id string, params *CiWorkflowsRepositoryGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*CiWorkflowsRepositoryGetToOneRelatedResponse, error) {
	rsp, err := c.CiWorkflowsRepositoryGetToOneRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCiWorkflowsRepositoryGetToOneRelatedResponse(rsp)
}

// CiXcodeVersionsGetCollectionWithResponse request returning *CiXcodeVersionsGetCollectionResponse
func (c *ClientWithResponses) CiXcodeVersionsGetCollectionWithResponse(ctx context.Context, params *CiXcodeVersionsGetCollectionParams, reqEditors ...RequestEditorFn) (*CiXcodeVersionsGetCollectionResponse, error) {
	rsp, err := c.CiXcodeVersionsGetCollection(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCiXcodeVersionsGetCollectionResponse(rsp)
}

// CiXcodeVersionsGetInstanceWithResponse request returning *CiXcodeVersionsGetInstanceResponse
func (c *ClientWithResponses) CiXcodeVersionsGetInstanceWithResponse(ctx context.Context, id string, params *CiXcodeVersionsGetInstanceParams, reqEditors ...RequestEditorFn) (*CiXcodeVersionsGetInstanceResponse, error) {
	rsp, err := c.CiXcodeVersionsGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCiXcodeVersionsGetInstanceResponse(rsp)
}

// CiXcodeVersionsMacOsVersionsGetToManyRelatedWithResponse request returning *CiXcodeVersionsMacOsVersionsGetToManyRelatedResponse
func (c *ClientWithResponses) CiXcodeVersionsMacOsVersionsGetToManyRelatedWithResponse(ctx context.Context, id string, params *CiXcodeVersionsMacOsVersionsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*CiXcodeVersionsMacOsVersionsGetToManyRelatedResponse, error) {
	rsp, err := c.CiXcodeVersionsMacOsVersionsGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCiXcodeVersionsMacOsVersionsGetToManyRelatedResponse(rsp)
}

// DevicesGetCollectionWithResponse request returning *DevicesGetCollectionResponse
func (c *ClientWithResponses) DevicesGetCollectionWithResponse(ctx context.Context, params *DevicesGetCollectionParams, reqEditors ...RequestEditorFn) (*DevicesGetCollectionResponse, error) {
	rsp, err := c.DevicesGetCollection(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevicesGetCollectionResponse(rsp)
}

// DevicesCreateInstanceWithBodyWithResponse request with arbitrary body returning *DevicesCreateInstanceResponse
func (c *ClientWithResponses) DevicesCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DevicesCreateInstanceResponse, error) {
	rsp, err := c.DevicesCreateInstanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevicesCreateInstanceResponse(rsp)
}

func (c *ClientWithResponses) DevicesCreateInstanceWithResponse(ctx context.Context, body DevicesCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*DevicesCreateInstanceResponse, error) {
	rsp, err := c.DevicesCreateInstance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevicesCreateInstanceResponse(rsp)
}

// DevicesGetInstanceWithResponse request returning *DevicesGetInstanceResponse
func (c *ClientWithResponses) DevicesGetInstanceWithResponse(ctx context.Context, id string, params *DevicesGetInstanceParams, reqEditors ...RequestEditorFn) (*DevicesGetInstanceResponse, error) {
	rsp, err := c.DevicesGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevicesGetInstanceResponse(rsp)
}

// DevicesUpdateInstanceWithBodyWithResponse request with arbitrary body returning *DevicesUpdateInstanceResponse
func (c *ClientWithResponses) DevicesUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DevicesUpdateInstanceResponse, error) {
	rsp, err := c.DevicesUpdateInstanceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevicesUpdateInstanceResponse(rsp)
}

func (c *ClientWithResponses) DevicesUpdateInstanceWithResponse(ctx context.Context, id string, body DevicesUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*DevicesUpdateInstanceResponse, error) {
	rsp, err := c.DevicesUpdateInstance(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDevicesUpdateInstanceResponse(rsp)
}

// DiagnosticSignaturesLogsGetToManyRelatedWithResponse request returning *DiagnosticSignaturesLogsGetToManyRelatedResponse
func (c *ClientWithResponses) DiagnosticSignaturesLogsGetToManyRelatedWithResponse(ctx context.Context, id string, params *DiagnosticSignaturesLogsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*DiagnosticSignaturesLogsGetToManyRelatedResponse, error) {
	rsp, err := c.DiagnosticSignaturesLogsGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDiagnosticSignaturesLogsGetToManyRelatedResponse(rsp)
}

// EndUserLicenseAgreementsCreateInstanceWithBodyWithResponse request with arbitrary body returning *EndUserLicenseAgreementsCreateInstanceResponse
func (c *ClientWithResponses) EndUserLicenseAgreementsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EndUserLicenseAgreementsCreateInstanceResponse, error) {
	rsp, err := c.EndUserLicenseAgreementsCreateInstanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndUserLicenseAgreementsCreateInstanceResponse(rsp)
}

func (c *ClientWithResponses) EndUserLicenseAgreementsCreateInstanceWithResponse(ctx context.Context, body EndUserLicenseAgreementsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*EndUserLicenseAgreementsCreateInstanceResponse, error) {
	rsp, err := c.EndUserLicenseAgreementsCreateInstance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndUserLicenseAgreementsCreateInstanceResponse(rsp)
}

// EndUserLicenseAgreementsDeleteInstanceWithResponse request returning *EndUserLicenseAgreementsDeleteInstanceResponse
func (c *ClientWithResponses) EndUserLicenseAgreementsDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*EndUserLicenseAgreementsDeleteInstanceResponse, error) {
	rsp, err := c.EndUserLicenseAgreementsDeleteInstance(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndUserLicenseAgreementsDeleteInstanceResponse(rsp)
}

// EndUserLicenseAgreementsGetInstanceWithResponse request returning *EndUserLicenseAgreementsGetInstanceResponse
func (c *ClientWithResponses) EndUserLicenseAgreementsGetInstanceWithResponse(ctx context.Context, id string, params *EndUserLicenseAgreementsGetInstanceParams, reqEditors ...RequestEditorFn) (*EndUserLicenseAgreementsGetInstanceResponse, error) {
	rsp, err := c.EndUserLicenseAgreementsGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndUserLicenseAgreementsGetInstanceResponse(rsp)
}

// EndUserLicenseAgreementsUpdateInstanceWithBodyWithResponse request with arbitrary body returning *EndUserLicenseAgreementsUpdateInstanceResponse
func (c *ClientWithResponses) EndUserLicenseAgreementsUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EndUserLicenseAgreementsUpdateInstanceResponse, error) {
	rsp, err := c.EndUserLicenseAgreementsUpdateInstanceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndUserLicenseAgreementsUpdateInstanceResponse(rsp)
}

func (c *ClientWithResponses) EndUserLicenseAgreementsUpdateInstanceWithResponse(ctx context.Context, id string, body EndUserLicenseAgreementsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*EndUserLicenseAgreementsUpdateInstanceResponse, error) {
	rsp, err := c.EndUserLicenseAgreementsUpdateInstance(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndUserLicenseAgreementsUpdateInstanceResponse(rsp)
}

// EndUserLicenseAgreementsTerritoriesGetToManyRelatedWithResponse request returning *EndUserLicenseAgreementsTerritoriesGetToManyRelatedResponse
func (c *ClientWithResponses) EndUserLicenseAgreementsTerritoriesGetToManyRelatedWithResponse(ctx context.Context, id string, params *EndUserLicenseAgreementsTerritoriesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*EndUserLicenseAgreementsTerritoriesGetToManyRelatedResponse, error) {
	rsp, err := c.EndUserLicenseAgreementsTerritoriesGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndUserLicenseAgreementsTerritoriesGetToManyRelatedResponse(rsp)
}

// FinanceReportsGetCollectionWithResponse request returning *FinanceReportsGetCollectionResponse
func (c *ClientWithResponses) FinanceReportsGetCollectionWithResponse(ctx context.Context, params *FinanceReportsGetCollectionParams, reqEditors ...RequestEditorFn) (*FinanceReportsGetCollectionResponse, error) {
	rsp, err := c.FinanceReportsGetCollection(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFinanceReportsGetCollectionResponse(rsp)
}

// GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedWithResponse request returning *GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedResponse
func (c *ClientWithResponses) GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedWithResponse(ctx context.Context, id string, params *GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedResponse, error) {
	rsp, err := c.GameCenterEnabledVersionsCompatibleVersionsGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedResponse(rsp)
}

// GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipWithBodyWithResponse request with arbitrary body returning *GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipResponse
func (c *ClientWithResponses) GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipResponse, error) {
	rsp, err := c.GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipResponse(rsp)
}

func (c *ClientWithResponses) GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipWithResponse(ctx context.Context, id string, body GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipResponse, error) {
	rsp, err := c.GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationship(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipResponse(rsp)
}

// GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipWithResponse request returning *GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipResponse
func (c *ClientWithResponses) GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipWithResponse(ctx context.Context, id string, params *GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipParams, reqEditors ...RequestEditorFn) (*GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipResponse, error) {
	rsp, err := c.GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationship(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipResponse(rsp)
}

// GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipWithBodyWithResponse request with arbitrary body returning *GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipResponse
func (c *ClientWithResponses) GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipResponse, error) {
	rsp, err := c.GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipResponse(rsp)
}

func (c *ClientWithResponses) GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipWithResponse(ctx context.Context, id string, body GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipResponse, error) {
	rsp, err := c.GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationship(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipResponse(rsp)
}

// GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipWithBodyWithResponse request with arbitrary body returning *GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipResponse
func (c *ClientWithResponses) GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipResponse, error) {
	rsp, err := c.GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipResponse(rsp)
}

func (c *ClientWithResponses) GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipWithResponse(ctx context.Context, id string, body GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipResponse, error) {
	rsp, err := c.GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationship(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipResponse(rsp)
}

// IdfaDeclarationsCreateInstanceWithBodyWithResponse request with arbitrary body returning *IdfaDeclarationsCreateInstanceResponse
func (c *ClientWithResponses) IdfaDeclarationsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IdfaDeclarationsCreateInstanceResponse, error) {
	rsp, err := c.IdfaDeclarationsCreateInstanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIdfaDeclarationsCreateInstanceResponse(rsp)
}

func (c *ClientWithResponses) IdfaDeclarationsCreateInstanceWithResponse(ctx context.Context, body IdfaDeclarationsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*IdfaDeclarationsCreateInstanceResponse, error) {
	rsp, err := c.IdfaDeclarationsCreateInstance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIdfaDeclarationsCreateInstanceResponse(rsp)
}

// IdfaDeclarationsDeleteInstanceWithResponse request returning *IdfaDeclarationsDeleteInstanceResponse
func (c *ClientWithResponses) IdfaDeclarationsDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IdfaDeclarationsDeleteInstanceResponse, error) {
	rsp, err := c.IdfaDeclarationsDeleteInstance(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIdfaDeclarationsDeleteInstanceResponse(rsp)
}

// IdfaDeclarationsUpdateInstanceWithBodyWithResponse request with arbitrary body returning *IdfaDeclarationsUpdateInstanceResponse
func (c *ClientWithResponses) IdfaDeclarationsUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IdfaDeclarationsUpdateInstanceResponse, error) {
	rsp, err := c.IdfaDeclarationsUpdateInstanceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIdfaDeclarationsUpdateInstanceResponse(rsp)
}

func (c *ClientWithResponses) IdfaDeclarationsUpdateInstanceWithResponse(ctx context.Context, id string, body IdfaDeclarationsUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*IdfaDeclarationsUpdateInstanceResponse, error) {
	rsp, err := c.IdfaDeclarationsUpdateInstance(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIdfaDeclarationsUpdateInstanceResponse(rsp)
}

// InAppPurchasesGetInstanceWithResponse request returning *InAppPurchasesGetInstanceResponse
func (c *ClientWithResponses) InAppPurchasesGetInstanceWithResponse(ctx context.Context, id string, params *InAppPurchasesGetInstanceParams, reqEditors ...RequestEditorFn) (*InAppPurchasesGetInstanceResponse, error) {
	rsp, err := c.InAppPurchasesGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInAppPurchasesGetInstanceResponse(rsp)
}

// PreReleaseVersionsGetCollectionWithResponse request returning *PreReleaseVersionsGetCollectionResponse
func (c *ClientWithResponses) PreReleaseVersionsGetCollectionWithResponse(ctx context.Context, params *PreReleaseVersionsGetCollectionParams, reqEditors ...RequestEditorFn) (*PreReleaseVersionsGetCollectionResponse, error) {
	rsp, err := c.PreReleaseVersionsGetCollection(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePreReleaseVersionsGetCollectionResponse(rsp)
}

// PreReleaseVersionsGetInstanceWithResponse request returning *PreReleaseVersionsGetInstanceResponse
func (c *ClientWithResponses) PreReleaseVersionsGetInstanceWithResponse(ctx context.Context, id string, params *PreReleaseVersionsGetInstanceParams, reqEditors ...RequestEditorFn) (*PreReleaseVersionsGetInstanceResponse, error) {
	rsp, err := c.PreReleaseVersionsGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePreReleaseVersionsGetInstanceResponse(rsp)
}

// PreReleaseVersionsAppGetToOneRelatedWithResponse request returning *PreReleaseVersionsAppGetToOneRelatedResponse
func (c *ClientWithResponses) PreReleaseVersionsAppGetToOneRelatedWithResponse(ctx context.Context, id string, params *PreReleaseVersionsAppGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*PreReleaseVersionsAppGetToOneRelatedResponse, error) {
	rsp, err := c.PreReleaseVersionsAppGetToOneRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePreReleaseVersionsAppGetToOneRelatedResponse(rsp)
}

// PreReleaseVersionsBuildsGetToManyRelatedWithResponse request returning *PreReleaseVersionsBuildsGetToManyRelatedResponse
func (c *ClientWithResponses) PreReleaseVersionsBuildsGetToManyRelatedWithResponse(ctx context.Context, id string, params *PreReleaseVersionsBuildsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*PreReleaseVersionsBuildsGetToManyRelatedResponse, error) {
	rsp, err := c.PreReleaseVersionsBuildsGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePreReleaseVersionsBuildsGetToManyRelatedResponse(rsp)
}

// ProfilesGetCollectionWithResponse request returning *ProfilesGetCollectionResponse
func (c *ClientWithResponses) ProfilesGetCollectionWithResponse(ctx context.Context, params *ProfilesGetCollectionParams, reqEditors ...RequestEditorFn) (*ProfilesGetCollectionResponse, error) {
	rsp, err := c.ProfilesGetCollection(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProfilesGetCollectionResponse(rsp)
}

// ProfilesCreateInstanceWithBodyWithResponse request with arbitrary body returning *ProfilesCreateInstanceResponse
func (c *ClientWithResponses) ProfilesCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProfilesCreateInstanceResponse, error) {
	rsp, err := c.ProfilesCreateInstanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProfilesCreateInstanceResponse(rsp)
}

func (c *ClientWithResponses) ProfilesCreateInstanceWithResponse(ctx context.Context, body ProfilesCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*ProfilesCreateInstanceResponse, error) {
	rsp, err := c.ProfilesCreateInstance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProfilesCreateInstanceResponse(rsp)
}

// ProfilesDeleteInstanceWithResponse request returning *ProfilesDeleteInstanceResponse
func (c *ClientWithResponses) ProfilesDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ProfilesDeleteInstanceResponse, error) {
	rsp, err := c.ProfilesDeleteInstance(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProfilesDeleteInstanceResponse(rsp)
}

// ProfilesGetInstanceWithResponse request returning *ProfilesGetInstanceResponse
func (c *ClientWithResponses) ProfilesGetInstanceWithResponse(ctx context.Context, id string, params *ProfilesGetInstanceParams, reqEditors ...RequestEditorFn) (*ProfilesGetInstanceResponse, error) {
	rsp, err := c.ProfilesGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProfilesGetInstanceResponse(rsp)
}

// ProfilesBundleIdGetToOneRelatedWithResponse request returning *ProfilesBundleIdGetToOneRelatedResponse
func (c *ClientWithResponses) ProfilesBundleIdGetToOneRelatedWithResponse(ctx context.Context, id string, params *ProfilesBundleIdGetToOneRelatedParams, reqEditors ...RequestEditorFn) (*ProfilesBundleIdGetToOneRelatedResponse, error) {
	rsp, err := c.ProfilesBundleIdGetToOneRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProfilesBundleIdGetToOneRelatedResponse(rsp)
}

// ProfilesCertificatesGetToManyRelatedWithResponse request returning *ProfilesCertificatesGetToManyRelatedResponse
func (c *ClientWithResponses) ProfilesCertificatesGetToManyRelatedWithResponse(ctx context.Context, id string, params *ProfilesCertificatesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*ProfilesCertificatesGetToManyRelatedResponse, error) {
	rsp, err := c.ProfilesCertificatesGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProfilesCertificatesGetToManyRelatedResponse(rsp)
}

// ProfilesDevicesGetToManyRelatedWithResponse request returning *ProfilesDevicesGetToManyRelatedResponse
func (c *ClientWithResponses) ProfilesDevicesGetToManyRelatedWithResponse(ctx context.Context, id string, params *ProfilesDevicesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*ProfilesDevicesGetToManyRelatedResponse, error) {
	rsp, err := c.ProfilesDevicesGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProfilesDevicesGetToManyRelatedResponse(rsp)
}

// RoutingAppCoveragesCreateInstanceWithBodyWithResponse request with arbitrary body returning *RoutingAppCoveragesCreateInstanceResponse
func (c *ClientWithResponses) RoutingAppCoveragesCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RoutingAppCoveragesCreateInstanceResponse, error) {
	rsp, err := c.RoutingAppCoveragesCreateInstanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRoutingAppCoveragesCreateInstanceResponse(rsp)
}

func (c *ClientWithResponses) RoutingAppCoveragesCreateInstanceWithResponse(ctx context.Context, body RoutingAppCoveragesCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*RoutingAppCoveragesCreateInstanceResponse, error) {
	rsp, err := c.RoutingAppCoveragesCreateInstance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRoutingAppCoveragesCreateInstanceResponse(rsp)
}

// RoutingAppCoveragesDeleteInstanceWithResponse request returning *RoutingAppCoveragesDeleteInstanceResponse
func (c *ClientWithResponses) RoutingAppCoveragesDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*RoutingAppCoveragesDeleteInstanceResponse, error) {
	rsp, err := c.RoutingAppCoveragesDeleteInstance(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRoutingAppCoveragesDeleteInstanceResponse(rsp)
}

// RoutingAppCoveragesGetInstanceWithResponse request returning *RoutingAppCoveragesGetInstanceResponse
func (c *ClientWithResponses) RoutingAppCoveragesGetInstanceWithResponse(ctx context.Context, id string, params *RoutingAppCoveragesGetInstanceParams, reqEditors ...RequestEditorFn) (*RoutingAppCoveragesGetInstanceResponse, error) {
	rsp, err := c.RoutingAppCoveragesGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRoutingAppCoveragesGetInstanceResponse(rsp)
}

// RoutingAppCoveragesUpdateInstanceWithBodyWithResponse request with arbitrary body returning *RoutingAppCoveragesUpdateInstanceResponse
func (c *ClientWithResponses) RoutingAppCoveragesUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RoutingAppCoveragesUpdateInstanceResponse, error) {
	rsp, err := c.RoutingAppCoveragesUpdateInstanceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRoutingAppCoveragesUpdateInstanceResponse(rsp)
}

func (c *ClientWithResponses) RoutingAppCoveragesUpdateInstanceWithResponse(ctx context.Context, id string, body RoutingAppCoveragesUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*RoutingAppCoveragesUpdateInstanceResponse, error) {
	rsp, err := c.RoutingAppCoveragesUpdateInstance(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRoutingAppCoveragesUpdateInstanceResponse(rsp)
}

// SalesReportsGetCollectionWithResponse request returning *SalesReportsGetCollectionResponse
func (c *ClientWithResponses) SalesReportsGetCollectionWithResponse(ctx context.Context, params *SalesReportsGetCollectionParams, reqEditors ...RequestEditorFn) (*SalesReportsGetCollectionResponse, error) {
	rsp, err := c.SalesReportsGetCollection(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSalesReportsGetCollectionResponse(rsp)
}

// ScmGitReferencesGetInstanceWithResponse request returning *ScmGitReferencesGetInstanceResponse
func (c *ClientWithResponses) ScmGitReferencesGetInstanceWithResponse(ctx context.Context, id string, params *ScmGitReferencesGetInstanceParams, reqEditors ...RequestEditorFn) (*ScmGitReferencesGetInstanceResponse, error) {
	rsp, err := c.ScmGitReferencesGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScmGitReferencesGetInstanceResponse(rsp)
}

// ScmProvidersGetCollectionWithResponse request returning *ScmProvidersGetCollectionResponse
func (c *ClientWithResponses) ScmProvidersGetCollectionWithResponse(ctx context.Context, params *ScmProvidersGetCollectionParams, reqEditors ...RequestEditorFn) (*ScmProvidersGetCollectionResponse, error) {
	rsp, err := c.ScmProvidersGetCollection(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScmProvidersGetCollectionResponse(rsp)
}

// ScmProvidersGetInstanceWithResponse request returning *ScmProvidersGetInstanceResponse
func (c *ClientWithResponses) ScmProvidersGetInstanceWithResponse(ctx context.Context, id string, params *ScmProvidersGetInstanceParams, reqEditors ...RequestEditorFn) (*ScmProvidersGetInstanceResponse, error) {
	rsp, err := c.ScmProvidersGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScmProvidersGetInstanceResponse(rsp)
}

// ScmProvidersRepositoriesGetToManyRelatedWithResponse request returning *ScmProvidersRepositoriesGetToManyRelatedResponse
func (c *ClientWithResponses) ScmProvidersRepositoriesGetToManyRelatedWithResponse(ctx context.Context, id string, params *ScmProvidersRepositoriesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*ScmProvidersRepositoriesGetToManyRelatedResponse, error) {
	rsp, err := c.ScmProvidersRepositoriesGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScmProvidersRepositoriesGetToManyRelatedResponse(rsp)
}

// ScmPullRequestsGetInstanceWithResponse request returning *ScmPullRequestsGetInstanceResponse
func (c *ClientWithResponses) ScmPullRequestsGetInstanceWithResponse(ctx context.Context, id string, params *ScmPullRequestsGetInstanceParams, reqEditors ...RequestEditorFn) (*ScmPullRequestsGetInstanceResponse, error) {
	rsp, err := c.ScmPullRequestsGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScmPullRequestsGetInstanceResponse(rsp)
}

// ScmRepositoriesGetCollectionWithResponse request returning *ScmRepositoriesGetCollectionResponse
func (c *ClientWithResponses) ScmRepositoriesGetCollectionWithResponse(ctx context.Context, params *ScmRepositoriesGetCollectionParams, reqEditors ...RequestEditorFn) (*ScmRepositoriesGetCollectionResponse, error) {
	rsp, err := c.ScmRepositoriesGetCollection(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScmRepositoriesGetCollectionResponse(rsp)
}

// ScmRepositoriesGetInstanceWithResponse request returning *ScmRepositoriesGetInstanceResponse
func (c *ClientWithResponses) ScmRepositoriesGetInstanceWithResponse(ctx context.Context, id string, params *ScmRepositoriesGetInstanceParams, reqEditors ...RequestEditorFn) (*ScmRepositoriesGetInstanceResponse, error) {
	rsp, err := c.ScmRepositoriesGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScmRepositoriesGetInstanceResponse(rsp)
}

// ScmRepositoriesGitReferencesGetToManyRelatedWithResponse request returning *ScmRepositoriesGitReferencesGetToManyRelatedResponse
func (c *ClientWithResponses) ScmRepositoriesGitReferencesGetToManyRelatedWithResponse(ctx context.Context, id string, params *ScmRepositoriesGitReferencesGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*ScmRepositoriesGitReferencesGetToManyRelatedResponse, error) {
	rsp, err := c.ScmRepositoriesGitReferencesGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScmRepositoriesGitReferencesGetToManyRelatedResponse(rsp)
}

// ScmRepositoriesPullRequestsGetToManyRelatedWithResponse request returning *ScmRepositoriesPullRequestsGetToManyRelatedResponse
func (c *ClientWithResponses) ScmRepositoriesPullRequestsGetToManyRelatedWithResponse(ctx context.Context, id string, params *ScmRepositoriesPullRequestsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*ScmRepositoriesPullRequestsGetToManyRelatedResponse, error) {
	rsp, err := c.ScmRepositoriesPullRequestsGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScmRepositoriesPullRequestsGetToManyRelatedResponse(rsp)
}

// TerritoriesGetCollectionWithResponse request returning *TerritoriesGetCollectionResponse
func (c *ClientWithResponses) TerritoriesGetCollectionWithResponse(ctx context.Context, params *TerritoriesGetCollectionParams, reqEditors ...RequestEditorFn) (*TerritoriesGetCollectionResponse, error) {
	rsp, err := c.TerritoriesGetCollection(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTerritoriesGetCollectionResponse(rsp)
}

// UserInvitationsGetCollectionWithResponse request returning *UserInvitationsGetCollectionResponse
func (c *ClientWithResponses) UserInvitationsGetCollectionWithResponse(ctx context.Context, params *UserInvitationsGetCollectionParams, reqEditors ...RequestEditorFn) (*UserInvitationsGetCollectionResponse, error) {
	rsp, err := c.UserInvitationsGetCollection(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserInvitationsGetCollectionResponse(rsp)
}

// UserInvitationsCreateInstanceWithBodyWithResponse request with arbitrary body returning *UserInvitationsCreateInstanceResponse
func (c *ClientWithResponses) UserInvitationsCreateInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserInvitationsCreateInstanceResponse, error) {
	rsp, err := c.UserInvitationsCreateInstanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserInvitationsCreateInstanceResponse(rsp)
}

func (c *ClientWithResponses) UserInvitationsCreateInstanceWithResponse(ctx context.Context, body UserInvitationsCreateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*UserInvitationsCreateInstanceResponse, error) {
	rsp, err := c.UserInvitationsCreateInstance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserInvitationsCreateInstanceResponse(rsp)
}

// UserInvitationsDeleteInstanceWithResponse request returning *UserInvitationsDeleteInstanceResponse
func (c *ClientWithResponses) UserInvitationsDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*UserInvitationsDeleteInstanceResponse, error) {
	rsp, err := c.UserInvitationsDeleteInstance(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserInvitationsDeleteInstanceResponse(rsp)
}

// UserInvitationsGetInstanceWithResponse request returning *UserInvitationsGetInstanceResponse
func (c *ClientWithResponses) UserInvitationsGetInstanceWithResponse(ctx context.Context, id string, params *UserInvitationsGetInstanceParams, reqEditors ...RequestEditorFn) (*UserInvitationsGetInstanceResponse, error) {
	rsp, err := c.UserInvitationsGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserInvitationsGetInstanceResponse(rsp)
}

// UserInvitationsVisibleAppsGetToManyRelatedWithResponse request returning *UserInvitationsVisibleAppsGetToManyRelatedResponse
func (c *ClientWithResponses) UserInvitationsVisibleAppsGetToManyRelatedWithResponse(ctx context.Context, id string, params *UserInvitationsVisibleAppsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*UserInvitationsVisibleAppsGetToManyRelatedResponse, error) {
	rsp, err := c.UserInvitationsVisibleAppsGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserInvitationsVisibleAppsGetToManyRelatedResponse(rsp)
}

// UsersGetCollectionWithResponse request returning *UsersGetCollectionResponse
func (c *ClientWithResponses) UsersGetCollectionWithResponse(ctx context.Context, params *UsersGetCollectionParams, reqEditors ...RequestEditorFn) (*UsersGetCollectionResponse, error) {
	rsp, err := c.UsersGetCollection(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersGetCollectionResponse(rsp)
}

// UsersDeleteInstanceWithResponse request returning *UsersDeleteInstanceResponse
func (c *ClientWithResponses) UsersDeleteInstanceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*UsersDeleteInstanceResponse, error) {
	rsp, err := c.UsersDeleteInstance(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersDeleteInstanceResponse(rsp)
}

// UsersGetInstanceWithResponse request returning *UsersGetInstanceResponse
func (c *ClientWithResponses) UsersGetInstanceWithResponse(ctx context.Context, id string, params *UsersGetInstanceParams, reqEditors ...RequestEditorFn) (*UsersGetInstanceResponse, error) {
	rsp, err := c.UsersGetInstance(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersGetInstanceResponse(rsp)
}

// UsersUpdateInstanceWithBodyWithResponse request with arbitrary body returning *UsersUpdateInstanceResponse
func (c *ClientWithResponses) UsersUpdateInstanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUpdateInstanceResponse, error) {
	rsp, err := c.UsersUpdateInstanceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUpdateInstanceResponse(rsp)
}

func (c *ClientWithResponses) UsersUpdateInstanceWithResponse(ctx context.Context, id string, body UsersUpdateInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUpdateInstanceResponse, error) {
	rsp, err := c.UsersUpdateInstance(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUpdateInstanceResponse(rsp)
}

// UsersVisibleAppsDeleteToManyRelationshipWithBodyWithResponse request with arbitrary body returning *UsersVisibleAppsDeleteToManyRelationshipResponse
func (c *ClientWithResponses) UsersVisibleAppsDeleteToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersVisibleAppsDeleteToManyRelationshipResponse, error) {
	rsp, err := c.UsersVisibleAppsDeleteToManyRelationshipWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersVisibleAppsDeleteToManyRelationshipResponse(rsp)
}

func (c *ClientWithResponses) UsersVisibleAppsDeleteToManyRelationshipWithResponse(ctx context.Context, id string, body UsersVisibleAppsDeleteToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersVisibleAppsDeleteToManyRelationshipResponse, error) {
	rsp, err := c.UsersVisibleAppsDeleteToManyRelationship(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersVisibleAppsDeleteToManyRelationshipResponse(rsp)
}

// UsersVisibleAppsGetToManyRelationshipWithResponse request returning *UsersVisibleAppsGetToManyRelationshipResponse
func (c *ClientWithResponses) UsersVisibleAppsGetToManyRelationshipWithResponse(ctx context.Context, id string, params *UsersVisibleAppsGetToManyRelationshipParams, reqEditors ...RequestEditorFn) (*UsersVisibleAppsGetToManyRelationshipResponse, error) {
	rsp, err := c.UsersVisibleAppsGetToManyRelationship(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersVisibleAppsGetToManyRelationshipResponse(rsp)
}

// UsersVisibleAppsReplaceToManyRelationshipWithBodyWithResponse request with arbitrary body returning *UsersVisibleAppsReplaceToManyRelationshipResponse
func (c *ClientWithResponses) UsersVisibleAppsReplaceToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersVisibleAppsReplaceToManyRelationshipResponse, error) {
	rsp, err := c.UsersVisibleAppsReplaceToManyRelationshipWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersVisibleAppsReplaceToManyRelationshipResponse(rsp)
}

func (c *ClientWithResponses) UsersVisibleAppsReplaceToManyRelationshipWithResponse(ctx context.Context, id string, body UsersVisibleAppsReplaceToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersVisibleAppsReplaceToManyRelationshipResponse, error) {
	rsp, err := c.UsersVisibleAppsReplaceToManyRelationship(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersVisibleAppsReplaceToManyRelationshipResponse(rsp)
}

// UsersVisibleAppsCreateToManyRelationshipWithBodyWithResponse request with arbitrary body returning *UsersVisibleAppsCreateToManyRelationshipResponse
func (c *ClientWithResponses) UsersVisibleAppsCreateToManyRelationshipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersVisibleAppsCreateToManyRelationshipResponse, error) {
	rsp, err := c.UsersVisibleAppsCreateToManyRelationshipWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersVisibleAppsCreateToManyRelationshipResponse(rsp)
}

func (c *ClientWithResponses) UsersVisibleAppsCreateToManyRelationshipWithResponse(ctx context.Context, id string, body UsersVisibleAppsCreateToManyRelationshipJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersVisibleAppsCreateToManyRelationshipResponse, error) {
	rsp, err := c.UsersVisibleAppsCreateToManyRelationship(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersVisibleAppsCreateToManyRelationshipResponse(rsp)
}

// UsersVisibleAppsGetToManyRelatedWithResponse request returning *UsersVisibleAppsGetToManyRelatedResponse
func (c *ClientWithResponses) UsersVisibleAppsGetToManyRelatedWithResponse(ctx context.Context, id string, params *UsersVisibleAppsGetToManyRelatedParams, reqEditors ...RequestEditorFn) (*UsersVisibleAppsGetToManyRelatedResponse, error) {
	rsp, err := c.UsersVisibleAppsGetToManyRelated(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersVisibleAppsGetToManyRelatedResponse(rsp)
}

// ParseAgeRatingDeclarationsUpdateInstanceResponse parses an HTTP response from a AgeRatingDeclarationsUpdateInstanceWithResponse call
func ParseAgeRatingDeclarationsUpdateInstanceResponse(rsp *http.Response) (*AgeRatingDeclarationsUpdateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgeRatingDeclarationsUpdateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AgeRatingDeclarationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAppCategoriesGetCollectionResponse parses an HTTP response from a AppCategoriesGetCollectionWithResponse call
func ParseAppCategoriesGetCollectionResponse(rsp *http.Response) (*AppCategoriesGetCollectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppCategoriesGetCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppCategoriesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseAppCategoriesGetInstanceResponse parses an HTTP response from a AppCategoriesGetInstanceWithResponse call
func ParseAppCategoriesGetInstanceResponse(rsp *http.Response) (*AppCategoriesGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppCategoriesGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppCategoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppCategoriesParentGetToOneRelatedResponse parses an HTTP response from a AppCategoriesParentGetToOneRelatedWithResponse call
func ParseAppCategoriesParentGetToOneRelatedResponse(rsp *http.Response) (*AppCategoriesParentGetToOneRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppCategoriesParentGetToOneRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppCategoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppCategoriesSubcategoriesGetToManyRelatedResponse parses an HTTP response from a AppCategoriesSubcategoriesGetToManyRelatedWithResponse call
func ParseAppCategoriesSubcategoriesGetToManyRelatedResponse(rsp *http.Response) (*AppCategoriesSubcategoriesGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppCategoriesSubcategoriesGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppCategoriesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppEncryptionDeclarationsGetCollectionResponse parses an HTTP response from a AppEncryptionDeclarationsGetCollectionWithResponse call
func ParseAppEncryptionDeclarationsGetCollectionResponse(rsp *http.Response) (*AppEncryptionDeclarationsGetCollectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppEncryptionDeclarationsGetCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppEncryptionDeclarationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseAppEncryptionDeclarationsGetInstanceResponse parses an HTTP response from a AppEncryptionDeclarationsGetInstanceWithResponse call
func ParseAppEncryptionDeclarationsGetInstanceResponse(rsp *http.Response) (*AppEncryptionDeclarationsGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppEncryptionDeclarationsGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppEncryptionDeclarationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppEncryptionDeclarationsAppGetToOneRelatedResponse parses an HTTP response from a AppEncryptionDeclarationsAppGetToOneRelatedWithResponse call
func ParseAppEncryptionDeclarationsAppGetToOneRelatedResponse(rsp *http.Response) (*AppEncryptionDeclarationsAppGetToOneRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppEncryptionDeclarationsAppGetToOneRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppEncryptionDeclarationsBuildsCreateToManyRelationshipResponse parses an HTTP response from a AppEncryptionDeclarationsBuildsCreateToManyRelationshipWithResponse call
func ParseAppEncryptionDeclarationsBuildsCreateToManyRelationshipResponse(rsp *http.Response) (*AppEncryptionDeclarationsBuildsCreateToManyRelationshipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppEncryptionDeclarationsBuildsCreateToManyRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAppInfoLocalizationsCreateInstanceResponse parses an HTTP response from a AppInfoLocalizationsCreateInstanceWithResponse call
func ParseAppInfoLocalizationsCreateInstanceResponse(rsp *http.Response) (*AppInfoLocalizationsCreateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppInfoLocalizationsCreateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AppInfoLocalizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAppInfoLocalizationsDeleteInstanceResponse parses an HTTP response from a AppInfoLocalizationsDeleteInstanceWithResponse call
func ParseAppInfoLocalizationsDeleteInstanceResponse(rsp *http.Response) (*AppInfoLocalizationsDeleteInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppInfoLocalizationsDeleteInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAppInfoLocalizationsGetInstanceResponse parses an HTTP response from a AppInfoLocalizationsGetInstanceWithResponse call
func ParseAppInfoLocalizationsGetInstanceResponse(rsp *http.Response) (*AppInfoLocalizationsGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppInfoLocalizationsGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppInfoLocalizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppInfoLocalizationsUpdateInstanceResponse parses an HTTP response from a AppInfoLocalizationsUpdateInstanceWithResponse call
func ParseAppInfoLocalizationsUpdateInstanceResponse(rsp *http.Response) (*AppInfoLocalizationsUpdateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppInfoLocalizationsUpdateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppInfoLocalizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAppInfosGetInstanceResponse parses an HTTP response from a AppInfosGetInstanceWithResponse call
func ParseAppInfosGetInstanceResponse(rsp *http.Response) (*AppInfosGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppInfosGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppInfosUpdateInstanceResponse parses an HTTP response from a AppInfosUpdateInstanceWithResponse call
func ParseAppInfosUpdateInstanceResponse(rsp *http.Response) (*AppInfosUpdateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppInfosUpdateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAppInfosAgeRatingDeclarationGetToOneRelatedResponse parses an HTTP response from a AppInfosAgeRatingDeclarationGetToOneRelatedWithResponse call
func ParseAppInfosAgeRatingDeclarationGetToOneRelatedResponse(rsp *http.Response) (*AppInfosAgeRatingDeclarationGetToOneRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppInfosAgeRatingDeclarationGetToOneRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AgeRatingDeclarationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppInfosAppInfoLocalizationsGetToManyRelatedResponse parses an HTTP response from a AppInfosAppInfoLocalizationsGetToManyRelatedWithResponse call
func ParseAppInfosAppInfoLocalizationsGetToManyRelatedResponse(rsp *http.Response) (*AppInfosAppInfoLocalizationsGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppInfosAppInfoLocalizationsGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppInfoLocalizationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppInfosPrimaryCategoryGetToOneRelatedResponse parses an HTTP response from a AppInfosPrimaryCategoryGetToOneRelatedWithResponse call
func ParseAppInfosPrimaryCategoryGetToOneRelatedResponse(rsp *http.Response) (*AppInfosPrimaryCategoryGetToOneRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppInfosPrimaryCategoryGetToOneRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppCategoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppInfosPrimarySubcategoryOneGetToOneRelatedResponse parses an HTTP response from a AppInfosPrimarySubcategoryOneGetToOneRelatedWithResponse call
func ParseAppInfosPrimarySubcategoryOneGetToOneRelatedResponse(rsp *http.Response) (*AppInfosPrimarySubcategoryOneGetToOneRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppInfosPrimarySubcategoryOneGetToOneRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppCategoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppInfosPrimarySubcategoryTwoGetToOneRelatedResponse parses an HTTP response from a AppInfosPrimarySubcategoryTwoGetToOneRelatedWithResponse call
func ParseAppInfosPrimarySubcategoryTwoGetToOneRelatedResponse(rsp *http.Response) (*AppInfosPrimarySubcategoryTwoGetToOneRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppInfosPrimarySubcategoryTwoGetToOneRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppCategoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppInfosSecondaryCategoryGetToOneRelatedResponse parses an HTTP response from a AppInfosSecondaryCategoryGetToOneRelatedWithResponse call
func ParseAppInfosSecondaryCategoryGetToOneRelatedResponse(rsp *http.Response) (*AppInfosSecondaryCategoryGetToOneRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppInfosSecondaryCategoryGetToOneRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppCategoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppInfosSecondarySubcategoryOneGetToOneRelatedResponse parses an HTTP response from a AppInfosSecondarySubcategoryOneGetToOneRelatedWithResponse call
func ParseAppInfosSecondarySubcategoryOneGetToOneRelatedResponse(rsp *http.Response) (*AppInfosSecondarySubcategoryOneGetToOneRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppInfosSecondarySubcategoryOneGetToOneRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppCategoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppInfosSecondarySubcategoryTwoGetToOneRelatedResponse parses an HTTP response from a AppInfosSecondarySubcategoryTwoGetToOneRelatedWithResponse call
func ParseAppInfosSecondarySubcategoryTwoGetToOneRelatedResponse(rsp *http.Response) (*AppInfosSecondarySubcategoryTwoGetToOneRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppInfosSecondarySubcategoryTwoGetToOneRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppCategoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppPreOrdersCreateInstanceResponse parses an HTTP response from a AppPreOrdersCreateInstanceWithResponse call
func ParseAppPreOrdersCreateInstanceResponse(rsp *http.Response) (*AppPreOrdersCreateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppPreOrdersCreateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AppPreOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAppPreOrdersDeleteInstanceResponse parses an HTTP response from a AppPreOrdersDeleteInstanceWithResponse call
func ParseAppPreOrdersDeleteInstanceResponse(rsp *http.Response) (*AppPreOrdersDeleteInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppPreOrdersDeleteInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAppPreOrdersGetInstanceResponse parses an HTTP response from a AppPreOrdersGetInstanceWithResponse call
func ParseAppPreOrdersGetInstanceResponse(rsp *http.Response) (*AppPreOrdersGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppPreOrdersGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppPreOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppPreOrdersUpdateInstanceResponse parses an HTTP response from a AppPreOrdersUpdateInstanceWithResponse call
func ParseAppPreOrdersUpdateInstanceResponse(rsp *http.Response) (*AppPreOrdersUpdateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppPreOrdersUpdateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppPreOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAppPreviewSetsCreateInstanceResponse parses an HTTP response from a AppPreviewSetsCreateInstanceWithResponse call
func ParseAppPreviewSetsCreateInstanceResponse(rsp *http.Response) (*AppPreviewSetsCreateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppPreviewSetsCreateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AppPreviewSetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAppPreviewSetsDeleteInstanceResponse parses an HTTP response from a AppPreviewSetsDeleteInstanceWithResponse call
func ParseAppPreviewSetsDeleteInstanceResponse(rsp *http.Response) (*AppPreviewSetsDeleteInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppPreviewSetsDeleteInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAppPreviewSetsGetInstanceResponse parses an HTTP response from a AppPreviewSetsGetInstanceWithResponse call
func ParseAppPreviewSetsGetInstanceResponse(rsp *http.Response) (*AppPreviewSetsGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppPreviewSetsGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppPreviewSetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppPreviewSetsAppPreviewsGetToManyRelatedResponse parses an HTTP response from a AppPreviewSetsAppPreviewsGetToManyRelatedWithResponse call
func ParseAppPreviewSetsAppPreviewsGetToManyRelatedResponse(rsp *http.Response) (*AppPreviewSetsAppPreviewsGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppPreviewSetsAppPreviewsGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppPreviewsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppPreviewSetsAppPreviewsGetToManyRelationshipResponse parses an HTTP response from a AppPreviewSetsAppPreviewsGetToManyRelationshipWithResponse call
func ParseAppPreviewSetsAppPreviewsGetToManyRelationshipResponse(rsp *http.Response) (*AppPreviewSetsAppPreviewsGetToManyRelationshipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppPreviewSetsAppPreviewsGetToManyRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppPreviewSetAppPreviewsLinkagesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppPreviewSetsAppPreviewsReplaceToManyRelationshipResponse parses an HTTP response from a AppPreviewSetsAppPreviewsReplaceToManyRelationshipWithResponse call
func ParseAppPreviewSetsAppPreviewsReplaceToManyRelationshipResponse(rsp *http.Response) (*AppPreviewSetsAppPreviewsReplaceToManyRelationshipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppPreviewSetsAppPreviewsReplaceToManyRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAppPreviewsCreateInstanceResponse parses an HTTP response from a AppPreviewsCreateInstanceWithResponse call
func ParseAppPreviewsCreateInstanceResponse(rsp *http.Response) (*AppPreviewsCreateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppPreviewsCreateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AppPreviewResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAppPreviewsDeleteInstanceResponse parses an HTTP response from a AppPreviewsDeleteInstanceWithResponse call
func ParseAppPreviewsDeleteInstanceResponse(rsp *http.Response) (*AppPreviewsDeleteInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppPreviewsDeleteInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAppPreviewsGetInstanceResponse parses an HTTP response from a AppPreviewsGetInstanceWithResponse call
func ParseAppPreviewsGetInstanceResponse(rsp *http.Response) (*AppPreviewsGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppPreviewsGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppPreviewResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppPreviewsUpdateInstanceResponse parses an HTTP response from a AppPreviewsUpdateInstanceWithResponse call
func ParseAppPreviewsUpdateInstanceResponse(rsp *http.Response) (*AppPreviewsUpdateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppPreviewsUpdateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppPreviewResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAppPricePointsGetCollectionResponse parses an HTTP response from a AppPricePointsGetCollectionWithResponse call
func ParseAppPricePointsGetCollectionResponse(rsp *http.Response) (*AppPricePointsGetCollectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppPricePointsGetCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppPricePointsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseAppPricePointsGetInstanceResponse parses an HTTP response from a AppPricePointsGetInstanceWithResponse call
func ParseAppPricePointsGetInstanceResponse(rsp *http.Response) (*AppPricePointsGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppPricePointsGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppPricePointResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppPricePointsTerritoryGetToOneRelatedResponse parses an HTTP response from a AppPricePointsTerritoryGetToOneRelatedWithResponse call
func ParseAppPricePointsTerritoryGetToOneRelatedResponse(rsp *http.Response) (*AppPricePointsTerritoryGetToOneRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppPricePointsTerritoryGetToOneRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TerritoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppPriceTiersGetCollectionResponse parses an HTTP response from a AppPriceTiersGetCollectionWithResponse call
func ParseAppPriceTiersGetCollectionResponse(rsp *http.Response) (*AppPriceTiersGetCollectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppPriceTiersGetCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppPriceTiersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseAppPriceTiersGetInstanceResponse parses an HTTP response from a AppPriceTiersGetInstanceWithResponse call
func ParseAppPriceTiersGetInstanceResponse(rsp *http.Response) (*AppPriceTiersGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppPriceTiersGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppPriceTierResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppPriceTiersPricePointsGetToManyRelatedResponse parses an HTTP response from a AppPriceTiersPricePointsGetToManyRelatedWithResponse call
func ParseAppPriceTiersPricePointsGetToManyRelatedResponse(rsp *http.Response) (*AppPriceTiersPricePointsGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppPriceTiersPricePointsGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppPricePointsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppPricesGetInstanceResponse parses an HTTP response from a AppPricesGetInstanceWithResponse call
func ParseAppPricesGetInstanceResponse(rsp *http.Response) (*AppPricesGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppPricesGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppPriceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppScreenshotSetsCreateInstanceResponse parses an HTTP response from a AppScreenshotSetsCreateInstanceWithResponse call
func ParseAppScreenshotSetsCreateInstanceResponse(rsp *http.Response) (*AppScreenshotSetsCreateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppScreenshotSetsCreateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AppScreenshotSetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAppScreenshotSetsDeleteInstanceResponse parses an HTTP response from a AppScreenshotSetsDeleteInstanceWithResponse call
func ParseAppScreenshotSetsDeleteInstanceResponse(rsp *http.Response) (*AppScreenshotSetsDeleteInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppScreenshotSetsDeleteInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAppScreenshotSetsGetInstanceResponse parses an HTTP response from a AppScreenshotSetsGetInstanceWithResponse call
func ParseAppScreenshotSetsGetInstanceResponse(rsp *http.Response) (*AppScreenshotSetsGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppScreenshotSetsGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppScreenshotSetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppScreenshotSetsAppScreenshotsGetToManyRelatedResponse parses an HTTP response from a AppScreenshotSetsAppScreenshotsGetToManyRelatedWithResponse call
func ParseAppScreenshotSetsAppScreenshotsGetToManyRelatedResponse(rsp *http.Response) (*AppScreenshotSetsAppScreenshotsGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppScreenshotSetsAppScreenshotsGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppScreenshotsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppScreenshotSetsAppScreenshotsGetToManyRelationshipResponse parses an HTTP response from a AppScreenshotSetsAppScreenshotsGetToManyRelationshipWithResponse call
func ParseAppScreenshotSetsAppScreenshotsGetToManyRelationshipResponse(rsp *http.Response) (*AppScreenshotSetsAppScreenshotsGetToManyRelationshipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppScreenshotSetsAppScreenshotsGetToManyRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppScreenshotSetAppScreenshotsLinkagesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppScreenshotSetsAppScreenshotsReplaceToManyRelationshipResponse parses an HTTP response from a AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipWithResponse call
func ParseAppScreenshotSetsAppScreenshotsReplaceToManyRelationshipResponse(rsp *http.Response) (*AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAppScreenshotsCreateInstanceResponse parses an HTTP response from a AppScreenshotsCreateInstanceWithResponse call
func ParseAppScreenshotsCreateInstanceResponse(rsp *http.Response) (*AppScreenshotsCreateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppScreenshotsCreateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AppScreenshotResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAppScreenshotsDeleteInstanceResponse parses an HTTP response from a AppScreenshotsDeleteInstanceWithResponse call
func ParseAppScreenshotsDeleteInstanceResponse(rsp *http.Response) (*AppScreenshotsDeleteInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppScreenshotsDeleteInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAppScreenshotsGetInstanceResponse parses an HTTP response from a AppScreenshotsGetInstanceWithResponse call
func ParseAppScreenshotsGetInstanceResponse(rsp *http.Response) (*AppScreenshotsGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppScreenshotsGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppScreenshotResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppScreenshotsUpdateInstanceResponse parses an HTTP response from a AppScreenshotsUpdateInstanceWithResponse call
func ParseAppScreenshotsUpdateInstanceResponse(rsp *http.Response) (*AppScreenshotsUpdateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppScreenshotsUpdateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppScreenshotResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAppStoreReviewAttachmentsCreateInstanceResponse parses an HTTP response from a AppStoreReviewAttachmentsCreateInstanceWithResponse call
func ParseAppStoreReviewAttachmentsCreateInstanceResponse(rsp *http.Response) (*AppStoreReviewAttachmentsCreateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppStoreReviewAttachmentsCreateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AppStoreReviewAttachmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAppStoreReviewAttachmentsDeleteInstanceResponse parses an HTTP response from a AppStoreReviewAttachmentsDeleteInstanceWithResponse call
func ParseAppStoreReviewAttachmentsDeleteInstanceResponse(rsp *http.Response) (*AppStoreReviewAttachmentsDeleteInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppStoreReviewAttachmentsDeleteInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAppStoreReviewAttachmentsGetInstanceResponse parses an HTTP response from a AppStoreReviewAttachmentsGetInstanceWithResponse call
func ParseAppStoreReviewAttachmentsGetInstanceResponse(rsp *http.Response) (*AppStoreReviewAttachmentsGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppStoreReviewAttachmentsGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppStoreReviewAttachmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppStoreReviewAttachmentsUpdateInstanceResponse parses an HTTP response from a AppStoreReviewAttachmentsUpdateInstanceWithResponse call
func ParseAppStoreReviewAttachmentsUpdateInstanceResponse(rsp *http.Response) (*AppStoreReviewAttachmentsUpdateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppStoreReviewAttachmentsUpdateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppStoreReviewAttachmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAppStoreReviewDetailsCreateInstanceResponse parses an HTTP response from a AppStoreReviewDetailsCreateInstanceWithResponse call
func ParseAppStoreReviewDetailsCreateInstanceResponse(rsp *http.Response) (*AppStoreReviewDetailsCreateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppStoreReviewDetailsCreateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AppStoreReviewDetailResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAppStoreReviewDetailsGetInstanceResponse parses an HTTP response from a AppStoreReviewDetailsGetInstanceWithResponse call
func ParseAppStoreReviewDetailsGetInstanceResponse(rsp *http.Response) (*AppStoreReviewDetailsGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppStoreReviewDetailsGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppStoreReviewDetailResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppStoreReviewDetailsUpdateInstanceResponse parses an HTTP response from a AppStoreReviewDetailsUpdateInstanceWithResponse call
func ParseAppStoreReviewDetailsUpdateInstanceResponse(rsp *http.Response) (*AppStoreReviewDetailsUpdateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppStoreReviewDetailsUpdateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppStoreReviewDetailResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedResponse parses an HTTP response from a AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedWithResponse call
func ParseAppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedResponse(rsp *http.Response) (*AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppStoreReviewAttachmentsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppStoreVersionLocalizationsCreateInstanceResponse parses an HTTP response from a AppStoreVersionLocalizationsCreateInstanceWithResponse call
func ParseAppStoreVersionLocalizationsCreateInstanceResponse(rsp *http.Response) (*AppStoreVersionLocalizationsCreateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppStoreVersionLocalizationsCreateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AppStoreVersionLocalizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAppStoreVersionLocalizationsDeleteInstanceResponse parses an HTTP response from a AppStoreVersionLocalizationsDeleteInstanceWithResponse call
func ParseAppStoreVersionLocalizationsDeleteInstanceResponse(rsp *http.Response) (*AppStoreVersionLocalizationsDeleteInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppStoreVersionLocalizationsDeleteInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAppStoreVersionLocalizationsGetInstanceResponse parses an HTTP response from a AppStoreVersionLocalizationsGetInstanceWithResponse call
func ParseAppStoreVersionLocalizationsGetInstanceResponse(rsp *http.Response) (*AppStoreVersionLocalizationsGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppStoreVersionLocalizationsGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppStoreVersionLocalizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppStoreVersionLocalizationsUpdateInstanceResponse parses an HTTP response from a AppStoreVersionLocalizationsUpdateInstanceWithResponse call
func ParseAppStoreVersionLocalizationsUpdateInstanceResponse(rsp *http.Response) (*AppStoreVersionLocalizationsUpdateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppStoreVersionLocalizationsUpdateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppStoreVersionLocalizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedResponse parses an HTTP response from a AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedWithResponse call
func ParseAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedResponse(rsp *http.Response) (*AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppPreviewSetsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedResponse parses an HTTP response from a AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedWithResponse call
func ParseAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedResponse(rsp *http.Response) (*AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppScreenshotSetsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppStoreVersionPhasedReleasesCreateInstanceResponse parses an HTTP response from a AppStoreVersionPhasedReleasesCreateInstanceWithResponse call
func ParseAppStoreVersionPhasedReleasesCreateInstanceResponse(rsp *http.Response) (*AppStoreVersionPhasedReleasesCreateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppStoreVersionPhasedReleasesCreateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AppStoreVersionPhasedReleaseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAppStoreVersionPhasedReleasesDeleteInstanceResponse parses an HTTP response from a AppStoreVersionPhasedReleasesDeleteInstanceWithResponse call
func ParseAppStoreVersionPhasedReleasesDeleteInstanceResponse(rsp *http.Response) (*AppStoreVersionPhasedReleasesDeleteInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppStoreVersionPhasedReleasesDeleteInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAppStoreVersionPhasedReleasesUpdateInstanceResponse parses an HTTP response from a AppStoreVersionPhasedReleasesUpdateInstanceWithResponse call
func ParseAppStoreVersionPhasedReleasesUpdateInstanceResponse(rsp *http.Response) (*AppStoreVersionPhasedReleasesUpdateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppStoreVersionPhasedReleasesUpdateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppStoreVersionPhasedReleaseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAppStoreVersionReleaseRequestsCreateInstanceResponse parses an HTTP response from a AppStoreVersionReleaseRequestsCreateInstanceWithResponse call
func ParseAppStoreVersionReleaseRequestsCreateInstanceResponse(rsp *http.Response) (*AppStoreVersionReleaseRequestsCreateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppStoreVersionReleaseRequestsCreateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AppStoreVersionReleaseRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAppStoreVersionSubmissionsCreateInstanceResponse parses an HTTP response from a AppStoreVersionSubmissionsCreateInstanceWithResponse call
func ParseAppStoreVersionSubmissionsCreateInstanceResponse(rsp *http.Response) (*AppStoreVersionSubmissionsCreateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppStoreVersionSubmissionsCreateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AppStoreVersionSubmissionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAppStoreVersionSubmissionsDeleteInstanceResponse parses an HTTP response from a AppStoreVersionSubmissionsDeleteInstanceWithResponse call
func ParseAppStoreVersionSubmissionsDeleteInstanceResponse(rsp *http.Response) (*AppStoreVersionSubmissionsDeleteInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppStoreVersionSubmissionsDeleteInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAppStoreVersionsCreateInstanceResponse parses an HTTP response from a AppStoreVersionsCreateInstanceWithResponse call
func ParseAppStoreVersionsCreateInstanceResponse(rsp *http.Response) (*AppStoreVersionsCreateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppStoreVersionsCreateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AppStoreVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAppStoreVersionsDeleteInstanceResponse parses an HTTP response from a AppStoreVersionsDeleteInstanceWithResponse call
func ParseAppStoreVersionsDeleteInstanceResponse(rsp *http.Response) (*AppStoreVersionsDeleteInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppStoreVersionsDeleteInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAppStoreVersionsGetInstanceResponse parses an HTTP response from a AppStoreVersionsGetInstanceWithResponse call
func ParseAppStoreVersionsGetInstanceResponse(rsp *http.Response) (*AppStoreVersionsGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppStoreVersionsGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppStoreVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppStoreVersionsUpdateInstanceResponse parses an HTTP response from a AppStoreVersionsUpdateInstanceWithResponse call
func ParseAppStoreVersionsUpdateInstanceResponse(rsp *http.Response) (*AppStoreVersionsUpdateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppStoreVersionsUpdateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppStoreVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAppStoreVersionsAgeRatingDeclarationGetToOneRelatedResponse parses an HTTP response from a AppStoreVersionsAgeRatingDeclarationGetToOneRelatedWithResponse call
func ParseAppStoreVersionsAgeRatingDeclarationGetToOneRelatedResponse(rsp *http.Response) (*AppStoreVersionsAgeRatingDeclarationGetToOneRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppStoreVersionsAgeRatingDeclarationGetToOneRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AgeRatingDeclarationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppStoreVersionsAppStoreReviewDetailGetToOneRelatedResponse parses an HTTP response from a AppStoreVersionsAppStoreReviewDetailGetToOneRelatedWithResponse call
func ParseAppStoreVersionsAppStoreReviewDetailGetToOneRelatedResponse(rsp *http.Response) (*AppStoreVersionsAppStoreReviewDetailGetToOneRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppStoreVersionsAppStoreReviewDetailGetToOneRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppStoreReviewDetailResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedResponse parses an HTTP response from a AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedWithResponse call
func ParseAppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedResponse(rsp *http.Response) (*AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppStoreVersionLocalizationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedResponse parses an HTTP response from a AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedWithResponse call
func ParseAppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedResponse(rsp *http.Response) (*AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppStoreVersionPhasedReleaseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedResponse parses an HTTP response from a AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedWithResponse call
func ParseAppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedResponse(rsp *http.Response) (*AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppStoreVersionSubmissionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppStoreVersionsBuildGetToOneRelatedResponse parses an HTTP response from a AppStoreVersionsBuildGetToOneRelatedWithResponse call
func ParseAppStoreVersionsBuildGetToOneRelatedResponse(rsp *http.Response) (*AppStoreVersionsBuildGetToOneRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppStoreVersionsBuildGetToOneRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BuildResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppStoreVersionsIdfaDeclarationGetToOneRelatedResponse parses an HTTP response from a AppStoreVersionsIdfaDeclarationGetToOneRelatedWithResponse call
func ParseAppStoreVersionsIdfaDeclarationGetToOneRelatedResponse(rsp *http.Response) (*AppStoreVersionsIdfaDeclarationGetToOneRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppStoreVersionsIdfaDeclarationGetToOneRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IdfaDeclarationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppStoreVersionsBuildGetToOneRelationshipResponse parses an HTTP response from a AppStoreVersionsBuildGetToOneRelationshipWithResponse call
func ParseAppStoreVersionsBuildGetToOneRelationshipResponse(rsp *http.Response) (*AppStoreVersionsBuildGetToOneRelationshipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppStoreVersionsBuildGetToOneRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppStoreVersionBuildLinkageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppStoreVersionsBuildUpdateToOneRelationshipResponse parses an HTTP response from a AppStoreVersionsBuildUpdateToOneRelationshipWithResponse call
func ParseAppStoreVersionsBuildUpdateToOneRelationshipResponse(rsp *http.Response) (*AppStoreVersionsBuildUpdateToOneRelationshipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppStoreVersionsBuildUpdateToOneRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAppStoreVersionsRoutingAppCoverageGetToOneRelatedResponse parses an HTTP response from a AppStoreVersionsRoutingAppCoverageGetToOneRelatedWithResponse call
func ParseAppStoreVersionsRoutingAppCoverageGetToOneRelatedResponse(rsp *http.Response) (*AppStoreVersionsRoutingAppCoverageGetToOneRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppStoreVersionsRoutingAppCoverageGetToOneRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoutingAppCoverageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppsGetCollectionResponse parses an HTTP response from a AppsGetCollectionWithResponse call
func ParseAppsGetCollectionResponse(rsp *http.Response) (*AppsGetCollectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppsGetCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseAppsGetInstanceResponse parses an HTTP response from a AppsGetInstanceWithResponse call
func ParseAppsGetInstanceResponse(rsp *http.Response) (*AppsGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppsGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppsUpdateInstanceResponse parses an HTTP response from a AppsUpdateInstanceWithResponse call
func ParseAppsUpdateInstanceResponse(rsp *http.Response) (*AppsUpdateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppsUpdateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAppsAppInfosGetToManyRelatedResponse parses an HTTP response from a AppsAppInfosGetToManyRelatedWithResponse call
func ParseAppsAppInfosGetToManyRelatedResponse(rsp *http.Response) (*AppsAppInfosGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppsAppInfosGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppInfosResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppsAppStoreVersionsGetToManyRelatedResponse parses an HTTP response from a AppsAppStoreVersionsGetToManyRelatedWithResponse call
func ParseAppsAppStoreVersionsGetToManyRelatedResponse(rsp *http.Response) (*AppsAppStoreVersionsGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppsAppStoreVersionsGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppStoreVersionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppsAvailableTerritoriesGetToManyRelatedResponse parses an HTTP response from a AppsAvailableTerritoriesGetToManyRelatedWithResponse call
func ParseAppsAvailableTerritoriesGetToManyRelatedResponse(rsp *http.Response) (*AppsAvailableTerritoriesGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppsAvailableTerritoriesGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TerritoriesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppsBetaAppLocalizationsGetToManyRelatedResponse parses an HTTP response from a AppsBetaAppLocalizationsGetToManyRelatedWithResponse call
func ParseAppsBetaAppLocalizationsGetToManyRelatedResponse(rsp *http.Response) (*AppsBetaAppLocalizationsGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppsBetaAppLocalizationsGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BetaAppLocalizationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppsBetaAppReviewDetailGetToOneRelatedResponse parses an HTTP response from a AppsBetaAppReviewDetailGetToOneRelatedWithResponse call
func ParseAppsBetaAppReviewDetailGetToOneRelatedResponse(rsp *http.Response) (*AppsBetaAppReviewDetailGetToOneRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppsBetaAppReviewDetailGetToOneRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BetaAppReviewDetailResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppsBetaGroupsGetToManyRelatedResponse parses an HTTP response from a AppsBetaGroupsGetToManyRelatedWithResponse call
func ParseAppsBetaGroupsGetToManyRelatedResponse(rsp *http.Response) (*AppsBetaGroupsGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppsBetaGroupsGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BetaGroupsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppsBetaLicenseAgreementGetToOneRelatedResponse parses an HTTP response from a AppsBetaLicenseAgreementGetToOneRelatedWithResponse call
func ParseAppsBetaLicenseAgreementGetToOneRelatedResponse(rsp *http.Response) (*AppsBetaLicenseAgreementGetToOneRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppsBetaLicenseAgreementGetToOneRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BetaLicenseAgreementResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppsBuildsGetToManyRelatedResponse parses an HTTP response from a AppsBuildsGetToManyRelatedWithResponse call
func ParseAppsBuildsGetToManyRelatedResponse(rsp *http.Response) (*AppsBuildsGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppsBuildsGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BuildsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppsCiProductGetToOneRelatedResponse parses an HTTP response from a AppsCiProductGetToOneRelatedWithResponse call
func ParseAppsCiProductGetToOneRelatedResponse(rsp *http.Response) (*AppsCiProductGetToOneRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppsCiProductGetToOneRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CiProductResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppsEndUserLicenseAgreementGetToOneRelatedResponse parses an HTTP response from a AppsEndUserLicenseAgreementGetToOneRelatedWithResponse call
func ParseAppsEndUserLicenseAgreementGetToOneRelatedResponse(rsp *http.Response) (*AppsEndUserLicenseAgreementGetToOneRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppsEndUserLicenseAgreementGetToOneRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EndUserLicenseAgreementResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppsGameCenterEnabledVersionsGetToManyRelatedResponse parses an HTTP response from a AppsGameCenterEnabledVersionsGetToManyRelatedWithResponse call
func ParseAppsGameCenterEnabledVersionsGetToManyRelatedResponse(rsp *http.Response) (*AppsGameCenterEnabledVersionsGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppsGameCenterEnabledVersionsGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GameCenterEnabledVersionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppsInAppPurchasesGetToManyRelatedResponse parses an HTTP response from a AppsInAppPurchasesGetToManyRelatedWithResponse call
func ParseAppsInAppPurchasesGetToManyRelatedResponse(rsp *http.Response) (*AppsInAppPurchasesGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppsInAppPurchasesGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InAppPurchasesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppsPerfPowerMetricsGetToManyRelatedResponse parses an HTTP response from a AppsPerfPowerMetricsGetToManyRelatedWithResponse call
func ParseAppsPerfPowerMetricsGetToManyRelatedResponse(rsp *http.Response) (*AppsPerfPowerMetricsGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppsPerfPowerMetricsGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PerfPowerMetricsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppsPreOrderGetToOneRelatedResponse parses an HTTP response from a AppsPreOrderGetToOneRelatedWithResponse call
func ParseAppsPreOrderGetToOneRelatedResponse(rsp *http.Response) (*AppsPreOrderGetToOneRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppsPreOrderGetToOneRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppPreOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppsPreReleaseVersionsGetToManyRelatedResponse parses an HTTP response from a AppsPreReleaseVersionsGetToManyRelatedWithResponse call
func ParseAppsPreReleaseVersionsGetToManyRelatedResponse(rsp *http.Response) (*AppsPreReleaseVersionsGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppsPreReleaseVersionsGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PreReleaseVersionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppsPricesGetToManyRelatedResponse parses an HTTP response from a AppsPricesGetToManyRelatedWithResponse call
func ParseAppsPricesGetToManyRelatedResponse(rsp *http.Response) (*AppsPricesGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppsPricesGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppPricesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAppsBetaTestersDeleteToManyRelationshipResponse parses an HTTP response from a AppsBetaTestersDeleteToManyRelationshipWithResponse call
func ParseAppsBetaTestersDeleteToManyRelationshipResponse(rsp *http.Response) (*AppsBetaTestersDeleteToManyRelationshipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppsBetaTestersDeleteToManyRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseBetaAppLocalizationsGetCollectionResponse parses an HTTP response from a BetaAppLocalizationsGetCollectionWithResponse call
func ParseBetaAppLocalizationsGetCollectionResponse(rsp *http.Response) (*BetaAppLocalizationsGetCollectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaAppLocalizationsGetCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BetaAppLocalizationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseBetaAppLocalizationsCreateInstanceResponse parses an HTTP response from a BetaAppLocalizationsCreateInstanceWithResponse call
func ParseBetaAppLocalizationsCreateInstanceResponse(rsp *http.Response) (*BetaAppLocalizationsCreateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaAppLocalizationsCreateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BetaAppLocalizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseBetaAppLocalizationsDeleteInstanceResponse parses an HTTP response from a BetaAppLocalizationsDeleteInstanceWithResponse call
func ParseBetaAppLocalizationsDeleteInstanceResponse(rsp *http.Response) (*BetaAppLocalizationsDeleteInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaAppLocalizationsDeleteInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseBetaAppLocalizationsGetInstanceResponse parses an HTTP response from a BetaAppLocalizationsGetInstanceWithResponse call
func ParseBetaAppLocalizationsGetInstanceResponse(rsp *http.Response) (*BetaAppLocalizationsGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaAppLocalizationsGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BetaAppLocalizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBetaAppLocalizationsUpdateInstanceResponse parses an HTTP response from a BetaAppLocalizationsUpdateInstanceWithResponse call
func ParseBetaAppLocalizationsUpdateInstanceResponse(rsp *http.Response) (*BetaAppLocalizationsUpdateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaAppLocalizationsUpdateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BetaAppLocalizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseBetaAppLocalizationsAppGetToOneRelatedResponse parses an HTTP response from a BetaAppLocalizationsAppGetToOneRelatedWithResponse call
func ParseBetaAppLocalizationsAppGetToOneRelatedResponse(rsp *http.Response) (*BetaAppLocalizationsAppGetToOneRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaAppLocalizationsAppGetToOneRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBetaAppReviewDetailsGetCollectionResponse parses an HTTP response from a BetaAppReviewDetailsGetCollectionWithResponse call
func ParseBetaAppReviewDetailsGetCollectionResponse(rsp *http.Response) (*BetaAppReviewDetailsGetCollectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaAppReviewDetailsGetCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BetaAppReviewDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseBetaAppReviewDetailsGetInstanceResponse parses an HTTP response from a BetaAppReviewDetailsGetInstanceWithResponse call
func ParseBetaAppReviewDetailsGetInstanceResponse(rsp *http.Response) (*BetaAppReviewDetailsGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaAppReviewDetailsGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BetaAppReviewDetailResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBetaAppReviewDetailsUpdateInstanceResponse parses an HTTP response from a BetaAppReviewDetailsUpdateInstanceWithResponse call
func ParseBetaAppReviewDetailsUpdateInstanceResponse(rsp *http.Response) (*BetaAppReviewDetailsUpdateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaAppReviewDetailsUpdateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BetaAppReviewDetailResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseBetaAppReviewDetailsAppGetToOneRelatedResponse parses an HTTP response from a BetaAppReviewDetailsAppGetToOneRelatedWithResponse call
func ParseBetaAppReviewDetailsAppGetToOneRelatedResponse(rsp *http.Response) (*BetaAppReviewDetailsAppGetToOneRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaAppReviewDetailsAppGetToOneRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBetaAppReviewSubmissionsGetCollectionResponse parses an HTTP response from a BetaAppReviewSubmissionsGetCollectionWithResponse call
func ParseBetaAppReviewSubmissionsGetCollectionResponse(rsp *http.Response) (*BetaAppReviewSubmissionsGetCollectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaAppReviewSubmissionsGetCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BetaAppReviewSubmissionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseBetaAppReviewSubmissionsCreateInstanceResponse parses an HTTP response from a BetaAppReviewSubmissionsCreateInstanceWithResponse call
func ParseBetaAppReviewSubmissionsCreateInstanceResponse(rsp *http.Response) (*BetaAppReviewSubmissionsCreateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaAppReviewSubmissionsCreateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BetaAppReviewSubmissionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseBetaAppReviewSubmissionsGetInstanceResponse parses an HTTP response from a BetaAppReviewSubmissionsGetInstanceWithResponse call
func ParseBetaAppReviewSubmissionsGetInstanceResponse(rsp *http.Response) (*BetaAppReviewSubmissionsGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaAppReviewSubmissionsGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BetaAppReviewSubmissionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBetaAppReviewSubmissionsBuildGetToOneRelatedResponse parses an HTTP response from a BetaAppReviewSubmissionsBuildGetToOneRelatedWithResponse call
func ParseBetaAppReviewSubmissionsBuildGetToOneRelatedResponse(rsp *http.Response) (*BetaAppReviewSubmissionsBuildGetToOneRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaAppReviewSubmissionsBuildGetToOneRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BuildResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBetaBuildLocalizationsGetCollectionResponse parses an HTTP response from a BetaBuildLocalizationsGetCollectionWithResponse call
func ParseBetaBuildLocalizationsGetCollectionResponse(rsp *http.Response) (*BetaBuildLocalizationsGetCollectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaBuildLocalizationsGetCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BetaBuildLocalizationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseBetaBuildLocalizationsCreateInstanceResponse parses an HTTP response from a BetaBuildLocalizationsCreateInstanceWithResponse call
func ParseBetaBuildLocalizationsCreateInstanceResponse(rsp *http.Response) (*BetaBuildLocalizationsCreateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaBuildLocalizationsCreateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BetaBuildLocalizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseBetaBuildLocalizationsDeleteInstanceResponse parses an HTTP response from a BetaBuildLocalizationsDeleteInstanceWithResponse call
func ParseBetaBuildLocalizationsDeleteInstanceResponse(rsp *http.Response) (*BetaBuildLocalizationsDeleteInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaBuildLocalizationsDeleteInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseBetaBuildLocalizationsGetInstanceResponse parses an HTTP response from a BetaBuildLocalizationsGetInstanceWithResponse call
func ParseBetaBuildLocalizationsGetInstanceResponse(rsp *http.Response) (*BetaBuildLocalizationsGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaBuildLocalizationsGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BetaBuildLocalizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBetaBuildLocalizationsUpdateInstanceResponse parses an HTTP response from a BetaBuildLocalizationsUpdateInstanceWithResponse call
func ParseBetaBuildLocalizationsUpdateInstanceResponse(rsp *http.Response) (*BetaBuildLocalizationsUpdateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaBuildLocalizationsUpdateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BetaBuildLocalizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseBetaBuildLocalizationsBuildGetToOneRelatedResponse parses an HTTP response from a BetaBuildLocalizationsBuildGetToOneRelatedWithResponse call
func ParseBetaBuildLocalizationsBuildGetToOneRelatedResponse(rsp *http.Response) (*BetaBuildLocalizationsBuildGetToOneRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaBuildLocalizationsBuildGetToOneRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BuildResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBetaGroupsGetCollectionResponse parses an HTTP response from a BetaGroupsGetCollectionWithResponse call
func ParseBetaGroupsGetCollectionResponse(rsp *http.Response) (*BetaGroupsGetCollectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaGroupsGetCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BetaGroupsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseBetaGroupsCreateInstanceResponse parses an HTTP response from a BetaGroupsCreateInstanceWithResponse call
func ParseBetaGroupsCreateInstanceResponse(rsp *http.Response) (*BetaGroupsCreateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaGroupsCreateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BetaGroupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseBetaGroupsDeleteInstanceResponse parses an HTTP response from a BetaGroupsDeleteInstanceWithResponse call
func ParseBetaGroupsDeleteInstanceResponse(rsp *http.Response) (*BetaGroupsDeleteInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaGroupsDeleteInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseBetaGroupsGetInstanceResponse parses an HTTP response from a BetaGroupsGetInstanceWithResponse call
func ParseBetaGroupsGetInstanceResponse(rsp *http.Response) (*BetaGroupsGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaGroupsGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BetaGroupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBetaGroupsUpdateInstanceResponse parses an HTTP response from a BetaGroupsUpdateInstanceWithResponse call
func ParseBetaGroupsUpdateInstanceResponse(rsp *http.Response) (*BetaGroupsUpdateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaGroupsUpdateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BetaGroupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseBetaGroupsAppGetToOneRelatedResponse parses an HTTP response from a BetaGroupsAppGetToOneRelatedWithResponse call
func ParseBetaGroupsAppGetToOneRelatedResponse(rsp *http.Response) (*BetaGroupsAppGetToOneRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaGroupsAppGetToOneRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBetaGroupsBetaTestersGetToManyRelatedResponse parses an HTTP response from a BetaGroupsBetaTestersGetToManyRelatedWithResponse call
func ParseBetaGroupsBetaTestersGetToManyRelatedResponse(rsp *http.Response) (*BetaGroupsBetaTestersGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaGroupsBetaTestersGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BetaTestersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBetaGroupsBuildsGetToManyRelatedResponse parses an HTTP response from a BetaGroupsBuildsGetToManyRelatedWithResponse call
func ParseBetaGroupsBuildsGetToManyRelatedResponse(rsp *http.Response) (*BetaGroupsBuildsGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaGroupsBuildsGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BuildsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBetaGroupsBetaTestersDeleteToManyRelationshipResponse parses an HTTP response from a BetaGroupsBetaTestersDeleteToManyRelationshipWithResponse call
func ParseBetaGroupsBetaTestersDeleteToManyRelationshipResponse(rsp *http.Response) (*BetaGroupsBetaTestersDeleteToManyRelationshipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaGroupsBetaTestersDeleteToManyRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseBetaGroupsBetaTestersGetToManyRelationshipResponse parses an HTTP response from a BetaGroupsBetaTestersGetToManyRelationshipWithResponse call
func ParseBetaGroupsBetaTestersGetToManyRelationshipResponse(rsp *http.Response) (*BetaGroupsBetaTestersGetToManyRelationshipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaGroupsBetaTestersGetToManyRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BetaGroupBetaTestersLinkagesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBetaGroupsBetaTestersCreateToManyRelationshipResponse parses an HTTP response from a BetaGroupsBetaTestersCreateToManyRelationshipWithResponse call
func ParseBetaGroupsBetaTestersCreateToManyRelationshipResponse(rsp *http.Response) (*BetaGroupsBetaTestersCreateToManyRelationshipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaGroupsBetaTestersCreateToManyRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseBetaGroupsBuildsDeleteToManyRelationshipResponse parses an HTTP response from a BetaGroupsBuildsDeleteToManyRelationshipWithResponse call
func ParseBetaGroupsBuildsDeleteToManyRelationshipResponse(rsp *http.Response) (*BetaGroupsBuildsDeleteToManyRelationshipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaGroupsBuildsDeleteToManyRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseBetaGroupsBuildsGetToManyRelationshipResponse parses an HTTP response from a BetaGroupsBuildsGetToManyRelationshipWithResponse call
func ParseBetaGroupsBuildsGetToManyRelationshipResponse(rsp *http.Response) (*BetaGroupsBuildsGetToManyRelationshipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaGroupsBuildsGetToManyRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BetaGroupBuildsLinkagesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBetaGroupsBuildsCreateToManyRelationshipResponse parses an HTTP response from a BetaGroupsBuildsCreateToManyRelationshipWithResponse call
func ParseBetaGroupsBuildsCreateToManyRelationshipResponse(rsp *http.Response) (*BetaGroupsBuildsCreateToManyRelationshipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaGroupsBuildsCreateToManyRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseBetaLicenseAgreementsGetCollectionResponse parses an HTTP response from a BetaLicenseAgreementsGetCollectionWithResponse call
func ParseBetaLicenseAgreementsGetCollectionResponse(rsp *http.Response) (*BetaLicenseAgreementsGetCollectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaLicenseAgreementsGetCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BetaLicenseAgreementsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseBetaLicenseAgreementsGetInstanceResponse parses an HTTP response from a BetaLicenseAgreementsGetInstanceWithResponse call
func ParseBetaLicenseAgreementsGetInstanceResponse(rsp *http.Response) (*BetaLicenseAgreementsGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaLicenseAgreementsGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BetaLicenseAgreementResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBetaLicenseAgreementsUpdateInstanceResponse parses an HTTP response from a BetaLicenseAgreementsUpdateInstanceWithResponse call
func ParseBetaLicenseAgreementsUpdateInstanceResponse(rsp *http.Response) (*BetaLicenseAgreementsUpdateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaLicenseAgreementsUpdateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BetaLicenseAgreementResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseBetaLicenseAgreementsAppGetToOneRelatedResponse parses an HTTP response from a BetaLicenseAgreementsAppGetToOneRelatedWithResponse call
func ParseBetaLicenseAgreementsAppGetToOneRelatedResponse(rsp *http.Response) (*BetaLicenseAgreementsAppGetToOneRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaLicenseAgreementsAppGetToOneRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBetaTesterInvitationsCreateInstanceResponse parses an HTTP response from a BetaTesterInvitationsCreateInstanceWithResponse call
func ParseBetaTesterInvitationsCreateInstanceResponse(rsp *http.Response) (*BetaTesterInvitationsCreateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaTesterInvitationsCreateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BetaTesterInvitationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseBetaTestersGetCollectionResponse parses an HTTP response from a BetaTestersGetCollectionWithResponse call
func ParseBetaTestersGetCollectionResponse(rsp *http.Response) (*BetaTestersGetCollectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaTestersGetCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BetaTestersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseBetaTestersCreateInstanceResponse parses an HTTP response from a BetaTestersCreateInstanceWithResponse call
func ParseBetaTestersCreateInstanceResponse(rsp *http.Response) (*BetaTestersCreateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaTestersCreateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BetaTesterResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseBetaTestersDeleteInstanceResponse parses an HTTP response from a BetaTestersDeleteInstanceWithResponse call
func ParseBetaTestersDeleteInstanceResponse(rsp *http.Response) (*BetaTestersDeleteInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaTestersDeleteInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseBetaTestersGetInstanceResponse parses an HTTP response from a BetaTestersGetInstanceWithResponse call
func ParseBetaTestersGetInstanceResponse(rsp *http.Response) (*BetaTestersGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaTestersGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BetaTesterResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBetaTestersAppsGetToManyRelatedResponse parses an HTTP response from a BetaTestersAppsGetToManyRelatedWithResponse call
func ParseBetaTestersAppsGetToManyRelatedResponse(rsp *http.Response) (*BetaTestersAppsGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaTestersAppsGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBetaTestersBetaGroupsGetToManyRelatedResponse parses an HTTP response from a BetaTestersBetaGroupsGetToManyRelatedWithResponse call
func ParseBetaTestersBetaGroupsGetToManyRelatedResponse(rsp *http.Response) (*BetaTestersBetaGroupsGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaTestersBetaGroupsGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BetaGroupsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBetaTestersBuildsGetToManyRelatedResponse parses an HTTP response from a BetaTestersBuildsGetToManyRelatedWithResponse call
func ParseBetaTestersBuildsGetToManyRelatedResponse(rsp *http.Response) (*BetaTestersBuildsGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaTestersBuildsGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BuildsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBetaTestersAppsDeleteToManyRelationshipResponse parses an HTTP response from a BetaTestersAppsDeleteToManyRelationshipWithResponse call
func ParseBetaTestersAppsDeleteToManyRelationshipResponse(rsp *http.Response) (*BetaTestersAppsDeleteToManyRelationshipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaTestersAppsDeleteToManyRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseBetaTestersAppsGetToManyRelationshipResponse parses an HTTP response from a BetaTestersAppsGetToManyRelationshipWithResponse call
func ParseBetaTestersAppsGetToManyRelationshipResponse(rsp *http.Response) (*BetaTestersAppsGetToManyRelationshipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaTestersAppsGetToManyRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BetaTesterAppsLinkagesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBetaTestersBetaGroupsDeleteToManyRelationshipResponse parses an HTTP response from a BetaTestersBetaGroupsDeleteToManyRelationshipWithResponse call
func ParseBetaTestersBetaGroupsDeleteToManyRelationshipResponse(rsp *http.Response) (*BetaTestersBetaGroupsDeleteToManyRelationshipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaTestersBetaGroupsDeleteToManyRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseBetaTestersBetaGroupsGetToManyRelationshipResponse parses an HTTP response from a BetaTestersBetaGroupsGetToManyRelationshipWithResponse call
func ParseBetaTestersBetaGroupsGetToManyRelationshipResponse(rsp *http.Response) (*BetaTestersBetaGroupsGetToManyRelationshipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaTestersBetaGroupsGetToManyRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BetaTesterBetaGroupsLinkagesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBetaTestersBetaGroupsCreateToManyRelationshipResponse parses an HTTP response from a BetaTestersBetaGroupsCreateToManyRelationshipWithResponse call
func ParseBetaTestersBetaGroupsCreateToManyRelationshipResponse(rsp *http.Response) (*BetaTestersBetaGroupsCreateToManyRelationshipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaTestersBetaGroupsCreateToManyRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseBetaTestersBuildsDeleteToManyRelationshipResponse parses an HTTP response from a BetaTestersBuildsDeleteToManyRelationshipWithResponse call
func ParseBetaTestersBuildsDeleteToManyRelationshipResponse(rsp *http.Response) (*BetaTestersBuildsDeleteToManyRelationshipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaTestersBuildsDeleteToManyRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseBetaTestersBuildsGetToManyRelationshipResponse parses an HTTP response from a BetaTestersBuildsGetToManyRelationshipWithResponse call
func ParseBetaTestersBuildsGetToManyRelationshipResponse(rsp *http.Response) (*BetaTestersBuildsGetToManyRelationshipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaTestersBuildsGetToManyRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BetaTesterBuildsLinkagesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBetaTestersBuildsCreateToManyRelationshipResponse parses an HTTP response from a BetaTestersBuildsCreateToManyRelationshipWithResponse call
func ParseBetaTestersBuildsCreateToManyRelationshipResponse(rsp *http.Response) (*BetaTestersBuildsCreateToManyRelationshipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BetaTestersBuildsCreateToManyRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseBuildBetaDetailsGetCollectionResponse parses an HTTP response from a BuildBetaDetailsGetCollectionWithResponse call
func ParseBuildBetaDetailsGetCollectionResponse(rsp *http.Response) (*BuildBetaDetailsGetCollectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BuildBetaDetailsGetCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BuildBetaDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseBuildBetaDetailsGetInstanceResponse parses an HTTP response from a BuildBetaDetailsGetInstanceWithResponse call
func ParseBuildBetaDetailsGetInstanceResponse(rsp *http.Response) (*BuildBetaDetailsGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BuildBetaDetailsGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BuildBetaDetailResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBuildBetaDetailsUpdateInstanceResponse parses an HTTP response from a BuildBetaDetailsUpdateInstanceWithResponse call
func ParseBuildBetaDetailsUpdateInstanceResponse(rsp *http.Response) (*BuildBetaDetailsUpdateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BuildBetaDetailsUpdateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BuildBetaDetailResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseBuildBetaDetailsBuildGetToOneRelatedResponse parses an HTTP response from a BuildBetaDetailsBuildGetToOneRelatedWithResponse call
func ParseBuildBetaDetailsBuildGetToOneRelatedResponse(rsp *http.Response) (*BuildBetaDetailsBuildGetToOneRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BuildBetaDetailsBuildGetToOneRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BuildResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBuildBetaNotificationsCreateInstanceResponse parses an HTTP response from a BuildBetaNotificationsCreateInstanceWithResponse call
func ParseBuildBetaNotificationsCreateInstanceResponse(rsp *http.Response) (*BuildBetaNotificationsCreateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BuildBetaNotificationsCreateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BuildBetaNotificationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseBuildsGetCollectionResponse parses an HTTP response from a BuildsGetCollectionWithResponse call
func ParseBuildsGetCollectionResponse(rsp *http.Response) (*BuildsGetCollectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BuildsGetCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BuildsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseBuildsGetInstanceResponse parses an HTTP response from a BuildsGetInstanceWithResponse call
func ParseBuildsGetInstanceResponse(rsp *http.Response) (*BuildsGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BuildsGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BuildResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBuildsUpdateInstanceResponse parses an HTTP response from a BuildsUpdateInstanceWithResponse call
func ParseBuildsUpdateInstanceResponse(rsp *http.Response) (*BuildsUpdateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BuildsUpdateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BuildResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseBuildsAppGetToOneRelatedResponse parses an HTTP response from a BuildsAppGetToOneRelatedWithResponse call
func ParseBuildsAppGetToOneRelatedResponse(rsp *http.Response) (*BuildsAppGetToOneRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BuildsAppGetToOneRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBuildsAppEncryptionDeclarationGetToOneRelatedResponse parses an HTTP response from a BuildsAppEncryptionDeclarationGetToOneRelatedWithResponse call
func ParseBuildsAppEncryptionDeclarationGetToOneRelatedResponse(rsp *http.Response) (*BuildsAppEncryptionDeclarationGetToOneRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BuildsAppEncryptionDeclarationGetToOneRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppEncryptionDeclarationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBuildsAppStoreVersionGetToOneRelatedResponse parses an HTTP response from a BuildsAppStoreVersionGetToOneRelatedWithResponse call
func ParseBuildsAppStoreVersionGetToOneRelatedResponse(rsp *http.Response) (*BuildsAppStoreVersionGetToOneRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BuildsAppStoreVersionGetToOneRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppStoreVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBuildsBetaAppReviewSubmissionGetToOneRelatedResponse parses an HTTP response from a BuildsBetaAppReviewSubmissionGetToOneRelatedWithResponse call
func ParseBuildsBetaAppReviewSubmissionGetToOneRelatedResponse(rsp *http.Response) (*BuildsBetaAppReviewSubmissionGetToOneRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BuildsBetaAppReviewSubmissionGetToOneRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BetaAppReviewSubmissionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBuildsBetaBuildLocalizationsGetToManyRelatedResponse parses an HTTP response from a BuildsBetaBuildLocalizationsGetToManyRelatedWithResponse call
func ParseBuildsBetaBuildLocalizationsGetToManyRelatedResponse(rsp *http.Response) (*BuildsBetaBuildLocalizationsGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BuildsBetaBuildLocalizationsGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BetaBuildLocalizationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBuildsBuildBetaDetailGetToOneRelatedResponse parses an HTTP response from a BuildsBuildBetaDetailGetToOneRelatedWithResponse call
func ParseBuildsBuildBetaDetailGetToOneRelatedResponse(rsp *http.Response) (*BuildsBuildBetaDetailGetToOneRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BuildsBuildBetaDetailGetToOneRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BuildBetaDetailResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBuildsDiagnosticSignaturesGetToManyRelatedResponse parses an HTTP response from a BuildsDiagnosticSignaturesGetToManyRelatedWithResponse call
func ParseBuildsDiagnosticSignaturesGetToManyRelatedResponse(rsp *http.Response) (*BuildsDiagnosticSignaturesGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BuildsDiagnosticSignaturesGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DiagnosticSignaturesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBuildsIconsGetToManyRelatedResponse parses an HTTP response from a BuildsIconsGetToManyRelatedWithResponse call
func ParseBuildsIconsGetToManyRelatedResponse(rsp *http.Response) (*BuildsIconsGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BuildsIconsGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BuildIconsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBuildsIndividualTestersGetToManyRelatedResponse parses an HTTP response from a BuildsIndividualTestersGetToManyRelatedWithResponse call
func ParseBuildsIndividualTestersGetToManyRelatedResponse(rsp *http.Response) (*BuildsIndividualTestersGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BuildsIndividualTestersGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BetaTestersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBuildsPerfPowerMetricsGetToManyRelatedResponse parses an HTTP response from a BuildsPerfPowerMetricsGetToManyRelatedWithResponse call
func ParseBuildsPerfPowerMetricsGetToManyRelatedResponse(rsp *http.Response) (*BuildsPerfPowerMetricsGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BuildsPerfPowerMetricsGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PerfPowerMetricsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBuildsPreReleaseVersionGetToOneRelatedResponse parses an HTTP response from a BuildsPreReleaseVersionGetToOneRelatedWithResponse call
func ParseBuildsPreReleaseVersionGetToOneRelatedResponse(rsp *http.Response) (*BuildsPreReleaseVersionGetToOneRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BuildsPreReleaseVersionGetToOneRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrereleaseVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBuildsAppEncryptionDeclarationGetToOneRelationshipResponse parses an HTTP response from a BuildsAppEncryptionDeclarationGetToOneRelationshipWithResponse call
func ParseBuildsAppEncryptionDeclarationGetToOneRelationshipResponse(rsp *http.Response) (*BuildsAppEncryptionDeclarationGetToOneRelationshipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BuildsAppEncryptionDeclarationGetToOneRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BuildAppEncryptionDeclarationLinkageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBuildsAppEncryptionDeclarationUpdateToOneRelationshipResponse parses an HTTP response from a BuildsAppEncryptionDeclarationUpdateToOneRelationshipWithResponse call
func ParseBuildsAppEncryptionDeclarationUpdateToOneRelationshipResponse(rsp *http.Response) (*BuildsAppEncryptionDeclarationUpdateToOneRelationshipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BuildsAppEncryptionDeclarationUpdateToOneRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseBuildsBetaGroupsDeleteToManyRelationshipResponse parses an HTTP response from a BuildsBetaGroupsDeleteToManyRelationshipWithResponse call
func ParseBuildsBetaGroupsDeleteToManyRelationshipResponse(rsp *http.Response) (*BuildsBetaGroupsDeleteToManyRelationshipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BuildsBetaGroupsDeleteToManyRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseBuildsBetaGroupsCreateToManyRelationshipResponse parses an HTTP response from a BuildsBetaGroupsCreateToManyRelationshipWithResponse call
func ParseBuildsBetaGroupsCreateToManyRelationshipResponse(rsp *http.Response) (*BuildsBetaGroupsCreateToManyRelationshipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BuildsBetaGroupsCreateToManyRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseBuildsIndividualTestersDeleteToManyRelationshipResponse parses an HTTP response from a BuildsIndividualTestersDeleteToManyRelationshipWithResponse call
func ParseBuildsIndividualTestersDeleteToManyRelationshipResponse(rsp *http.Response) (*BuildsIndividualTestersDeleteToManyRelationshipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BuildsIndividualTestersDeleteToManyRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseBuildsIndividualTestersGetToManyRelationshipResponse parses an HTTP response from a BuildsIndividualTestersGetToManyRelationshipWithResponse call
func ParseBuildsIndividualTestersGetToManyRelationshipResponse(rsp *http.Response) (*BuildsIndividualTestersGetToManyRelationshipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BuildsIndividualTestersGetToManyRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BuildIndividualTestersLinkagesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBuildsIndividualTestersCreateToManyRelationshipResponse parses an HTTP response from a BuildsIndividualTestersCreateToManyRelationshipWithResponse call
func ParseBuildsIndividualTestersCreateToManyRelationshipResponse(rsp *http.Response) (*BuildsIndividualTestersCreateToManyRelationshipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BuildsIndividualTestersCreateToManyRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseBundleIdCapabilitiesCreateInstanceResponse parses an HTTP response from a BundleIdCapabilitiesCreateInstanceWithResponse call
func ParseBundleIdCapabilitiesCreateInstanceResponse(rsp *http.Response) (*BundleIdCapabilitiesCreateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundleIdCapabilitiesCreateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BundleIdCapabilityResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseBundleIdCapabilitiesDeleteInstanceResponse parses an HTTP response from a BundleIdCapabilitiesDeleteInstanceWithResponse call
func ParseBundleIdCapabilitiesDeleteInstanceResponse(rsp *http.Response) (*BundleIdCapabilitiesDeleteInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundleIdCapabilitiesDeleteInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseBundleIdCapabilitiesUpdateInstanceResponse parses an HTTP response from a BundleIdCapabilitiesUpdateInstanceWithResponse call
func ParseBundleIdCapabilitiesUpdateInstanceResponse(rsp *http.Response) (*BundleIdCapabilitiesUpdateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundleIdCapabilitiesUpdateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BundleIdCapabilityResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseBundleIdsGetCollectionResponse parses an HTTP response from a BundleIdsGetCollectionWithResponse call
func ParseBundleIdsGetCollectionResponse(rsp *http.Response) (*BundleIdsGetCollectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundleIdsGetCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BundleIdsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseBundleIdsCreateInstanceResponse parses an HTTP response from a BundleIdsCreateInstanceWithResponse call
func ParseBundleIdsCreateInstanceResponse(rsp *http.Response) (*BundleIdsCreateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundleIdsCreateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BundleIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseBundleIdsDeleteInstanceResponse parses an HTTP response from a BundleIdsDeleteInstanceWithResponse call
func ParseBundleIdsDeleteInstanceResponse(rsp *http.Response) (*BundleIdsDeleteInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundleIdsDeleteInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseBundleIdsGetInstanceResponse parses an HTTP response from a BundleIdsGetInstanceWithResponse call
func ParseBundleIdsGetInstanceResponse(rsp *http.Response) (*BundleIdsGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundleIdsGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BundleIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBundleIdsUpdateInstanceResponse parses an HTTP response from a BundleIdsUpdateInstanceWithResponse call
func ParseBundleIdsUpdateInstanceResponse(rsp *http.Response) (*BundleIdsUpdateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundleIdsUpdateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BundleIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseBundleIdsAppGetToOneRelatedResponse parses an HTTP response from a BundleIdsAppGetToOneRelatedWithResponse call
func ParseBundleIdsAppGetToOneRelatedResponse(rsp *http.Response) (*BundleIdsAppGetToOneRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundleIdsAppGetToOneRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBundleIdsBundleIdCapabilitiesGetToManyRelatedResponse parses an HTTP response from a BundleIdsBundleIdCapabilitiesGetToManyRelatedWithResponse call
func ParseBundleIdsBundleIdCapabilitiesGetToManyRelatedResponse(rsp *http.Response) (*BundleIdsBundleIdCapabilitiesGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundleIdsBundleIdCapabilitiesGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BundleIdCapabilitiesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBundleIdsProfilesGetToManyRelatedResponse parses an HTTP response from a BundleIdsProfilesGetToManyRelatedWithResponse call
func ParseBundleIdsProfilesGetToManyRelatedResponse(rsp *http.Response) (*BundleIdsProfilesGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundleIdsProfilesGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProfilesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCertificatesGetCollectionResponse parses an HTTP response from a CertificatesGetCollectionWithResponse call
func ParseCertificatesGetCollectionResponse(rsp *http.Response) (*CertificatesGetCollectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CertificatesGetCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CertificatesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseCertificatesCreateInstanceResponse parses an HTTP response from a CertificatesCreateInstanceWithResponse call
func ParseCertificatesCreateInstanceResponse(rsp *http.Response) (*CertificatesCreateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CertificatesCreateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CertificateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseCertificatesDeleteInstanceResponse parses an HTTP response from a CertificatesDeleteInstanceWithResponse call
func ParseCertificatesDeleteInstanceResponse(rsp *http.Response) (*CertificatesDeleteInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CertificatesDeleteInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseCertificatesGetInstanceResponse parses an HTTP response from a CertificatesGetInstanceWithResponse call
func ParseCertificatesGetInstanceResponse(rsp *http.Response) (*CertificatesGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CertificatesGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CertificateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCiArtifactsGetInstanceResponse parses an HTTP response from a CiArtifactsGetInstanceWithResponse call
func ParseCiArtifactsGetInstanceResponse(rsp *http.Response) (*CiArtifactsGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CiArtifactsGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CiArtifactResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCiBuildActionsGetInstanceResponse parses an HTTP response from a CiBuildActionsGetInstanceWithResponse call
func ParseCiBuildActionsGetInstanceResponse(rsp *http.Response) (*CiBuildActionsGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CiBuildActionsGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CiBuildActionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCiBuildActionsArtifactsGetToManyRelatedResponse parses an HTTP response from a CiBuildActionsArtifactsGetToManyRelatedWithResponse call
func ParseCiBuildActionsArtifactsGetToManyRelatedResponse(rsp *http.Response) (*CiBuildActionsArtifactsGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CiBuildActionsArtifactsGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CiArtifactsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCiBuildActionsBuildRunGetToOneRelatedResponse parses an HTTP response from a CiBuildActionsBuildRunGetToOneRelatedWithResponse call
func ParseCiBuildActionsBuildRunGetToOneRelatedResponse(rsp *http.Response) (*CiBuildActionsBuildRunGetToOneRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CiBuildActionsBuildRunGetToOneRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CiBuildRunResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCiBuildActionsIssuesGetToManyRelatedResponse parses an HTTP response from a CiBuildActionsIssuesGetToManyRelatedWithResponse call
func ParseCiBuildActionsIssuesGetToManyRelatedResponse(rsp *http.Response) (*CiBuildActionsIssuesGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CiBuildActionsIssuesGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CiIssuesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCiBuildActionsTestResultsGetToManyRelatedResponse parses an HTTP response from a CiBuildActionsTestResultsGetToManyRelatedWithResponse call
func ParseCiBuildActionsTestResultsGetToManyRelatedResponse(rsp *http.Response) (*CiBuildActionsTestResultsGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CiBuildActionsTestResultsGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CiTestResultsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCiBuildRunsCreateInstanceResponse parses an HTTP response from a CiBuildRunsCreateInstanceWithResponse call
func ParseCiBuildRunsCreateInstanceResponse(rsp *http.Response) (*CiBuildRunsCreateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CiBuildRunsCreateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CiBuildRunResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseCiBuildRunsGetInstanceResponse parses an HTTP response from a CiBuildRunsGetInstanceWithResponse call
func ParseCiBuildRunsGetInstanceResponse(rsp *http.Response) (*CiBuildRunsGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CiBuildRunsGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CiBuildRunResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCiBuildRunsActionsGetToManyRelatedResponse parses an HTTP response from a CiBuildRunsActionsGetToManyRelatedWithResponse call
func ParseCiBuildRunsActionsGetToManyRelatedResponse(rsp *http.Response) (*CiBuildRunsActionsGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CiBuildRunsActionsGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CiBuildActionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCiBuildRunsBuildsGetToManyRelatedResponse parses an HTTP response from a CiBuildRunsBuildsGetToManyRelatedWithResponse call
func ParseCiBuildRunsBuildsGetToManyRelatedResponse(rsp *http.Response) (*CiBuildRunsBuildsGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CiBuildRunsBuildsGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BuildsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCiIssuesGetInstanceResponse parses an HTTP response from a CiIssuesGetInstanceWithResponse call
func ParseCiIssuesGetInstanceResponse(rsp *http.Response) (*CiIssuesGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CiIssuesGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CiIssueResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCiMacOsVersionsGetCollectionResponse parses an HTTP response from a CiMacOsVersionsGetCollectionWithResponse call
func ParseCiMacOsVersionsGetCollectionResponse(rsp *http.Response) (*CiMacOsVersionsGetCollectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CiMacOsVersionsGetCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CiMacOsVersionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseCiMacOsVersionsGetInstanceResponse parses an HTTP response from a CiMacOsVersionsGetInstanceWithResponse call
func ParseCiMacOsVersionsGetInstanceResponse(rsp *http.Response) (*CiMacOsVersionsGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CiMacOsVersionsGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CiMacOsVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCiMacOsVersionsXcodeVersionsGetToManyRelatedResponse parses an HTTP response from a CiMacOsVersionsXcodeVersionsGetToManyRelatedWithResponse call
func ParseCiMacOsVersionsXcodeVersionsGetToManyRelatedResponse(rsp *http.Response) (*CiMacOsVersionsXcodeVersionsGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CiMacOsVersionsXcodeVersionsGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CiXcodeVersionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCiProductsGetCollectionResponse parses an HTTP response from a CiProductsGetCollectionWithResponse call
func ParseCiProductsGetCollectionResponse(rsp *http.Response) (*CiProductsGetCollectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CiProductsGetCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CiProductsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseCiProductsDeleteInstanceResponse parses an HTTP response from a CiProductsDeleteInstanceWithResponse call
func ParseCiProductsDeleteInstanceResponse(rsp *http.Response) (*CiProductsDeleteInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CiProductsDeleteInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseCiProductsGetInstanceResponse parses an HTTP response from a CiProductsGetInstanceWithResponse call
func ParseCiProductsGetInstanceResponse(rsp *http.Response) (*CiProductsGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CiProductsGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CiProductResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCiProductsAdditionalRepositoriesGetToManyRelatedResponse parses an HTTP response from a CiProductsAdditionalRepositoriesGetToManyRelatedWithResponse call
func ParseCiProductsAdditionalRepositoriesGetToManyRelatedResponse(rsp *http.Response) (*CiProductsAdditionalRepositoriesGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CiProductsAdditionalRepositoriesGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScmRepositoriesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCiProductsAppGetToOneRelatedResponse parses an HTTP response from a CiProductsAppGetToOneRelatedWithResponse call
func ParseCiProductsAppGetToOneRelatedResponse(rsp *http.Response) (*CiProductsAppGetToOneRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CiProductsAppGetToOneRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCiProductsBuildRunsGetToManyRelatedResponse parses an HTTP response from a CiProductsBuildRunsGetToManyRelatedWithResponse call
func ParseCiProductsBuildRunsGetToManyRelatedResponse(rsp *http.Response) (*CiProductsBuildRunsGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CiProductsBuildRunsGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CiBuildRunsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCiProductsPrimaryRepositoriesGetToManyRelatedResponse parses an HTTP response from a CiProductsPrimaryRepositoriesGetToManyRelatedWithResponse call
func ParseCiProductsPrimaryRepositoriesGetToManyRelatedResponse(rsp *http.Response) (*CiProductsPrimaryRepositoriesGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CiProductsPrimaryRepositoriesGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScmRepositoriesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCiProductsWorkflowsGetToManyRelatedResponse parses an HTTP response from a CiProductsWorkflowsGetToManyRelatedWithResponse call
func ParseCiProductsWorkflowsGetToManyRelatedResponse(rsp *http.Response) (*CiProductsWorkflowsGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CiProductsWorkflowsGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CiWorkflowsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCiTestResultsGetInstanceResponse parses an HTTP response from a CiTestResultsGetInstanceWithResponse call
func ParseCiTestResultsGetInstanceResponse(rsp *http.Response) (*CiTestResultsGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CiTestResultsGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CiTestResultResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCiWorkflowsCreateInstanceResponse parses an HTTP response from a CiWorkflowsCreateInstanceWithResponse call
func ParseCiWorkflowsCreateInstanceResponse(rsp *http.Response) (*CiWorkflowsCreateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CiWorkflowsCreateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CiWorkflowResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseCiWorkflowsDeleteInstanceResponse parses an HTTP response from a CiWorkflowsDeleteInstanceWithResponse call
func ParseCiWorkflowsDeleteInstanceResponse(rsp *http.Response) (*CiWorkflowsDeleteInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CiWorkflowsDeleteInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseCiWorkflowsGetInstanceResponse parses an HTTP response from a CiWorkflowsGetInstanceWithResponse call
func ParseCiWorkflowsGetInstanceResponse(rsp *http.Response) (*CiWorkflowsGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CiWorkflowsGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CiWorkflowResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCiWorkflowsUpdateInstanceResponse parses an HTTP response from a CiWorkflowsUpdateInstanceWithResponse call
func ParseCiWorkflowsUpdateInstanceResponse(rsp *http.Response) (*CiWorkflowsUpdateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CiWorkflowsUpdateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CiWorkflowResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseCiWorkflowsBuildRunsGetToManyRelatedResponse parses an HTTP response from a CiWorkflowsBuildRunsGetToManyRelatedWithResponse call
func ParseCiWorkflowsBuildRunsGetToManyRelatedResponse(rsp *http.Response) (*CiWorkflowsBuildRunsGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CiWorkflowsBuildRunsGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CiBuildRunsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCiWorkflowsRepositoryGetToOneRelatedResponse parses an HTTP response from a CiWorkflowsRepositoryGetToOneRelatedWithResponse call
func ParseCiWorkflowsRepositoryGetToOneRelatedResponse(rsp *http.Response) (*CiWorkflowsRepositoryGetToOneRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CiWorkflowsRepositoryGetToOneRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScmRepositoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCiXcodeVersionsGetCollectionResponse parses an HTTP response from a CiXcodeVersionsGetCollectionWithResponse call
func ParseCiXcodeVersionsGetCollectionResponse(rsp *http.Response) (*CiXcodeVersionsGetCollectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CiXcodeVersionsGetCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CiXcodeVersionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseCiXcodeVersionsGetInstanceResponse parses an HTTP response from a CiXcodeVersionsGetInstanceWithResponse call
func ParseCiXcodeVersionsGetInstanceResponse(rsp *http.Response) (*CiXcodeVersionsGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CiXcodeVersionsGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CiXcodeVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCiXcodeVersionsMacOsVersionsGetToManyRelatedResponse parses an HTTP response from a CiXcodeVersionsMacOsVersionsGetToManyRelatedWithResponse call
func ParseCiXcodeVersionsMacOsVersionsGetToManyRelatedResponse(rsp *http.Response) (*CiXcodeVersionsMacOsVersionsGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CiXcodeVersionsMacOsVersionsGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CiMacOsVersionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDevicesGetCollectionResponse parses an HTTP response from a DevicesGetCollectionWithResponse call
func ParseDevicesGetCollectionResponse(rsp *http.Response) (*DevicesGetCollectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevicesGetCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DevicesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseDevicesCreateInstanceResponse parses an HTTP response from a DevicesCreateInstanceWithResponse call
func ParseDevicesCreateInstanceResponse(rsp *http.Response) (*DevicesCreateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevicesCreateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DeviceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDevicesGetInstanceResponse parses an HTTP response from a DevicesGetInstanceWithResponse call
func ParseDevicesGetInstanceResponse(rsp *http.Response) (*DevicesGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevicesGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDevicesUpdateInstanceResponse parses an HTTP response from a DevicesUpdateInstanceWithResponse call
func ParseDevicesUpdateInstanceResponse(rsp *http.Response) (*DevicesUpdateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DevicesUpdateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDiagnosticSignaturesLogsGetToManyRelatedResponse parses an HTTP response from a DiagnosticSignaturesLogsGetToManyRelatedWithResponse call
func ParseDiagnosticSignaturesLogsGetToManyRelatedResponse(rsp *http.Response) (*DiagnosticSignaturesLogsGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DiagnosticSignaturesLogsGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DiagnosticLogsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseEndUserLicenseAgreementsCreateInstanceResponse parses an HTTP response from a EndUserLicenseAgreementsCreateInstanceWithResponse call
func ParseEndUserLicenseAgreementsCreateInstanceResponse(rsp *http.Response) (*EndUserLicenseAgreementsCreateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EndUserLicenseAgreementsCreateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest EndUserLicenseAgreementResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseEndUserLicenseAgreementsDeleteInstanceResponse parses an HTTP response from a EndUserLicenseAgreementsDeleteInstanceWithResponse call
func ParseEndUserLicenseAgreementsDeleteInstanceResponse(rsp *http.Response) (*EndUserLicenseAgreementsDeleteInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EndUserLicenseAgreementsDeleteInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseEndUserLicenseAgreementsGetInstanceResponse parses an HTTP response from a EndUserLicenseAgreementsGetInstanceWithResponse call
func ParseEndUserLicenseAgreementsGetInstanceResponse(rsp *http.Response) (*EndUserLicenseAgreementsGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EndUserLicenseAgreementsGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EndUserLicenseAgreementResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseEndUserLicenseAgreementsUpdateInstanceResponse parses an HTTP response from a EndUserLicenseAgreementsUpdateInstanceWithResponse call
func ParseEndUserLicenseAgreementsUpdateInstanceResponse(rsp *http.Response) (*EndUserLicenseAgreementsUpdateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EndUserLicenseAgreementsUpdateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EndUserLicenseAgreementResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseEndUserLicenseAgreementsTerritoriesGetToManyRelatedResponse parses an HTTP response from a EndUserLicenseAgreementsTerritoriesGetToManyRelatedWithResponse call
func ParseEndUserLicenseAgreementsTerritoriesGetToManyRelatedResponse(rsp *http.Response) (*EndUserLicenseAgreementsTerritoriesGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EndUserLicenseAgreementsTerritoriesGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TerritoriesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseFinanceReportsGetCollectionResponse parses an HTTP response from a FinanceReportsGetCollectionWithResponse call
func ParseFinanceReportsGetCollectionResponse(rsp *http.Response) (*FinanceReportsGetCollectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FinanceReportsGetCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedResponse parses an HTTP response from a GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedWithResponse call
func ParseGameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedResponse(rsp *http.Response) (*GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GameCenterEnabledVersionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipResponse parses an HTTP response from a GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipWithResponse call
func ParseGameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipResponse(rsp *http.Response) (*GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipResponse parses an HTTP response from a GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipWithResponse call
func ParseGameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipResponse(rsp *http.Response) (*GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GameCenterEnabledVersionCompatibleVersionsLinkagesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipResponse parses an HTTP response from a GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipWithResponse call
func ParseGameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipResponse(rsp *http.Response) (*GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipResponse parses an HTTP response from a GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipWithResponse call
func ParseGameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipResponse(rsp *http.Response) (*GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseIdfaDeclarationsCreateInstanceResponse parses an HTTP response from a IdfaDeclarationsCreateInstanceWithResponse call
func ParseIdfaDeclarationsCreateInstanceResponse(rsp *http.Response) (*IdfaDeclarationsCreateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IdfaDeclarationsCreateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IdfaDeclarationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseIdfaDeclarationsDeleteInstanceResponse parses an HTTP response from a IdfaDeclarationsDeleteInstanceWithResponse call
func ParseIdfaDeclarationsDeleteInstanceResponse(rsp *http.Response) (*IdfaDeclarationsDeleteInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IdfaDeclarationsDeleteInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseIdfaDeclarationsUpdateInstanceResponse parses an HTTP response from a IdfaDeclarationsUpdateInstanceWithResponse call
func ParseIdfaDeclarationsUpdateInstanceResponse(rsp *http.Response) (*IdfaDeclarationsUpdateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IdfaDeclarationsUpdateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IdfaDeclarationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseInAppPurchasesGetInstanceResponse parses an HTTP response from a InAppPurchasesGetInstanceWithResponse call
func ParseInAppPurchasesGetInstanceResponse(rsp *http.Response) (*InAppPurchasesGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InAppPurchasesGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InAppPurchaseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePreReleaseVersionsGetCollectionResponse parses an HTTP response from a PreReleaseVersionsGetCollectionWithResponse call
func ParsePreReleaseVersionsGetCollectionResponse(rsp *http.Response) (*PreReleaseVersionsGetCollectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PreReleaseVersionsGetCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PreReleaseVersionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePreReleaseVersionsGetInstanceResponse parses an HTTP response from a PreReleaseVersionsGetInstanceWithResponse call
func ParsePreReleaseVersionsGetInstanceResponse(rsp *http.Response) (*PreReleaseVersionsGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PreReleaseVersionsGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrereleaseVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePreReleaseVersionsAppGetToOneRelatedResponse parses an HTTP response from a PreReleaseVersionsAppGetToOneRelatedWithResponse call
func ParsePreReleaseVersionsAppGetToOneRelatedResponse(rsp *http.Response) (*PreReleaseVersionsAppGetToOneRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PreReleaseVersionsAppGetToOneRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePreReleaseVersionsBuildsGetToManyRelatedResponse parses an HTTP response from a PreReleaseVersionsBuildsGetToManyRelatedWithResponse call
func ParsePreReleaseVersionsBuildsGetToManyRelatedResponse(rsp *http.Response) (*PreReleaseVersionsBuildsGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PreReleaseVersionsBuildsGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BuildsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseProfilesGetCollectionResponse parses an HTTP response from a ProfilesGetCollectionWithResponse call
func ParseProfilesGetCollectionResponse(rsp *http.Response) (*ProfilesGetCollectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProfilesGetCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProfilesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseProfilesCreateInstanceResponse parses an HTTP response from a ProfilesCreateInstanceWithResponse call
func ParseProfilesCreateInstanceResponse(rsp *http.Response) (*ProfilesCreateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProfilesCreateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ProfileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseProfilesDeleteInstanceResponse parses an HTTP response from a ProfilesDeleteInstanceWithResponse call
func ParseProfilesDeleteInstanceResponse(rsp *http.Response) (*ProfilesDeleteInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProfilesDeleteInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseProfilesGetInstanceResponse parses an HTTP response from a ProfilesGetInstanceWithResponse call
func ParseProfilesGetInstanceResponse(rsp *http.Response) (*ProfilesGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProfilesGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProfileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseProfilesBundleIdGetToOneRelatedResponse parses an HTTP response from a ProfilesBundleIdGetToOneRelatedWithResponse call
func ParseProfilesBundleIdGetToOneRelatedResponse(rsp *http.Response) (*ProfilesBundleIdGetToOneRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProfilesBundleIdGetToOneRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BundleIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseProfilesCertificatesGetToManyRelatedResponse parses an HTTP response from a ProfilesCertificatesGetToManyRelatedWithResponse call
func ParseProfilesCertificatesGetToManyRelatedResponse(rsp *http.Response) (*ProfilesCertificatesGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProfilesCertificatesGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CertificatesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseProfilesDevicesGetToManyRelatedResponse parses an HTTP response from a ProfilesDevicesGetToManyRelatedWithResponse call
func ParseProfilesDevicesGetToManyRelatedResponse(rsp *http.Response) (*ProfilesDevicesGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProfilesDevicesGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DevicesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseRoutingAppCoveragesCreateInstanceResponse parses an HTTP response from a RoutingAppCoveragesCreateInstanceWithResponse call
func ParseRoutingAppCoveragesCreateInstanceResponse(rsp *http.Response) (*RoutingAppCoveragesCreateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RoutingAppCoveragesCreateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RoutingAppCoverageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseRoutingAppCoveragesDeleteInstanceResponse parses an HTTP response from a RoutingAppCoveragesDeleteInstanceWithResponse call
func ParseRoutingAppCoveragesDeleteInstanceResponse(rsp *http.Response) (*RoutingAppCoveragesDeleteInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RoutingAppCoveragesDeleteInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseRoutingAppCoveragesGetInstanceResponse parses an HTTP response from a RoutingAppCoveragesGetInstanceWithResponse call
func ParseRoutingAppCoveragesGetInstanceResponse(rsp *http.Response) (*RoutingAppCoveragesGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RoutingAppCoveragesGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoutingAppCoverageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseRoutingAppCoveragesUpdateInstanceResponse parses an HTTP response from a RoutingAppCoveragesUpdateInstanceWithResponse call
func ParseRoutingAppCoveragesUpdateInstanceResponse(rsp *http.Response) (*RoutingAppCoveragesUpdateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RoutingAppCoveragesUpdateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoutingAppCoverageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseSalesReportsGetCollectionResponse parses an HTTP response from a SalesReportsGetCollectionWithResponse call
func ParseSalesReportsGetCollectionResponse(rsp *http.Response) (*SalesReportsGetCollectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SalesReportsGetCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseScmGitReferencesGetInstanceResponse parses an HTTP response from a ScmGitReferencesGetInstanceWithResponse call
func ParseScmGitReferencesGetInstanceResponse(rsp *http.Response) (*ScmGitReferencesGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScmGitReferencesGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScmGitReferenceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseScmProvidersGetCollectionResponse parses an HTTP response from a ScmProvidersGetCollectionWithResponse call
func ParseScmProvidersGetCollectionResponse(rsp *http.Response) (*ScmProvidersGetCollectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScmProvidersGetCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScmProvidersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseScmProvidersGetInstanceResponse parses an HTTP response from a ScmProvidersGetInstanceWithResponse call
func ParseScmProvidersGetInstanceResponse(rsp *http.Response) (*ScmProvidersGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScmProvidersGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScmProviderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseScmProvidersRepositoriesGetToManyRelatedResponse parses an HTTP response from a ScmProvidersRepositoriesGetToManyRelatedWithResponse call
func ParseScmProvidersRepositoriesGetToManyRelatedResponse(rsp *http.Response) (*ScmProvidersRepositoriesGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScmProvidersRepositoriesGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScmRepositoriesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseScmPullRequestsGetInstanceResponse parses an HTTP response from a ScmPullRequestsGetInstanceWithResponse call
func ParseScmPullRequestsGetInstanceResponse(rsp *http.Response) (*ScmPullRequestsGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScmPullRequestsGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScmPullRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseScmRepositoriesGetCollectionResponse parses an HTTP response from a ScmRepositoriesGetCollectionWithResponse call
func ParseScmRepositoriesGetCollectionResponse(rsp *http.Response) (*ScmRepositoriesGetCollectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScmRepositoriesGetCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScmRepositoriesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseScmRepositoriesGetInstanceResponse parses an HTTP response from a ScmRepositoriesGetInstanceWithResponse call
func ParseScmRepositoriesGetInstanceResponse(rsp *http.Response) (*ScmRepositoriesGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScmRepositoriesGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScmRepositoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseScmRepositoriesGitReferencesGetToManyRelatedResponse parses an HTTP response from a ScmRepositoriesGitReferencesGetToManyRelatedWithResponse call
func ParseScmRepositoriesGitReferencesGetToManyRelatedResponse(rsp *http.Response) (*ScmRepositoriesGitReferencesGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScmRepositoriesGitReferencesGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScmGitReferencesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseScmRepositoriesPullRequestsGetToManyRelatedResponse parses an HTTP response from a ScmRepositoriesPullRequestsGetToManyRelatedWithResponse call
func ParseScmRepositoriesPullRequestsGetToManyRelatedResponse(rsp *http.Response) (*ScmRepositoriesPullRequestsGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScmRepositoriesPullRequestsGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScmPullRequestsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseTerritoriesGetCollectionResponse parses an HTTP response from a TerritoriesGetCollectionWithResponse call
func ParseTerritoriesGetCollectionResponse(rsp *http.Response) (*TerritoriesGetCollectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TerritoriesGetCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TerritoriesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseUserInvitationsGetCollectionResponse parses an HTTP response from a UserInvitationsGetCollectionWithResponse call
func ParseUserInvitationsGetCollectionResponse(rsp *http.Response) (*UserInvitationsGetCollectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserInvitationsGetCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserInvitationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseUserInvitationsCreateInstanceResponse parses an HTTP response from a UserInvitationsCreateInstanceWithResponse call
func ParseUserInvitationsCreateInstanceResponse(rsp *http.Response) (*UserInvitationsCreateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserInvitationsCreateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UserInvitationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseUserInvitationsDeleteInstanceResponse parses an HTTP response from a UserInvitationsDeleteInstanceWithResponse call
func ParseUserInvitationsDeleteInstanceResponse(rsp *http.Response) (*UserInvitationsDeleteInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserInvitationsDeleteInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseUserInvitationsGetInstanceResponse parses an HTTP response from a UserInvitationsGetInstanceWithResponse call
func ParseUserInvitationsGetInstanceResponse(rsp *http.Response) (*UserInvitationsGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserInvitationsGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserInvitationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUserInvitationsVisibleAppsGetToManyRelatedResponse parses an HTTP response from a UserInvitationsVisibleAppsGetToManyRelatedWithResponse call
func ParseUserInvitationsVisibleAppsGetToManyRelatedResponse(rsp *http.Response) (*UserInvitationsVisibleAppsGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserInvitationsVisibleAppsGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUsersGetCollectionResponse parses an HTTP response from a UsersGetCollectionWithResponse call
func ParseUsersGetCollectionResponse(rsp *http.Response) (*UsersGetCollectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersGetCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UsersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseUsersDeleteInstanceResponse parses an HTTP response from a UsersDeleteInstanceWithResponse call
func ParseUsersDeleteInstanceResponse(rsp *http.Response) (*UsersDeleteInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersDeleteInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseUsersGetInstanceResponse parses an HTTP response from a UsersGetInstanceWithResponse call
func ParseUsersGetInstanceResponse(rsp *http.Response) (*UsersGetInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersGetInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUsersUpdateInstanceResponse parses an HTTP response from a UsersUpdateInstanceWithResponse call
func ParseUsersUpdateInstanceResponse(rsp *http.Response) (*UsersUpdateInstanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersUpdateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseUsersVisibleAppsDeleteToManyRelationshipResponse parses an HTTP response from a UsersVisibleAppsDeleteToManyRelationshipWithResponse call
func ParseUsersVisibleAppsDeleteToManyRelationshipResponse(rsp *http.Response) (*UsersVisibleAppsDeleteToManyRelationshipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersVisibleAppsDeleteToManyRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseUsersVisibleAppsGetToManyRelationshipResponse parses an HTTP response from a UsersVisibleAppsGetToManyRelationshipWithResponse call
func ParseUsersVisibleAppsGetToManyRelationshipResponse(rsp *http.Response) (*UsersVisibleAppsGetToManyRelationshipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersVisibleAppsGetToManyRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserVisibleAppsLinkagesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUsersVisibleAppsReplaceToManyRelationshipResponse parses an HTTP response from a UsersVisibleAppsReplaceToManyRelationshipWithResponse call
func ParseUsersVisibleAppsReplaceToManyRelationshipResponse(rsp *http.Response) (*UsersVisibleAppsReplaceToManyRelationshipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersVisibleAppsReplaceToManyRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseUsersVisibleAppsCreateToManyRelationshipResponse parses an HTTP response from a UsersVisibleAppsCreateToManyRelationshipWithResponse call
func ParseUsersVisibleAppsCreateToManyRelationshipResponse(rsp *http.Response) (*UsersVisibleAppsCreateToManyRelationshipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersVisibleAppsCreateToManyRelationshipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseUsersVisibleAppsGetToManyRelatedResponse parses an HTTP response from a UsersVisibleAppsGetToManyRelatedWithResponse call
func ParseUsersVisibleAppsGetToManyRelatedResponse(rsp *http.Response) (*UsersVisibleAppsGetToManyRelatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersVisibleAppsGetToManyRelatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

